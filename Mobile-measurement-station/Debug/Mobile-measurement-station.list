
Mobile-measurement-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b30  08006fe8  08006fe8  00007fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b18  08007b18  00009200  2**0
                  CONTENTS
  4 .ARM          00000008  08007b18  08007b18  00008b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b20  08007b20  00009200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b20  08007b20  00008b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b24  08007b24  00008b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08007b28  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000200  08007d28  00009200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08007d28  000096d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a5  00000000  00000000  00009230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ce  00000000  00000000  00014ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00016ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000921  00000000  00000000  00017830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a8e  00000000  00000000  00018151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5c3  00000000  00000000  0001bbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c778a  00000000  00000000  000271a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee92c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004614  00000000  00000000  000ee970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f2f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fcc 	.word	0x08006fcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08006fcc 	.word	0x08006fcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	@ (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b087      	sub	sp, #28
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3330      	adds	r3, #48	@ 0x30
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	4413      	add	r3, r2
 8000d5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	211f      	movs	r1, #31
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	401a      	ands	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0e9b      	lsrs	r3, r3, #26
 8000d76:	f003 011f 	and.w	r1, r3, #31
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	431a      	orrs	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d8a:	bf00      	nop
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b087      	sub	sp, #28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3314      	adds	r3, #20
 8000da6:	461a      	mov	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0e5b      	lsrs	r3, r3, #25
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	4413      	add	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	0d1b      	lsrs	r3, r3, #20
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	0d1b      	lsrs	r3, r3, #20
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000de0:	bf00      	nop
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0318 	and.w	r3, r3, #24
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e10:	40d9      	lsrs	r1, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	400b      	ands	r3, r1
 8000e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	0007ffff 	.word	0x0007ffff

08000e34 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6093      	str	r3, [r2, #8]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e96:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000eba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ee2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ee6:	f043 0204 	orr.w	r2, r3, #4
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	b29b      	uxth	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d101      	bne.n	8000f2c <LL_ADC_IsActiveFlag_EOC+0x18>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <LL_ADC_IsActiveFlag_EOC+0x1a>
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(const ADC_TypeDef *ADCx)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsActiveFlag_EOS+0x18>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsActiveFlag_EOS+0x1a>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f043 0204 	orr.w	r2, r3, #4
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_EnableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f043 0208 	orr.w	r2, r3, #8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	605a      	str	r2, [r3, #4]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <LL_RCC_SetADCClockSource+0x28>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <LL_RCC_SetADCClockSource+0x28>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000

08001018 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <ADC_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void ADC_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001042:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800104e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 800107e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001082:	f7ff ff9b 	bl	8000fbc <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001086:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800108a:	f7ff ffad 	bl	8000fe8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800108e:	2004      	movs	r0, #4
 8001090:	f7ff ffaa 	bl	8000fe8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC4   ------> ADC1_IN13
  PC5   ------> ADC1_IN14
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001094:	2330      	movs	r3, #48	@ 0x30
 8001096:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001098:	2303      	movs	r3, #3
 800109a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4844      	ldr	r0, [pc, #272]	@ (80011b8 <ADC_Init+0x17c>)
 80010a6:	f002 fc0c 	bl	80038c2 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80010aa:	2130      	movs	r1, #48	@ 0x30
 80010ac:	4842      	ldr	r0, [pc, #264]	@ (80011b8 <ADC_Init+0x17c>)
 80010ae:	f7ff ffb3 	bl	8001018 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80010b2:	2300      	movs	r3, #0
 80010b4:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80010be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c2:	4619      	mov	r1, r3
 80010c4:	483d      	ldr	r0, [pc, #244]	@ (80011bc <ADC_Init+0x180>)
 80010c6:	f002 fa41 	bl	800354c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80010e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4834      	ldr	r0, [pc, #208]	@ (80011bc <ADC_Init+0x180>)
 80010ea:	f002 fa55 	bl	8003598 <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4832      	ldr	r0, [pc, #200]	@ (80011bc <ADC_Init+0x180>)
 80010f2:	f7ff fe9f 	bl	8000e34 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4619      	mov	r1, r3
 8001104:	482e      	ldr	r0, [pc, #184]	@ (80011c0 <ADC_Init+0x184>)
 8001106:	f002 f9d9 	bl	80034bc <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 800110a:	2100      	movs	r1, #0
 800110c:	482c      	ldr	r0, [pc, #176]	@ (80011c0 <ADC_Init+0x184>)
 800110e:	f7ff fe03 	bl	8000d18 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001112:	482a      	ldr	r0, [pc, #168]	@ (80011bc <ADC_Init+0x180>)
 8001114:	f7ff fea3 	bl	8000e5e <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001118:	4828      	ldr	r0, [pc, #160]	@ (80011bc <ADC_Init+0x180>)
 800111a:	f7ff feb2 	bl	8000e82 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <ADC_Init+0x188>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	099b      	lsrs	r3, r3, #6
 8001124:	4a28      	ldr	r2, [pc, #160]	@ (80011c8 <ADC_Init+0x18c>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	099a      	lsrs	r2, r3, #6
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	461a      	mov	r2, r3
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <ADC_Init+0x190>)
 8001138:	fba3 2302 	umull	r2, r3, r3, r2
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001140:	e002      	b.n	8001148 <ADC_Init+0x10c>
  {
    wait_loop_index--;
 8001142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001144:	3b01      	subs	r3, #1
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f9      	bne.n	8001142 <ADC_Init+0x106>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_13);
 800114e:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <ADC_Init+0x194>)
 8001150:	2106      	movs	r1, #6
 8001152:	481a      	ldr	r0, [pc, #104]	@ (80011bc <ADC_Init+0x180>)
 8001154:	f7ff fdf3 	bl	8000d3e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001158:	2200      	movs	r2, #0
 800115a:	491d      	ldr	r1, [pc, #116]	@ (80011d0 <ADC_Init+0x194>)
 800115c:	4817      	ldr	r0, [pc, #92]	@ (80011bc <ADC_Init+0x180>)
 800115e:	f7ff fe1a 	bl	8000d96 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SINGLE_ENDED);
 8001162:	227f      	movs	r2, #127	@ 0x7f
 8001164:	491a      	ldr	r1, [pc, #104]	@ (80011d0 <ADC_Init+0x194>)
 8001166:	4815      	ldr	r0, [pc, #84]	@ (80011bc <ADC_Init+0x180>)
 8001168:	f7ff fe40 	bl	8000dec <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_14);
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <ADC_Init+0x198>)
 800116e:	210c      	movs	r1, #12
 8001170:	4812      	ldr	r0, [pc, #72]	@ (80011bc <ADC_Init+0x180>)
 8001172:	f7ff fde4 	bl	8000d3e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001176:	2200      	movs	r2, #0
 8001178:	4916      	ldr	r1, [pc, #88]	@ (80011d4 <ADC_Init+0x198>)
 800117a:	4810      	ldr	r0, [pc, #64]	@ (80011bc <ADC_Init+0x180>)
 800117c:	f7ff fe0b 	bl	8000d96 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SINGLE_ENDED);
 8001180:	227f      	movs	r2, #127	@ 0x7f
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <ADC_Init+0x198>)
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <ADC_Init+0x180>)
 8001186:	f7ff fe31 	bl	8000dec <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */
  NVIC_SetPriority(ADC1_2_IRQn, 1);
 800118a:	2101      	movs	r1, #1
 800118c:	2012      	movs	r0, #18
 800118e:	f7ff fd99 	bl	8000cc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8001192:	2012      	movs	r0, #18
 8001194:	f7ff fd78 	bl	8000c88 <__NVIC_EnableIRQ>
  LL_ADC_Enable(ADC1);
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <ADC_Init+0x180>)
 800119a:	f7ff fe86 	bl	8000eaa <LL_ADC_Enable>
  LL_ADC_EnableIT_EOC(ADC1);
 800119e:	4807      	ldr	r0, [pc, #28]	@ (80011bc <ADC_Init+0x180>)
 80011a0:	f7ff feeb 	bl	8000f7a <LL_ADC_EnableIT_EOC>
  LL_ADC_EnableIT_EOS(ADC1);
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <ADC_Init+0x180>)
 80011a6:	f7ff fef8 	bl	8000f9a <LL_ADC_EnableIT_EOS>

  LL_ADC_REG_StartConversion(ADC1);
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <ADC_Init+0x180>)
 80011ac:	f7ff fe91 	bl	8000ed2 <LL_ADC_REG_StartConversion>
  /* USER CODE END ADC1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	@ 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	48000800 	.word	0x48000800
 80011bc:	50040000 	.word	0x50040000
 80011c0:	50040300 	.word	0x50040300
 80011c4:	20000024 	.word	0x20000024
 80011c8:	053e2d63 	.word	0x053e2d63
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	36902000 	.word	0x36902000
 80011d4:	3ac04000 	.word	0x3ac04000

080011d8 <read_adc>:
/* USER CODE BEGIN 1 */
volatile uint8_t conv_cnt = 0;
volatile uint32_t *data_buf = 0;
volatile bool adc_conversion_done = 0;

void read_adc(uint32_t *data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	adc_conversion_done = 0;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <read_adc+0x24>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	data_buf = data;
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <read_adc+0x28>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
	LL_ADC_REG_StartConversion(ADC1);
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <read_adc+0x2c>)
 80011ee:	f7ff fe70 	bl	8000ed2 <LL_ADC_REG_StartConversion>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000224 	.word	0x20000224
 8001200:	20000220 	.word	0x20000220
 8001204:	50040000 	.word	0x50040000

08001208 <calculate_rms>:


// Funkcja do obliczenia RMS
float calculate_rms(uint32_t channel) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    uint32_t data[2];
    float sum_squared = 0.0;
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < N; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	e030      	b.n	800127e <calculate_rms+0x76>
        read_adc(data); // Odczytaj próbki do tablicy
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffd9 	bl	80011d8 <read_adc>
        float voltage = (data[channel] / ADC_RESOLUTION) * VREF; // Przeskaluj ADC do napięcia
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	3320      	adds	r3, #32
 800122c:	443b      	add	r3, r7
 800122e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f966 	bl	8000504 <__aeabi_ui2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <calculate_rms+0xc0>)
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	a31d      	add	r3, pc, #116	@ (adr r3, 80012c0 <calculate_rms+0xb8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9d2 	bl	80005f8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fcc4 	bl	8000be8 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	617b      	str	r3, [r7, #20]
        sum_squared += voltage * voltage;
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800126c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < N; i++) {
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3301      	adds	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b63      	cmp	r3, #99	@ 0x63
 8001282:	ddcb      	ble.n	800121c <calculate_rms+0x14>
    }

    return sqrt(sum_squared / N); // Oblicz RMS
 8001284:	edd7 7a07 	vldr	s15, [r7, #28]
 8001288:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80012cc <calculate_rms+0xc4>
 800128c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001290:	ee16 0a90 	vmov	r0, s13
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	ec43 2b10 	vmov	d0, r2, r3
 80012a0:	f005 fb40 	bl	8006924 <sqrt>
 80012a4:	ec53 2b10 	vmov	r2, r3, d0
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc9c 	bl	8000be8 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	ee07 3a90 	vmov	s15, r3
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40a9c800 	.word	0x40a9c800
 80012c8:	40b00000 	.word	0x40b00000
 80012cc:	42c80000 	.word	0x42c80000

080012d0 <decybeloza>:
	output[i] = data[1];
	Delay(10);
	}
}

uint32_t decybeloza (float calculated_rms){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	ed87 0a01 	vstr	s0, [r7, #4]
	// potem wepnij to w jedną funkcję i nie zapomnij bo jesteś za spany
	float reference = 1.1666;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <decybeloza+0x68>)
 80012dc:	60fb      	str	r3, [r7, #12]
    float difference = fabs(calculated_rms - reference); // śmieszna funkcja do różnicy napięć
 80012de:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ea:	eef0 7ae7 	vabs.f32	s15, s15
 80012ee:	edc7 7a02 	vstr	s15, [r7, #8]
    return 20.0 * log10(difference / reference);
 80012f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012fe:	ee16 0a90 	vmov	r0, s13
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	ec43 2b10 	vmov	d0, r2, r3
 800130e:	f005 facb 	bl	80068a8 <log10>
 8001312:	ec51 0b10 	vmov	r0, r1, d0
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <decybeloza+0x6c>)
 800131c:	f7ff f96c 	bl	80005f8 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc3e 	bl	8000ba8 <__aeabi_d2uiz>
 800132c:	4603      	mov	r3, r0

}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	3f955326 	.word	0x3f955326
 800133c:	40340000 	.word	0x40340000

08001340 <adc_to_dB>:

uint32_t adc_to_dB(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  	float rms_voltage = calculate_rms(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ff5e 	bl	8001208 <calculate_rms>
 800134c:	ed87 0a01 	vstr	s0, [r7, #4]
  	uint32_t dB_value = decybeloza(rms_voltage);
 8001350:	ed97 0a01 	vldr	s0, [r7, #4]
 8001354:	f7ff ffbc 	bl	80012d0 <decybeloza>
 8001358:	6038      	str	r0, [r7, #0]

  	return dB_value;
 800135a:	683b      	ldr	r3, [r7, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <adc_conversion_complete_callback>:



void adc_conversion_complete_callback(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	  data_buf[conv_cnt] = CONVERT_ADC_TO_MV(LL_ADC_REG_ReadConversionData12(ADC1));
 8001368:	4810      	ldr	r0, [pc, #64]	@ (80013ac <adc_conversion_complete_callback+0x48>)
 800136a:	f7ff fdc6 	bl	8000efa <LL_ADC_REG_ReadConversionData12>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <adc_conversion_complete_callback+0x4c>)
 800137c:	fb82 1203 	smull	r1, r2, r2, r3
 8001380:	441a      	add	r2, r3
 8001382:	12d2      	asrs	r2, r2, #11
 8001384:	17db      	asrs	r3, r3, #31
 8001386:	1ad1      	subs	r1, r2, r3
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <adc_conversion_complete_callback+0x50>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <adc_conversion_complete_callback+0x54>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	460a      	mov	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

	  conv_cnt++;
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <adc_conversion_complete_callback+0x54>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <adc_conversion_complete_callback+0x54>)
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	50040000 	.word	0x50040000
 80013b0:	80080081 	.word	0x80080081
 80013b4:	20000220 	.word	0x20000220
 80013b8:	2000021c 	.word	0x2000021c

080013bc <adc_sequence_complete_callback>:

void adc_sequence_complete_callback(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	conv_cnt = 0;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <adc_sequence_complete_callback+0x1c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	adc_conversion_done = 1;
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <adc_sequence_complete_callback+0x20>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000021c 	.word	0x2000021c
 80013dc:	20000224 	.word	0x20000224

080013e0 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	if(LL_ADC_IsActiveFlag_EOC(ADC1) != 0)
 80013e4:	480a      	ldr	r0, [pc, #40]	@ (8001410 <ADC1_2_IRQHandler+0x30>)
 80013e6:	f7ff fd95 	bl	8000f14 <LL_ADC_IsActiveFlag_EOC>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <ADC1_2_IRQHandler+0x14>
		{
			adc_conversion_complete_callback();
 80013f0:	f7ff ffb8 	bl	8001364 <adc_conversion_complete_callback>

		}

		if(LL_ADC_IsActiveFlag_EOS(ADC1) != 0)
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <ADC1_2_IRQHandler+0x30>)
 80013f6:	f7ff fda0 	bl	8000f3a <LL_ADC_IsActiveFlag_EOS>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <ADC1_2_IRQHandler+0x2a>
		{
			adc_sequence_complete_callback();
 8001400:	f7ff ffdc 	bl	80013bc <adc_sequence_complete_callback>

			LL_ADC_ClearFlag_EOS(ADC1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <ADC1_2_IRQHandler+0x30>)
 8001406:	f7ff fdab 	bl	8000f60 <LL_ADC_ClearFlag_EOS>
		}
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	50040000 	.word	0x50040000

08001414 <BME280_test>:
static int16_t  dig_T2, dig_T3,
         dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

static int32_t tRaw, pRaw;

uint8_t BME280_test(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t test_data;
	I2C1_reg_read_it(BME280_ADR, BME280_ID, &test_data, sizeof(test_data));
 800141a:	1dfa      	adds	r2, r7, #7
 800141c:	2301      	movs	r3, #1
 800141e:	21d0      	movs	r1, #208	@ 0xd0
 8001420:	20ec      	movs	r0, #236	@ 0xec
 8001422:	f000 fd77 	bl	8001f14 <I2C1_reg_read_it>
	while (!i2c_transfer_complete);
 8001426:	bf00      	nop
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <BME280_test+0x4c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f083 0301 	eor.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f7      	bne.n	8001428 <BME280_test+0x14>
	if (test_data == 0x58 || test_data == 0x57 || test_data == 0x56 || test_data == 0x60){
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b58      	cmp	r3, #88	@ 0x58
 800143c:	d008      	beq.n	8001450 <BME280_test+0x3c>
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b57      	cmp	r3, #87	@ 0x57
 8001442:	d005      	beq.n	8001450 <BME280_test+0x3c>
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b56      	cmp	r3, #86	@ 0x56
 8001448:	d002      	beq.n	8001450 <BME280_test+0x3c>
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b60      	cmp	r3, #96	@ 0x60
 800144e:	d101      	bne.n	8001454 <BME280_test+0x40>
		return test_data;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	e000      	b.n	8001456 <BME280_test+0x42>
	}else{
		return 1;
 8001454:	2301      	movs	r3, #1
	}
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000025c 	.word	0x2000025c

08001464 <BME280_trim_param_read>:

void BME280_trim_param_read(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
	uint8_t trimdata[24];
	for (int i = 0; i < sizeof(trimdata); i++){
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e016      	b.n	800149e <BME280_trim_param_read+0x3a>
		I2C1_reg_read_it(BME280_ADR, BME280_TRIM_PARAM_REG_START+i, &trimdata[i], sizeof(trimdata[i]));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	b29b      	uxth	r3, r3
 8001474:	3388      	adds	r3, #136	@ 0x88
 8001476:	b299      	uxth	r1, r3
 8001478:	1d3a      	adds	r2, r7, #4
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	441a      	add	r2, r3
 800147e:	2301      	movs	r3, #1
 8001480:	20ec      	movs	r0, #236	@ 0xec
 8001482:	f000 fd47 	bl	8001f14 <I2C1_reg_read_it>
		while (!i2c_transfer_complete);
 8001486:	bf00      	nop
 8001488:	4b3f      	ldr	r3, [pc, #252]	@ (8001588 <BME280_trim_param_read+0x124>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f083 0301 	eor.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f7      	bne.n	8001488 <BME280_trim_param_read+0x24>
	for (int i = 0; i < sizeof(trimdata); i++){
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b17      	cmp	r3, #23
 80014a2:	d9e5      	bls.n	8001470 <BME280_trim_param_read+0xc>
	}
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b35      	ldr	r3, [pc, #212]	@ (800158c <BME280_trim_param_read+0x128>)
 80014b6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <BME280_trim_param_read+0x12c>)
 80014c8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80014ca:	7a7b      	ldrb	r3, [r7, #9]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7a3b      	ldrb	r3, [r7, #8]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <BME280_trim_param_read+0x130>)
 80014da:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	7a7b      	ldrb	r3, [r7, #9]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <BME280_trim_param_read+0x134>)
 80014ee:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7abb      	ldrb	r3, [r7, #10]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b27      	ldr	r3, [pc, #156]	@ (800159c <BME280_trim_param_read+0x138>)
 8001500:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <BME280_trim_param_read+0x13c>)
 8001512:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001514:	7c7b      	ldrb	r3, [r7, #17]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <BME280_trim_param_read+0x140>)
 8001524:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001526:	7cfb      	ldrb	r3, [r7, #19]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7cbb      	ldrb	r3, [r7, #18]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <BME280_trim_param_read+0x144>)
 8001536:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001538:	7d7b      	ldrb	r3, [r7, #21]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7d3b      	ldrb	r3, [r7, #20]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <BME280_trim_param_read+0x148>)
 8001548:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <BME280_trim_param_read+0x14c>)
 800155a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800155c:	7e7b      	ldrb	r3, [r7, #25]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7e3b      	ldrb	r3, [r7, #24]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <BME280_trim_param_read+0x150>)
 800156c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800156e:	7efb      	ldrb	r3, [r7, #27]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7ebb      	ldrb	r3, [r7, #26]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <BME280_trim_param_read+0x154>)
 800157e:	801a      	strh	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000025c 	.word	0x2000025c
 800158c:	20000226 	.word	0x20000226
 8001590:	2000022a 	.word	0x2000022a
 8001594:	2000022c 	.word	0x2000022c
 8001598:	20000228 	.word	0x20000228
 800159c:	2000022e 	.word	0x2000022e
 80015a0:	20000230 	.word	0x20000230
 80015a4:	20000232 	.word	0x20000232
 80015a8:	20000234 	.word	0x20000234
 80015ac:	20000236 	.word	0x20000236
 80015b0:	20000238 	.word	0x20000238
 80015b4:	2000023a 	.word	0x2000023a
 80015b8:	2000023c 	.word	0x2000023c

080015bc <BME280_init>:

void BME280_init(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint8_t commands[] = {
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <BME280_init+0x5c>)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	4611      	mov	r1, r2
 80015ca:	8019      	strh	r1, [r3, #0]
 80015cc:	3302      	adds	r3, #2
 80015ce:	0c12      	lsrs	r2, r2, #16
 80015d0:	701a      	strb	r2, [r3, #0]
			BME280_RESET_COMMAND,
			BME280_CONFIG_REG_PARAM,
			BME280_CTRL_MEAS_REG_PARAM,
	};
	if(BME280_test() != 1){
 80015d2:	f7ff ff1f 	bl	8001414 <BME280_test>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d018      	beq.n	800160e <BME280_init+0x52>
		BME280_trim_param_read();
 80015dc:	f7ff ff42 	bl	8001464 <BME280_trim_param_read>
		I2C1_reg_write_it(BME280_ADR, BME280_RESET, &commands[0], sizeof(commands[0]));
 80015e0:	1d3a      	adds	r2, r7, #4
 80015e2:	2301      	movs	r3, #1
 80015e4:	21e0      	movs	r1, #224	@ 0xe0
 80015e6:	20ec      	movs	r0, #236	@ 0xec
 80015e8:	f000 fc52 	bl	8001e90 <I2C1_reg_write_it>
		LL_mDelay(100); //delay for reset just in case, might not be required
 80015ec:	2064      	movs	r0, #100	@ 0x64
 80015ee:	f002 fadd 	bl	8003bac <LL_mDelay>
		I2C1_reg_write_it(BME280_ADR, BME280_CONFIG_REG, &commands[1], sizeof(commands[1]));
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	2301      	movs	r3, #1
 80015f8:	21f5      	movs	r1, #245	@ 0xf5
 80015fa:	20ec      	movs	r0, #236	@ 0xec
 80015fc:	f000 fc48 	bl	8001e90 <I2C1_reg_write_it>
		I2C1_reg_write_it(BME280_ADR, BME280_CTRL_MEAS_REG, &commands[2], sizeof(commands[2]));
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	1c9a      	adds	r2, r3, #2
 8001604:	2301      	movs	r3, #1
 8001606:	21f4      	movs	r1, #244	@ 0xf4
 8001608:	20ec      	movs	r0, #236	@ 0xec
 800160a:	f000 fc41 	bl	8001e90 <I2C1_reg_write_it>
	}
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08006fe8 	.word	0x08006fe8

0800161c <BME280_wakeup>:

void BME280_wakeup(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
	uint8_t reg_data;
	I2C1_reg_read_it(BME280_ADR, BME280_CTRL_MEAS_REG, &reg_data, sizeof(reg_data));
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	2301      	movs	r3, #1
 8001626:	21f4      	movs	r1, #244	@ 0xf4
 8001628:	20ec      	movs	r0, #236	@ 0xec
 800162a:	f000 fc73 	bl	8001f14 <I2C1_reg_read_it>
	while (!i2c_transfer_complete);
 800162e:	bf00      	nop
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <BME280_wakeup+0x48>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f7      	bne.n	8001630 <BME280_wakeup+0x14>
	reg_data = reg_data | 0x01;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	71fb      	strb	r3, [r7, #7]
	I2C1_reg_write_it(BME280_ADR, BME280_CTRL_MEAS_REG, &reg_data, sizeof(reg_data));
 800164a:	1dfa      	adds	r2, r7, #7
 800164c:	2301      	movs	r3, #1
 800164e:	21f4      	movs	r1, #244	@ 0xf4
 8001650:	20ec      	movs	r0, #236	@ 0xec
 8001652:	f000 fc1d 	bl	8001e90 <I2C1_reg_write_it>
	LL_mDelay(10); // delay required for sensor to measure temp. and pressure
 8001656:	200a      	movs	r0, #10
 8001658:	f002 faa8 	bl	8003bac <LL_mDelay>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000025c 	.word	0x2000025c

08001668 <BME280_read_raw>:

void BME280_read_raw(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
	uint8_t RawData[6];
	BME280_wakeup();
 800166e:	f7ff ffd5 	bl	800161c <BME280_wakeup>
	for(int i = 0; i < sizeof(RawData); i++){
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e016      	b.n	80016a6 <BME280_read_raw+0x3e>
		I2C1_reg_read_it(BME280_ADR, BME280_RAW_REG_START+i, &RawData[i], sizeof(RawData[i]));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	b29b      	uxth	r3, r3
 800167c:	33f7      	adds	r3, #247	@ 0xf7
 800167e:	b299      	uxth	r1, r3
 8001680:	1d3a      	adds	r2, r7, #4
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	441a      	add	r2, r3
 8001686:	2301      	movs	r3, #1
 8001688:	20ec      	movs	r0, #236	@ 0xec
 800168a:	f000 fc43 	bl	8001f14 <I2C1_reg_read_it>
		while (!i2c_transfer_complete);
 800168e:	bf00      	nop
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <BME280_read_raw+0x78>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f7      	bne.n	8001690 <BME280_read_raw+0x28>
	for(int i = 0; i < sizeof(RawData); i++){
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d9e5      	bls.n	8001678 <BME280_read_raw+0x10>
	}
	pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80016ac:	793b      	ldrb	r3, [r7, #4]
 80016ae:	031a      	lsls	r2, r3, #12
 80016b0:	797b      	ldrb	r3, [r7, #5]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4313      	orrs	r3, r2
 80016b6:	79ba      	ldrb	r2, [r7, #6]
 80016b8:	0912      	lsrs	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	4313      	orrs	r3, r2
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <BME280_read_raw+0x7c>)
 80016c0:	6013      	str	r3, [r2, #0]
	tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	031a      	lsls	r2, r3, #12
 80016c6:	7a3b      	ldrb	r3, [r7, #8]
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4313      	orrs	r3, r2
 80016cc:	7a7a      	ldrb	r2, [r7, #9]
 80016ce:	0912      	lsrs	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	4313      	orrs	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <BME280_read_raw+0x80>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000025c 	.word	0x2000025c
 80016e4:	20000244 	.word	0x20000244
 80016e8:	20000240 	.word	0x20000240

080016ec <BME280_compensate_T_int32>:

int32_t t_fine;
// Function from page 23 of BME280 datasheet
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	10da      	asrs	r2, r3, #3
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <BME280_compensate_T_int32+0x74>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a18      	ldr	r2, [pc, #96]	@ (8001764 <BME280_compensate_T_int32+0x78>)
 8001702:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	12db      	asrs	r3, r3, #11
 800170c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	111b      	asrs	r3, r3, #4
 8001712:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <BME280_compensate_T_int32+0x74>)
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	1112      	asrs	r2, r2, #4
 800171c:	4910      	ldr	r1, [pc, #64]	@ (8001760 <BME280_compensate_T_int32+0x74>)
 800171e:	8809      	ldrh	r1, [r1, #0]
 8001720:	1a52      	subs	r2, r2, r1
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	131b      	asrs	r3, r3, #12
 8001728:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <BME280_compensate_T_int32+0x7c>)
 800172a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	139b      	asrs	r3, r3, #14
 8001734:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4413      	add	r3, r2
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <BME280_compensate_T_int32+0x80>)
 800173e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <BME280_compensate_T_int32+0x80>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3380      	adds	r3, #128	@ 0x80
 800174c:	121b      	asrs	r3, r3, #8
 800174e:	60fb      	str	r3, [r7, #12]
	return T;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	4618      	mov	r0, r3
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000226 	.word	0x20000226
 8001764:	2000022a 	.word	0x2000022a
 8001768:	2000022c 	.word	0x2000022c
 800176c:	20000248 	.word	0x20000248

08001770 <BME280_compensate_P_uint32>:

// Function from page 23 of BME280 datasheet (modified a bit)
uint32_t BME280_compensate_P_uint32(int32_t adc_P)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
		uint32_t p;
		var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8001778:	4b4a      	ldr	r3, [pc, #296]	@ (80018a4 <BME280_compensate_P_uint32+0x134>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	105b      	asrs	r3, r3, #1
 800177e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001782:	613b      	str	r3, [r7, #16]
		var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	109b      	asrs	r3, r3, #2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	1092      	asrs	r2, r2, #2
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	12db      	asrs	r3, r3, #11
 8001792:	4a45      	ldr	r2, [pc, #276]	@ (80018a8 <BME280_compensate_P_uint32+0x138>)
 8001794:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	60fb      	str	r3, [r7, #12]
		var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 800179e:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <BME280_compensate_P_uint32+0x13c>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	461a      	mov	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
		var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	109a      	asrs	r2, r3, #2
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <BME280_compensate_P_uint32+0x140>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
		var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 80017c4:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <BME280_compensate_P_uint32+0x144>)
 80017c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ca:	4619      	mov	r1, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	109b      	asrs	r3, r3, #2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	1092      	asrs	r2, r2, #2
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	135b      	asrs	r3, r3, #13
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	10da      	asrs	r2, r3, #3
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <BME280_compensate_P_uint32+0x148>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	4619      	mov	r1, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	105b      	asrs	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	149b      	asrs	r3, r3, #18
 80017f4:	613b      	str	r3, [r7, #16]
		var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80017fc:	4a2f      	ldr	r2, [pc, #188]	@ (80018bc <BME280_compensate_P_uint32+0x14c>)
 80017fe:	8812      	ldrh	r2, [r2, #0]
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	13db      	asrs	r3, r3, #15
 8001806:	613b      	str	r3, [r7, #16]
		if (var1 == 0)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <BME280_compensate_P_uint32+0xa2>
		{
			return 0; // avoid exception caused by division by zero
 800180e:	2300      	movs	r3, #0
 8001810:	e041      	b.n	8001896 <BME280_compensate_P_uint32+0x126>
		}
		p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	131b      	asrs	r3, r3, #12
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	4a28      	ldr	r2, [pc, #160]	@ (80018c0 <BME280_compensate_P_uint32+0x150>)
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8001826:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 800182a:	617b      	str	r3, [r7, #20]
		if (p < 0x80000000)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db06      	blt.n	8001840 <BME280_compensate_P_uint32+0xd0>
		{
			p = (p << 1) / ((uint32_t)var1);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005a      	lsls	r2, r3, #1
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e005      	b.n	800184c <BME280_compensate_P_uint32+0xdc>
		}
		else
		{
			p = (p / (uint32_t)var1) * 2;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	617b      	str	r3, [r7, #20]
		}
		var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <BME280_compensate_P_uint32+0x154>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	4619      	mov	r1, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	08d2      	lsrs	r2, r2, #3
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	0b5b      	lsrs	r3, r3, #13
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	131b      	asrs	r3, r3, #12
 8001868:	613b      	str	r3, [r7, #16]
		var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	461a      	mov	r2, r3
 8001870:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <BME280_compensate_P_uint32+0x158>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	135b      	asrs	r3, r3, #13
 800187c:	60fb      	str	r3, [r7, #12]
		p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <BME280_compensate_P_uint32+0x15c>)
 8001886:	f9b2 2000 	ldrsh.w	r2, [r2]
 800188a:	4413      	add	r3, r2
 800188c:	111a      	asrs	r2, r3, #4
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
		return p;
 8001894:	697b      	ldr	r3, [r7, #20]
}
 8001896:	4618      	mov	r0, r3
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000248 	.word	0x20000248
 80018a8:	20000236 	.word	0x20000236
 80018ac:	20000234 	.word	0x20000234
 80018b0:	20000232 	.word	0x20000232
 80018b4:	20000230 	.word	0x20000230
 80018b8:	2000022e 	.word	0x2000022e
 80018bc:	20000228 	.word	0x20000228
 80018c0:	fffff3cb 	.word	0xfffff3cb
 80018c4:	2000023c 	.word	0x2000023c
 80018c8:	2000023a 	.word	0x2000023a
 80018cc:	20000238 	.word	0x20000238

080018d0 <BME280_read_temp>:

float BME280_read_temp(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	BME280_read_raw();
 80018d4:	f7ff fec8 	bl	8001668 <BME280_read_raw>
	return (float)BME280_compensate_T_int32(tRaw)/100;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <BME280_read_temp+0x2c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff05 	bl	80016ec <BME280_compensate_T_int32>
 80018e2:	ee07 0a90 	vmov	s15, r0
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001900 <BME280_read_temp+0x30>
 80018ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000240 	.word	0x20000240
 8001900:	42c80000 	.word	0x42c80000

08001904 <BME280_read_pressure>:

uint32_t BME280_read_pressure(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	BME280_read_raw();
 8001908:	f7ff feae 	bl	8001668 <BME280_read_raw>
	return BME280_compensate_P_uint32(pRaw);
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <BME280_read_pressure+0x18>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff2d 	bl	8001770 <BME280_compensate_P_uint32>
 8001916:	4603      	mov	r3, r0
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000244 	.word	0x20000244

08001920 <LL_AHB2_GRP1_EnableClock>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800192a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800192c:	4907      	ldr	r1, [pc, #28]	@ (800194c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff ffe3 	bl	8001920 <LL_AHB2_GRP1_EnableClock>

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <__NVIC_EnableIRQ>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a44:	f023 0306 	bic.w	r3, r3, #6
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_I2C_EnableIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_EnableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_I2C_DisableIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_DisableIT_TX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 0202 	bic.w	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_I2C_IsEnabledIT_TX>:
  * @rmtoll CR1          TXIE          LL_I2C_IsEnabledIT_TX
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_TXIE) == (I2C_CR1_TXIE)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d101      	bne.n	8001ad8 <LL_I2C_IsEnabledIT_TX+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_I2C_IsEnabledIT_TX+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f043 0204 	orr.w	r2, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0204 	bic.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_I2C_IsEnabledIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_IsEnabledIT_RX
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_RX(I2C_TypeDef *I2Cx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_RXIE) == (I2C_CR1_RXIE)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d101      	bne.n	8001b3e <LL_I2C_IsEnabledIT_RX+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_I2C_IsEnabledIT_RX+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_I2C_EnableIT_STOP>:
  * @rmtoll CR1          STOPIE        LL_I2C_EnableIT_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_STOP(I2C_TypeDef *I2Cx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_I2C_DisableIT_STOP>:
  * @rmtoll CR1          STOPIE        LL_I2C_DisableIT_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_STOP(I2C_TypeDef *I2Cx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0220 	bic.w	r2, r3, #32
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_I2C_IsEnabledIT_STOP>:
  * @rmtoll CR1          STOPIE        LL_I2C_IsEnabledIT_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsEnabledIT_STOP(I2C_TypeDef *I2Cx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->CR1, I2C_CR1_STOPIE) == (I2C_CR1_STOPIE)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d101      	bne.n	8001ba4 <LL_I2C_IsEnabledIT_STOP+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_I2C_IsEnabledIT_STOP+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d101      	bne.n	8001bca <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d101      	bne.n	8001bf0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d101      	bne.n	8001c16 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c34:	2b40      	cmp	r3, #64	@ 0x40
 8001c36:	d101      	bne.n	8001c3c <LL_I2C_IsActiveFlag_TC+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_I2C_IsActiveFlag_TC+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f043 0220 	orr.w	r2, r3, #32
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	61da      	str	r2, [r3, #28]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	605a      	str	r2, [r3, #4]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	0d5b      	lsrs	r3, r3, #21
 8001ca2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <LL_I2C_HandleTransfer+0x48>)
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	43db      	mvns	r3, r3
 8001cac:	401a      	ands	r2, r3
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4319      	orrs	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	4319      	orrs	r1, r3
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4319      	orrs	r1, r3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	03ff7bff 	.word	0x03ff7bff

08001cd8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	b2db      	uxtb	r3, r3
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_SetI2CClockSource>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0e1a      	lsrs	r2, r3, #24
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <LL_RCC_SetI2CClockSource+0x4c>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2103      	movs	r1, #3
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b2d9      	uxtb	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021088 	.word	0x40021088

08001d60 <LL_AHB2_GRP1_EnableClock>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d6c:	4907      	ldr	r1, [pc, #28]	@ (8001d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000

08001d90 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d9c:	4907      	ldr	r1, [pc, #28]	@ (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001da6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <MX_I2C1_Init>:
volatile bool i2c_transfer_complete = false;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	@ 0x38
 8001dc4:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]

	  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001dea:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001dee:	f7ff ff8f 	bl	8001d10 <LL_RCC_SetI2CClockSource>

	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001df2:	2002      	movs	r0, #2
 8001df4:	f7ff ffb4 	bl	8001d60 <LL_AHB2_GRP1_EnableClock>
	  /**I2C1 GPIO Configuration
	  PB8   ------> I2C1_SCL
	  PB9   ------> I2C1_SDA
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001df8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dfc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e06:	2301      	movs	r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	481b      	ldr	r0, [pc, #108]	@ (8001e84 <MX_I2C1_Init+0xc4>)
 8001e18:	f001 fd53 	bl	80038c2 <LL_GPIO_Init>

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001e1c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e20:	f7ff ffb6 	bl	8001d90 <LL_APB1_GRP1_EnableClock>

	  /* USER CODE BEGIN I2C1_Init 1 */
		NVIC_SetPriority(I2C1_EV_IRQn, 0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	201f      	movs	r0, #31
 8001e28:	f7ff fdb8 	bl	800199c <__NVIC_SetPriority>
		NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e2c:	201f      	movs	r0, #31
 8001e2e:	f7ff fd97 	bl	8001960 <__NVIC_EnableIRQ>
	  /* USER CODE END I2C1_Init 1 */

	  /** I2C Initialization
	  */
	  LL_I2C_EnableAutoEndMode(I2C1);
 8001e32:	4815      	ldr	r0, [pc, #84]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e34:	f7ff ff19 	bl	8001c6a <LL_I2C_EnableAutoEndMode>
	  LL_I2C_DisableOwnAddress2(I2C1);
 8001e38:	4813      	ldr	r0, [pc, #76]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e3a:	f7ff fe11 	bl	8001a60 <LL_I2C_DisableOwnAddress2>
	  LL_I2C_DisableGeneralCall(I2C1);
 8001e3e:	4812      	ldr	r0, [pc, #72]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e40:	f7ff fde6 	bl	8001a10 <LL_I2C_DisableGeneralCall>
	  LL_I2C_EnableClockStretching(I2C1);
 8001e44:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e46:	f7ff fdd3 	bl	80019f0 <LL_I2C_EnableClockStretching>
	  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
	  I2C_InitStruct.Timing = 0x00303D5B;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_I2C1_Init+0xcc>)
 8001e50:	623b      	str	r3, [r7, #32]
	  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
	  I2C_InitStruct.DigitalFilter = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
	  I2C_InitStruct.OwnAddress1 = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
	  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e6e:	f001 fe39 	bl	8003ae4 <LL_I2C_Init>
	  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <MX_I2C1_Init+0xc8>)
 8001e78:	f7ff fdda 	bl	8001a30 <LL_I2C_SetOwnAddress2>
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	@ 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	48000400 	.word	0x48000400
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	00303d5b 	.word	0x00303d5b

08001e90 <I2C1_reg_write_it>:

/* USER CODE BEGIN 1 */
int32_t I2C1_reg_write_it(uint16_t slave_addr, uint16_t reg_addr, uint8_t *data_ptr, uint16_t size)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60ba      	str	r2, [r7, #8]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	81fb      	strh	r3, [r7, #14]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	81bb      	strh	r3, [r7, #12]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
	tx_buffer.data_ptr = data_ptr;
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <I2C1_reg_write_it+0x74>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	6013      	str	r3, [r2, #0]
	tx_buffer.count = size;
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <I2C1_reg_write_it+0x74>)
 8001eb0:	6053      	str	r3, [r2, #4]

	i2c_transfer_complete = false;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <I2C1_reg_write_it+0x78>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)(size+1), LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001eb8:	89f9      	ldrh	r1, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <I2C1_reg_write_it+0x7c>)
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4810      	ldr	r0, [pc, #64]	@ (8001f10 <I2C1_reg_write_it+0x80>)
 8001ed0:	f7ff fedc 	bl	8001c8c <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(I2C1) == 0)
 8001ed4:	bf00      	nop
 8001ed6:	480e      	ldr	r0, [pc, #56]	@ (8001f10 <I2C1_reg_write_it+0x80>)
 8001ed8:	f7ff fe6b 	bl	8001bb2 <LL_I2C_IsActiveFlag_TXIS>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f9      	beq.n	8001ed6 <I2C1_reg_write_it+0x46>
		;

	LL_I2C_TransmitData8(I2C1, reg_addr);
 8001ee2:	89bb      	ldrh	r3, [r7, #12]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <I2C1_reg_write_it+0x80>)
 8001eea:	f7ff ff02 	bl	8001cf2 <LL_I2C_TransmitData8>

	LL_I2C_EnableIT_TX(I2C1);
 8001eee:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <I2C1_reg_write_it+0x80>)
 8001ef0:	f7ff fdc6 	bl	8001a80 <LL_I2C_EnableIT_TX>
	LL_I2C_EnableIT_STOP(I2C1);
 8001ef4:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <I2C1_reg_write_it+0x80>)
 8001ef6:	f7ff fe29 	bl	8001b4c <LL_I2C_EnableIT_STOP>

	return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000254 	.word	0x20000254
 8001f08:	2000025c 	.word	0x2000025c
 8001f0c:	80002000 	.word	0x80002000
 8001f10:	40005400 	.word	0x40005400

08001f14 <I2C1_reg_read_it>:


int32_t I2C1_reg_read_it(uint16_t slave_addr, uint16_t reg_addr, uint8_t *data_ptr, uint16_t size)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	81fb      	strh	r3, [r7, #14]
 8001f22:	460b      	mov	r3, r1
 8001f24:	81bb      	strh	r3, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
	rx_buffer.data_ptr = data_ptr;
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa4 <I2C1_reg_read_it+0x90>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6013      	str	r3, [r2, #0]
	rx_buffer.count = size;
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <I2C1_reg_read_it+0x90>)
 8001f34:	6053      	str	r3, [r2, #4]

	i2c_transfer_complete = false;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <I2C1_reg_read_it+0x94>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);
 8001f3c:	89f9      	ldrh	r1, [r7, #14]
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <I2C1_reg_read_it+0x98>)
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4819      	ldr	r0, [pc, #100]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f4c:	f7ff fe9e 	bl	8001c8c <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_TXIS(I2C1) == 0)
 8001f50:	bf00      	nop
 8001f52:	4817      	ldr	r0, [pc, #92]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f54:	f7ff fe2d 	bl	8001bb2 <LL_I2C_IsActiveFlag_TXIS>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f9      	beq.n	8001f52 <I2C1_reg_read_it+0x3e>
		;

	LL_I2C_TransmitData8(I2C1, reg_addr);
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	4812      	ldr	r0, [pc, #72]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f66:	f7ff fec4 	bl	8001cf2 <LL_I2C_TransmitData8>

	while(LL_I2C_IsActiveFlag_TC(I2C1) == 0)
 8001f6a:	bf00      	nop
 8001f6c:	4810      	ldr	r0, [pc, #64]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f6e:	f7ff fe59 	bl	8001c24 <LL_I2C_IsActiveFlag_TC>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f9      	beq.n	8001f6c <I2C1_reg_read_it+0x58>
		;

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, (uint32_t)size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001f78:	89f9      	ldrh	r1, [r7, #14]
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <I2C1_reg_read_it+0xa0>)
 8001f7e:	9201      	str	r2, [sp, #4]
 8001f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	4809      	ldr	r0, [pc, #36]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f8a:	f7ff fe7f 	bl	8001c8c <LL_I2C_HandleTransfer>

	LL_I2C_EnableIT_RX(I2C1);
 8001f8e:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f90:	f7ff fda9 	bl	8001ae6 <LL_I2C_EnableIT_RX>
	LL_I2C_EnableIT_STOP(I2C1);
 8001f94:	4806      	ldr	r0, [pc, #24]	@ (8001fb0 <I2C1_reg_read_it+0x9c>)
 8001f96:	f7ff fdd9 	bl	8001b4c <LL_I2C_EnableIT_STOP>

	return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000024c 	.word	0x2000024c
 8001fa8:	2000025c 	.word	0x2000025c
 8001fac:	80002000 	.word	0x80002000
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	80002400 	.word	0x80002400

08001fb8 <I2C1_it_transmit_callback>:

void I2C1_it_transmit_callback(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <I2C1_it_transmit_callback+0x2e>
	{
		LL_I2C_TransmitData8(I2C1, *tx_buffer.data_ptr);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <I2C1_it_transmit_callback+0x44>)
 8001fce:	f7ff fe90 	bl	8001cf2 <LL_I2C_TransmitData8>

		tx_buffer.data_ptr++;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fda:	6013      	str	r3, [r2, #0]
		tx_buffer.count--;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fe4:	6053      	str	r3, [r2, #4]
	}

	if(tx_buffer.count <= 0)
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <I2C1_it_transmit_callback+0x40>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <I2C1_it_transmit_callback+0x3c>
	{
		LL_I2C_DisableIT_TX(I2C1);
 8001fee:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <I2C1_it_transmit_callback+0x44>)
 8001ff0:	f7ff fd56 	bl	8001aa0 <LL_I2C_DisableIT_TX>
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000254 	.word	0x20000254
 8001ffc:	40005400 	.word	0x40005400

08002000 <I2C1_it_receive_callback>:

void I2C1_it_receive_callback(void)
{
 8002000:	b598      	push	{r3, r4, r7, lr}
 8002002:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <I2C1_it_receive_callback+0x2e>
	{
		*rx_buffer.data_ptr = LL_I2C_ReceiveData8(I2C1);
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <I2C1_it_receive_callback+0x44>)
 8002012:	f7ff fe61 	bl	8001cd8 <LL_I2C_ReceiveData8>
 8002016:	4603      	mov	r3, r0
 8002018:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 8002022:	6013      	str	r3, [r2, #0]
		rx_buffer.count--;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 800202c:	6053      	str	r3, [r2, #4]
	}

	if(rx_buffer.count <= 0)
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <I2C1_it_receive_callback+0x40>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <I2C1_it_receive_callback+0x3c>
	{
		LL_I2C_DisableIT_RX(I2C1);
 8002036:	4803      	ldr	r0, [pc, #12]	@ (8002044 <I2C1_it_receive_callback+0x44>)
 8002038:	f7ff fd65 	bl	8001b06 <LL_I2C_DisableIT_RX>
	}
}
 800203c:	bf00      	nop
 800203e:	bd98      	pop	{r3, r4, r7, pc}
 8002040:	2000024c 	.word	0x2000024c
 8002044:	40005400 	.word	0x40005400

08002048 <I2C1_EV_IRQHandler>:
{
	rx_buffer.data_ptr = data_ptr;
	rx_buffer.count = size;
}
void I2C1_EV_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_TXIS(I2C1) && LL_I2C_IsEnabledIT_TX(I2C1))
 800204c:	481a      	ldr	r0, [pc, #104]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 800204e:	f7ff fdb0 	bl	8001bb2 <LL_I2C_IsActiveFlag_TXIS>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <I2C1_EV_IRQHandler+0x22>
 8002058:	4817      	ldr	r0, [pc, #92]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 800205a:	f7ff fd31 	bl	8001ac0 <LL_I2C_IsEnabledIT_TX>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <I2C1_EV_IRQHandler+0x22>
	{
		I2C1_it_transmit_callback();
 8002064:	f7ff ffa8 	bl	8001fb8 <I2C1_it_transmit_callback>
 8002068:	e024      	b.n	80020b4 <I2C1_EV_IRQHandler+0x6c>
	}
	else if(LL_I2C_IsActiveFlag_RXNE(I2C1) && LL_I2C_IsEnabledIT_RX(I2C1))
 800206a:	4813      	ldr	r0, [pc, #76]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 800206c:	f7ff fdb4 	bl	8001bd8 <LL_I2C_IsActiveFlag_RXNE>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <I2C1_EV_IRQHandler+0x40>
 8002076:	4810      	ldr	r0, [pc, #64]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 8002078:	f7ff fd55 	bl	8001b26 <LL_I2C_IsEnabledIT_RX>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <I2C1_EV_IRQHandler+0x40>
	{
		I2C1_it_receive_callback();
 8002082:	f7ff ffbd 	bl	8002000 <I2C1_it_receive_callback>
 8002086:	e015      	b.n	80020b4 <I2C1_EV_IRQHandler+0x6c>
	}
	else if(LL_I2C_IsActiveFlag_STOP(I2C1) && LL_I2C_IsEnabledIT_STOP(I2C1))
 8002088:	480b      	ldr	r0, [pc, #44]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 800208a:	f7ff fdb8 	bl	8001bfe <LL_I2C_IsActiveFlag_STOP>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <I2C1_EV_IRQHandler+0x6c>
 8002094:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 8002096:	f7ff fd79 	bl	8001b8c <LL_I2C_IsEnabledIT_STOP>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <I2C1_EV_IRQHandler+0x6c>
	{
		LL_I2C_ClearFlag_STOP(I2C1);
 80020a0:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 80020a2:	f7ff fdd2 	bl	8001c4a <LL_I2C_ClearFlag_STOP>
		LL_I2C_DisableIT_STOP(I2C1);
 80020a6:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <I2C1_EV_IRQHandler+0x70>)
 80020a8:	f7ff fd60 	bl	8001b6c <LL_I2C_DisableIT_STOP>

		i2c_transfer_complete = true;
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <I2C1_EV_IRQHandler+0x74>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
	}
}
 80020b2:	e7ff      	b.n	80020b4 <I2C1_EV_IRQHandler+0x6c>
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005400 	.word	0x40005400
 80020bc:	2000025c 	.word	0x2000025c

080020c0 <__NVIC_SetPriorityGrouping>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_SetPriority>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	@ (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f7ff ff8e 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <LL_RCC_MSI_Enable>:
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <LL_RCC_MSI_Enable+0x1c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <LL_RCC_MSI_Enable+0x1c>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_MSI_IsReady>:
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <LL_RCC_MSI_IsReady+0x20>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d101      	bne.n	8002258 <LL_RCC_MSI_IsReady+0x14>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_RCC_MSI_IsReady+0x16>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000

08002268 <LL_RCC_MSI_EnableRangeSelection>:
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <LL_RCC_MSI_SetRange>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <LL_RCC_MSI_SetRange+0x24>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002298:	4904      	ldr	r1, [pc, #16]	@ (80022ac <LL_RCC_MSI_SetRange+0x24>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000

080022b0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4904      	ldr	r1, [pc, #16]	@ (80022d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <LL_RCC_SetSysClkSource>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <LL_RCC_SetSysClkSource+0x24>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 0203 	bic.w	r2, r3, #3
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <LL_RCC_SetSysClkSource+0x24>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_GetSysClkSource>:
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <LL_RCC_GetSysClkSource+0x18>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <LL_RCC_SetAHBPrescaler>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <LL_RCC_SetAHBPrescaler+0x24>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002330:	4904      	ldr	r1, [pc, #16]	@ (8002344 <LL_RCC_SetAHBPrescaler+0x24>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000

08002348 <LL_RCC_SetAPB1Prescaler>:
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <LL_RCC_SetAPB1Prescaler+0x24>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000

08002370 <LL_RCC_SetAPB2Prescaler>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <LL_RCC_SetAPB2Prescaler+0x24>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002380:	4904      	ldr	r1, [pc, #16]	@ (8002394 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40021000 	.word	0x40021000

08002398 <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <LL_RCC_PLLSAI1_Enable+0x1c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <LL_RCC_PLLSAI1_Enable+0x1c>)
 80023a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80023bc:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <LL_RCC_PLLSAI1_IsReady+0x24>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c8:	d101      	bne.n	80023ce <LL_RCC_PLLSAI1_IsReady+0x16>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_RCC_PLLSAI1_IsReady+0x18>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000

080023e0 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023f6:	68f9      	ldr	r1, [r7, #12]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	430b      	orrs	r3, r1
 80023fc:	490a      	ldr	r1, [pc, #40]	@ (8002428 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800240a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	0211      	lsls	r1, r2, #8
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	4904      	ldr	r1, [pc, #16]	@ (8002428 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8002418:	4313      	orrs	r3, r2
 800241a:	610b      	str	r3, [r1, #16]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40021000 	.word	0x40021000

0800242c <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243a:	6113      	str	r3, [r2, #16]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <LL_APB1_GRP1_EnableClock>:
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002456:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <LL_APB1_GRP1_EnableClock+0x2c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002462:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000

0800247c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002486:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4313      	orrs	r3, r2
 800248e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002492:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000

080024ac <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <LL_FLASH_SetLatency+0x24>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0207 	bic.w	r2, r3, #7
 80024bc:	4904      	ldr	r1, [pc, #16]	@ (80024d0 <LL_FLASH_SetLatency+0x24>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40022000 	.word	0x40022000

080024d4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <LL_FLASH_GetLatency+0x18>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000

080024f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002500:	4904      	ldr	r1, [pc, #16]	@ (8002514 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40007000 	.word	0x40007000

08002518 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002528:	d101      	bne.n	800252e <LL_PWR_IsActiveFlag_VOS+0x16>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_PWR_IsActiveFlag_VOS+0x18>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000

08002540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
int main(void)
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ff95 	bl	800247c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002552:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002556:	f7ff ff79 	bl	800244c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255a:	2003      	movs	r0, #3
 800255c:	f7ff fdb0 	bl	80020c0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002560:	f7ff fdd2 	bl	8002108 <__NVIC_GetPriorityGrouping>
 8002564:	4603      	mov	r3, r0
 8002566:	2200      	movs	r2, #0
 8002568:	210f      	movs	r1, #15
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fe04 	bl	8002178 <NVIC_EncodePriority>
 8002570:	4603      	mov	r3, r0
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff fdd4 	bl	8002124 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257c:	f000 f82c 	bl	80025d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */

  PeriphCommonClock_Config();
 8002580:	f000 f86c 	bl	800265c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(4000);
 8002584:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002588:	f7ff fe2a 	bl	80021e0 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 800258c:	f7ff f9e0 	bl	8001950 <MX_GPIO_Init>
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_SPI2_Init();*/

  /* USER CODE BEGIN 2 */
  PWM_GPIO_init();
 8002590:	f000 fe06 	bl	80031a0 <PWM_GPIO_init>
  MX_I2C1_Init();
 8002594:	f7ff fc14 	bl	8001dc0 <MX_I2C1_Init>
  ADC_Init();
 8002598:	f7fe fd50 	bl	800103c <ADC_Init>


  Init_OLED();
 800259c:	f000 f882 	bl	80026a4 <Init_OLED>
  BME280_init();
 80025a0:	f7ff f80c 	bl	80015bc <BME280_init>
// RANDOM TESTTS THAT POBOBLY WORK
  	  //float test2 = BME280_read_temp();
  	//SendString((uint8_t *)"Test UART\n\r");

  	  //PrintMeasurmentsFromBme280();
  	  Oled_print_dec();
 80025a4:	f000 fa4c 	bl	8002a40 <Oled_print_dec>
	  if(i==99)
	  {
		  i = 1;
		  k = 0;
	  }*/
	  LL_mDelay(2000);
 80025a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025ac:	f001 fafe 	bl	8003bac <LL_mDelay>
		Oled_Fill(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 f8a7 	bl	8002704 <Oled_Fill>
			  Oled_UpdateScreen();;
 80025b6:	f000 f8c9 	bl	800274c <Oled_UpdateScreen>
	  Oled_print_dec();
 80025ba:	f000 fa41 	bl	8002a40 <Oled_print_dec>
	  LL_mDelay(2000);
 80025be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025c2:	f001 faf3 	bl	8003bac <LL_mDelay>
	  Oled_Fill(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f89c 	bl	8002704 <Oled_Fill>
	  Oled_UpdateScreen();
 80025cc:	f000 f8be 	bl	800274c <Oled_UpdateScreen>
	  PrintMeasurmentsFromBme280();
 80025d0:	f000 fa78 	bl	8002ac4 <PrintMeasurmentsFromBme280>
	  LL_mDelay(2000);
 80025d4:	bf00      	nop
 80025d6:	e7e7      	b.n	80025a8 <main+0x68>

080025d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7ff ff65 	bl	80024ac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80025e2:	bf00      	nop
 80025e4:	f7ff ff76 	bl	80024d4 <LL_FLASH_GetLatency>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1fa      	bne.n	80025e4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80025ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025f2:	f7ff ff7d 	bl	80024f0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80025f6:	bf00      	nop
 80025f8:	f7ff ff8e 	bl	8002518 <LL_PWR_IsActiveFlag_VOS>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1fa      	bne.n	80025f8 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8002602:	f7ff fe0f 	bl	8002224 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8002606:	bf00      	nop
 8002608:	f7ff fe1c 	bl	8002244 <LL_RCC_MSI_IsReady>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d1fa      	bne.n	8002608 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8002612:	f7ff fe29 	bl	8002268 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8002616:	2060      	movs	r0, #96	@ 0x60
 8002618:	f7ff fe36 	bl	8002288 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fe47 	bl	80022b0 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fe5a 	bl	80022dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8002628:	bf00      	nop
 800262a:	f7ff fe6b 	bl	8002304 <LL_RCC_GetSysClkSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1fa      	bne.n	800262a <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fe73 	bl	8002320 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fe84 	bl	8002348 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fe95 	bl	8002370 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8002646:	4804      	ldr	r0, [pc, #16]	@ (8002658 <SystemClock_Config+0x80>)
 8002648:	f001 faa2 	bl	8003b90 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <SystemClock_Config+0x80>)
 800264e:	f001 fad5 	bl	8003bfc <LL_SetSystemCoreClock>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	003d0900 	.word	0x003d0900

0800265c <PeriphCommonClock_Config>:

void PeriphCommonClock_Config(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLSAI1R_DIV_2);
 8002660:	2300      	movs	r3, #0
 8002662:	2208      	movs	r2, #8
 8002664:	2100      	movs	r1, #0
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff feba 	bl	80023e0 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
  LL_RCC_PLLSAI1_EnableDomain_ADC();
 800266c:	f7ff fede 	bl	800242c <LL_RCC_PLLSAI1_EnableDomain_ADC>
  LL_RCC_PLLSAI1_Enable();
 8002670:	f7ff fe92 	bl	8002398 <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 8002674:	bf00      	nop
 8002676:	f7ff fe9f 	bl	80023b8 <LL_RCC_PLLSAI1_IsReady>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d1fa      	bne.n	8002676 <PeriphCommonClock_Config+0x1a>
  {

  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <SysTick_Handler>:
	        // Just wait
	    }
}

void SysTick_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
	    Tick++; // Increase system timer
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <SysTick_Handler+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	4a03      	ldr	r2, [pc, #12]	@ (80026a0 <SysTick_Handler+0x18>)
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000260 	.word	0x20000260

080026a4 <Init_OLED>:

static SSD1306_t SSD1306;

static uint8_t OLEDinited = 0;

void Init_OLED(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	uint8_t i;
	LL_mDelay(100);
 80026aa:	2064      	movs	r0, #100	@ 0x64
 80026ac:	f001 fa7e 	bl	8003bac <LL_mDelay>
			0xDB, // Set vcomh
			0x20, // Vcomh value, 0.77xVcc
			0x8D, // Set charge-pump
			0x14, // Charge pump enable
			0xAF}; // Display on
	for (i = 0; i < sizeof(settings); i++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	e010      	b.n	80026d8 <Init_OLED+0x34>
		if(i == 1){
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <Init_OLED+0x1e>
			LL_mDelay(105); //required for proper power off of the disp
 80026bc:	2069      	movs	r0, #105	@ 0x69
 80026be:	f001 fa75 	bl	8003bac <LL_mDelay>
		}
		I2C1_reg_write_it(OLED_ADRESS, OLED_COMMAND, &settings[i], sizeof(settings[i]));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <Init_OLED+0x58>)
 80026c6:	441a      	add	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	2100      	movs	r1, #0
 80026cc:	2078      	movs	r0, #120	@ 0x78
 80026ce:	f7ff fbdf 	bl	8001e90 <I2C1_reg_write_it>
	for (i = 0; i < sizeof(settings); i++){
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	3301      	adds	r3, #1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b1b      	cmp	r3, #27
 80026dc:	d9eb      	bls.n	80026b6 <Init_OLED+0x12>
	}
	LL_mDelay(100); // required for proper power on of the disp
 80026de:	2064      	movs	r0, #100	@ 0x64
 80026e0:	f001 fa64 	bl	8003bac <LL_mDelay>

	Oled_Fill(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 f80d 	bl	8002704 <Oled_Fill>
	Oled_UpdateScreen();
 80026ea:	f000 f82f 	bl	800274c <Oled_UpdateScreen>
	OLEDinited = 1;
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <Init_OLED+0x5c>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]

}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000008 	.word	0x20000008
 8002700:	2000046a 	.word	0x2000046a

08002704 <Oled_Fill>:

void Oled_Fill(uint8_t colour)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e00d      	b.n	8002730 <Oled_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (colour == 0x00) ? 0x00 : 0xFF;
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <Oled_Fill+0x1a>
 800271a:	2100      	movs	r1, #0
 800271c:	e000      	b.n	8002720 <Oled_Fill+0x1c>
 800271e:	21ff      	movs	r1, #255	@ 0xff
 8002720:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <Oled_Fill+0x44>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002736:	d3ed      	bcc.n	8002714 <Oled_Fill+0x10>
    }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000264 	.word	0x20000264

0800274c <Oled_UpdateScreen>:

void Oled_UpdateScreen(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
    uint8_t i;
    uint8_t command1;
    uint8_t command2 = 0x00;
 8002752:	2300      	movs	r3, #0
 8002754:	717b      	strb	r3, [r7, #5]
    uint8_t command3 = 0x10;
 8002756:	2310      	movs	r3, #16
 8002758:	713b      	strb	r3, [r7, #4]

    for (i = 0; i < 4; i++) {
 800275a:	2300      	movs	r3, #0
 800275c:	71fb      	strb	r3, [r7, #7]
 800275e:	e045      	b.n	80027ec <Oled_UpdateScreen+0xa0>
    	command1 = 0xB0 + i;
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	3b50      	subs	r3, #80	@ 0x50
 8002764:	b2db      	uxtb	r3, r3
 8002766:	71bb      	strb	r3, [r7, #6]
        I2C1_reg_write_it(OLED_ADRESS, OLED_COMMAND, &command1, sizeof(command1));
 8002768:	1dba      	adds	r2, r7, #6
 800276a:	2301      	movs	r3, #1
 800276c:	2100      	movs	r1, #0
 800276e:	2078      	movs	r0, #120	@ 0x78
 8002770:	f7ff fb8e 	bl	8001e90 <I2C1_reg_write_it>
        while (!i2c_transfer_complete);
 8002774:	bf00      	nop
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <Oled_UpdateScreen+0xb0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f7      	bne.n	8002776 <Oled_UpdateScreen+0x2a>
        I2C1_reg_write_it(OLED_ADRESS, OLED_COMMAND, &command2, sizeof(command2));
 8002786:	1d7a      	adds	r2, r7, #5
 8002788:	2301      	movs	r3, #1
 800278a:	2100      	movs	r1, #0
 800278c:	2078      	movs	r0, #120	@ 0x78
 800278e:	f7ff fb7f 	bl	8001e90 <I2C1_reg_write_it>
        while (!i2c_transfer_complete);
 8002792:	bf00      	nop
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <Oled_UpdateScreen+0xb0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f7      	bne.n	8002794 <Oled_UpdateScreen+0x48>
        I2C1_reg_write_it(OLED_ADRESS, OLED_COMMAND, &command3, sizeof(command3));
 80027a4:	1d3a      	adds	r2, r7, #4
 80027a6:	2301      	movs	r3, #1
 80027a8:	2100      	movs	r1, #0
 80027aa:	2078      	movs	r0, #120	@ 0x78
 80027ac:	f7ff fb70 	bl	8001e90 <I2C1_reg_write_it>
        while (!i2c_transfer_complete);
 80027b0:	bf00      	nop
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <Oled_UpdateScreen+0xb0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f7      	bne.n	80027b2 <Oled_UpdateScreen+0x66>
    	I2C1_reg_write_it(OLED_ADRESS, OLED_MULTIPLE_DATA, &SSD1306_Buffer[OLED_WIDTH * i], OLED_WIDTH);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	01db      	lsls	r3, r3, #7
 80027c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002800 <Oled_UpdateScreen+0xb4>)
 80027c8:	441a      	add	r2, r3
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	2140      	movs	r1, #64	@ 0x40
 80027ce:	2078      	movs	r0, #120	@ 0x78
 80027d0:	f7ff fb5e 	bl	8001e90 <I2C1_reg_write_it>
    	while (!i2c_transfer_complete);
 80027d4:	bf00      	nop
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <Oled_UpdateScreen+0xb0>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f083 0301 	eor.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f7      	bne.n	80027d6 <Oled_UpdateScreen+0x8a>
    for (i = 0; i < 4; i++) {
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	3301      	adds	r3, #1
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d9b6      	bls.n	8002760 <Oled_UpdateScreen+0x14>
    }
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	2000025c 	.word	0x2000025c
 8002800:	20000264 	.word	0x20000264

08002804 <ssd1306_WriteChar>:


char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	4604      	mov	r4, r0
 800280c:	1d38      	adds	r0, r7, #4
 800280e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002812:	461a      	mov	r2, r3
 8002814:	4623      	mov	r3, r4
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	4613      	mov	r3, r2
 800281a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (OLED_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800281c:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	793b      	ldrb	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	2b7f      	cmp	r3, #127	@ 0x7f
 8002828:	dc06      	bgt.n	8002838 <ssd1306_WriteChar+0x34>
        OLED_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800282a:	4b35      	ldr	r3, [pc, #212]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 800282c:	885b      	ldrh	r3, [r3, #2]
 800282e:	461a      	mov	r2, r3
 8002830:	797b      	ldrb	r3, [r7, #5]
 8002832:	4413      	add	r3, r2
    if (OLED_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002834:	2b1f      	cmp	r3, #31
 8002836:	dd01      	ble.n	800283c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002838:	2300      	movs	r3, #0
 800283a:	e05c      	b.n	80028f6 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e04c      	b.n	80028dc <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	3b20      	subs	r3, #32
 8002848:	7979      	ldrb	r1, [r7, #5]
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4619      	mov	r1, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	440b      	add	r3, r1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e034      	b.n	80028cc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002872:	4b23      	ldr	r3, [pc, #140]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 8002882:	885b      	ldrh	r3, [r3, #2]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	7bba      	ldrb	r2, [r7, #14]
 8002890:	4619      	mov	r1, r3
 8002892:	f000 f85d 	bl	8002950 <ssd1306_DrawPixel>
 8002896:	e016      	b.n	80028c6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	b2d8      	uxtb	r0, r3
 80028a6:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 80028a8:	885b      	ldrh	r3, [r3, #2]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	f000 f845 	bl	8002950 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	793b      	ldrb	r3, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d3c5      	bcc.n	8002862 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	797b      	ldrb	r3, [r7, #5]
 80028de:	461a      	mov	r2, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d3ad      	bcc.n	8002842 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	793a      	ldrb	r2, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <ssd1306_WriteChar+0xfc>)
 80028f2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	@ 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000464 	.word	0x20000464

08002904 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	1d38      	adds	r0, r7, #4
 800290e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002912:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002914:	e012      	b.n	800293c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	7818      	ldrb	r0, [r3, #0]
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	1d3a      	adds	r2, r7, #4
 800291e:	ca06      	ldmia	r2, {r1, r2}
 8002920:	f7ff ff70 	bl	8002804 <ssd1306_WriteChar>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d002      	beq.n	8002936 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	e008      	b.n	8002948 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e8      	bne.n	8002916 <ssd1306_WriteString+0x12>

    }

    // Everything ok
    return *str;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	781b      	ldrb	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	460b      	mov	r3, r1
 800295c:	71bb      	strb	r3, [r7, #6]
 800295e:	4613      	mov	r3, r2
 8002960:	717b      	strb	r3, [r7, #5]
    if (x >= OLED_WIDTH || y >= OLED_HEIGHT)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db48      	blt.n	80029fc <ssd1306_DrawPixel+0xac>
 800296a:	79bb      	ldrb	r3, [r7, #6]
 800296c:	2b1f      	cmp	r3, #31
 800296e:	d845      	bhi.n	80029fc <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002970:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <ssd1306_DrawPixel+0xb8>)
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002978:	797b      	ldrb	r3, [r7, #5]
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002986:	797b      	ldrb	r3, [r7, #5]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d11a      	bne.n	80029c2 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 800298c:	79fa      	ldrb	r2, [r7, #7]
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	4603      	mov	r3, r0
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	4413      	add	r3, r2
 800299a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <ssd1306_DrawPixel+0xbc>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	b25a      	sxtb	r2, r3
 80029a0:	79bb      	ldrb	r3, [r7, #6]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b259      	sxtb	r1, r3
 80029b2:	79fa      	ldrb	r2, [r7, #7]
 80029b4:	4603      	mov	r3, r0
 80029b6:	01db      	lsls	r3, r3, #7
 80029b8:	4413      	add	r3, r2
 80029ba:	b2c9      	uxtb	r1, r1
 80029bc:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <ssd1306_DrawPixel+0xbc>)
 80029be:	54d1      	strb	r1, [r2, r3]
 80029c0:	e01d      	b.n	80029fe <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	b2d8      	uxtb	r0, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	01db      	lsls	r3, r3, #7
 80029ce:	4413      	add	r3, r2
 80029d0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a0c <ssd1306_DrawPixel+0xbc>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	b25a      	sxtb	r2, r3
 80029d6:	79bb      	ldrb	r3, [r7, #6]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	4013      	ands	r3, r2
 80029ea:	b259      	sxtb	r1, r3
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	4603      	mov	r3, r0
 80029f0:	01db      	lsls	r3, r3, #7
 80029f2:	4413      	add	r3, r2
 80029f4:	b2c9      	uxtb	r1, r1
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <ssd1306_DrawPixel+0xbc>)
 80029f8:	54d1      	strb	r1, [r2, r3]
 80029fa:	e000      	b.n	80029fe <ssd1306_DrawPixel+0xae>
        return;
 80029fc:	bf00      	nop
    }
}
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	20000464 	.word	0x20000464
 8002a0c:	20000264 	.word	0x20000264

08002a10 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void)
{
    SSD1306.Inverted = !SSD1306.Inverted;
}
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	460a      	mov	r2, r1
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <ssd1306_SetCursor+0x2c>)
 8002a26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002a28:	79bb      	ldrb	r3, [r7, #6]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <ssd1306_SetCursor+0x2c>)
 8002a2e:	805a      	strh	r2, [r3, #2]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	20000464 	.word	0x20000464

08002a40 <Oled_print_dec>:
		Oled_UpdateScreen();

}

void Oled_print_dec(void)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b09c      	sub	sp, #112	@ 0x70
 8002a44:	af00      	add	r7, sp, #0
	uint32_t dec = adc_to_dB();
 8002a46:	f7fe fc7b 	bl	8001340 <adc_to_dB>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	char buffer1[50];
	char buffer2[50] = {"Super fajny led!"};
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <Oled_print_dec+0x78>)
 8002a50:	1d3c      	adds	r4, r7, #4
 8002a52:	461d      	mov	r5, r3
 8002a54:	6828      	ldr	r0, [r5, #0]
 8002a56:	6869      	ldr	r1, [r5, #4]
 8002a58:	68aa      	ldr	r2, [r5, #8]
 8002a5a:	68eb      	ldr	r3, [r5, #12]
 8002a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5e:	7c2b      	ldrb	r3, [r5, #16]
 8002a60:	7023      	strb	r3, [r4, #0]
 8002a62:	f107 0315 	add.w	r3, r7, #21
 8002a66:	2221      	movs	r2, #33	@ 0x21
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fe53 	bl	8004716 <memset>


	sprintf(buffer1, "dB: %u", dec);
 8002a70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a76:	4911      	ldr	r1, [pc, #68]	@ (8002abc <Oled_print_dec+0x7c>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 fde9 	bl	8004650 <siprintf>
	ssd1306_SetCursor(0, 0);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff ffc5 	bl	8002a10 <ssd1306_SetCursor>
	ssd1306_WriteString(buffer1, Font_7x10, White);
 8002a86:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac0 <Oled_print_dec+0x80>)
 8002a88:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	ca06      	ldmia	r2, {r1, r2}
 8002a90:	f7ff ff38 	bl	8002904 <ssd1306_WriteString>
	ssd1306_SetCursor(0, Font_7x10.FontHeight);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <Oled_print_dec+0x80>)
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff ffb8 	bl	8002a10 <ssd1306_SetCursor>
	ssd1306_WriteString(buffer2, Font_7x10, White);
 8002aa0:	4a07      	ldr	r2, [pc, #28]	@ (8002ac0 <Oled_print_dec+0x80>)
 8002aa2:	1d38      	adds	r0, r7, #4
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	ca06      	ldmia	r2, {r1, r2}
 8002aa8:	f7ff ff2c 	bl	8002904 <ssd1306_WriteString>

	Oled_UpdateScreen();
 8002aac:	f7ff fe4e 	bl	800274c <Oled_UpdateScreen>

}
 8002ab0:	bf00      	nop
 8002ab2:	3770      	adds	r7, #112	@ 0x70
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab8:	08006fec 	.word	0x08006fec
 8002abc:	08007000 	.word	0x08007000
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <PrintMeasurmentsFromBme280>:
		Oled_UpdateScreen();

}

void PrintMeasurmentsFromBme280(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b09c      	sub	sp, #112	@ 0x70
 8002ac8:	af00      	add	r7, sp, #0
    float temp = BME280_read_temp();
 8002aca:	f7fe ff01 	bl	80018d0 <BME280_read_temp>
 8002ace:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    float press = BME280_read_pressure()/100;
 8002ad2:	f7fe ff17 	bl	8001904 <BME280_read_pressure>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <PrintMeasurmentsFromBme280+0x88>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    char buffer1[50];
    char buffer2[50];
    sprintf(buffer1, "Temperature: %f", temp);
 8002aec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002aee:	f7fd fd2b 	bl	8000548 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002afa:	4915      	ldr	r1, [pc, #84]	@ (8002b50 <PrintMeasurmentsFromBme280+0x8c>)
 8002afc:	f001 fda8 	bl	8004650 <siprintf>
    sprintf(buffer2, "Pressure: %f", press);
 8002b00:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002b02:	f7fd fd21 	bl	8000548 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	4911      	ldr	r1, [pc, #68]	@ (8002b54 <PrintMeasurmentsFromBme280+0x90>)
 8002b0e:	f001 fd9f 	bl	8004650 <siprintf>
    ssd1306_SetCursor(0, 0);
 8002b12:	2100      	movs	r1, #0
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7ff ff7b 	bl	8002a10 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer1, Font_7x10, White);
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b58 <PrintMeasurmentsFromBme280+0x94>)
 8002b1c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002b20:	2301      	movs	r3, #1
 8002b22:	ca06      	ldmia	r2, {r1, r2}
 8002b24:	f7ff feee 	bl	8002904 <ssd1306_WriteString>
    ssd1306_SetCursor(0, Font_7x10.FontHeight);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <PrintMeasurmentsFromBme280+0x94>)
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff ff6e 	bl	8002a10 <ssd1306_SetCursor>
    ssd1306_WriteString(buffer2, Font_7x10, White);
 8002b34:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <PrintMeasurmentsFromBme280+0x94>)
 8002b36:	4638      	mov	r0, r7
 8002b38:	2301      	movs	r3, #1
 8002b3a:	ca06      	ldmia	r2, {r1, r2}
 8002b3c:	f7ff fee2 	bl	8002904 <ssd1306_WriteString>

    Oled_UpdateScreen();
 8002b40:	f7ff fe04 	bl	800274c <Oled_UpdateScreen>

}
 8002b44:	bf00      	nop
 8002b46:	3770      	adds	r7, #112	@ 0x70
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	51eb851f 	.word	0x51eb851f
 8002b50:	08007018 	.word	0x08007018
 8002b54:	08007028 	.word	0x08007028
 8002b58:	20000000 	.word	0x20000000

08002b5c <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d101      	bne.n	8002bba <LL_SPI_IsActiveFlag_TXE+0x18>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b80      	cmp	r3, #128	@ 0x80
 8002bda:	d101      	bne.n	8002be0 <LL_SPI_IsActiveFlag_BSY+0x18>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002c34:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_SPI_IsEnabledIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_IsEnabledIT_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	2b40      	cmp	r3, #64	@ 0x40
 8002c9c:	d101      	bne.n	8002ca2 <LL_SPI_IsEnabledIT_RXNE+0x18>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_SPI_IsEnabledIT_RXNE+0x1a>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b80      	cmp	r3, #128	@ 0x80
 8002cc2:	d101      	bne.n	8002cc8 <LL_SPI_IsEnabledIT_TXE+0x18>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <LL_SPI_IsEnabledIT_TXE+0x1a>
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	330c      	adds	r3, #12
 8002d02:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <SPI2_IRQHandler>:
	LL_SPI_EnableIT_RXNE(SPI2);
	LL_SPI_Enable(SPI2);
}

void SPI2_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	if(LL_SPI_IsActiveFlag_TXE(SPI2) && LL_SPI_IsEnabledIT_TXE(SPI2))
 8002d1c:	480e      	ldr	r0, [pc, #56]	@ (8002d58 <SPI2_IRQHandler+0x40>)
 8002d1e:	f7ff ff40 	bl	8002ba2 <LL_SPI_IsActiveFlag_TXE>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <SPI2_IRQHandler+0x20>
 8002d28:	480b      	ldr	r0, [pc, #44]	@ (8002d58 <SPI2_IRQHandler+0x40>)
 8002d2a:	f7ff ffc1 	bl	8002cb0 <LL_SPI_IsEnabledIT_TXE>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <SPI2_IRQHandler+0x20>
	{
		spi_transmit_callback();
 8002d34:	f000 f812 	bl	8002d5c <spi_transmit_callback>
	}
	if(LL_SPI_IsActiveFlag_RXNE(SPI2) && LL_SPI_IsEnabledIT_RXNE(SPI2))
 8002d38:	4807      	ldr	r0, [pc, #28]	@ (8002d58 <SPI2_IRQHandler+0x40>)
 8002d3a:	f7ff ff1f 	bl	8002b7c <LL_SPI_IsActiveFlag_RXNE>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <SPI2_IRQHandler+0x3c>
 8002d44:	4804      	ldr	r0, [pc, #16]	@ (8002d58 <SPI2_IRQHandler+0x40>)
 8002d46:	f7ff ffa0 	bl	8002c8a <LL_SPI_IsEnabledIT_RXNE>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <SPI2_IRQHandler+0x3c>
	{
		spi_receive_callback();
 8002d50:	f000 f86c 	bl	8002e2c <spi_receive_callback>
	}
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40003800 	.word	0x40003800

08002d5c <spi_transmit_callback>:

void spi_transmit_callback(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 8002d60:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02e      	beq.n	8002dc6 <spi_transmit_callback+0x6a>
	{
		if(!LL_SPI_IsEnabledIT_RXNE(SPI2))
 8002d68:	482e      	ldr	r0, [pc, #184]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002d6a:	f7ff ff8e 	bl	8002c8a <LL_SPI_IsEnabledIT_RXNE>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <spi_transmit_callback+0x58>
		{
			LL_SPI_TransmitData8(SPI2, *tx_buffer.data_ptr);
 8002d74:	4b2a      	ldr	r3, [pc, #168]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4829      	ldr	r0, [pc, #164]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002d7e:	f7ff ffb8 	bl	8002cf2 <LL_SPI_TransmitData8>

			//echo
			rx_buffer.data_ptr = tx_buffer.data_ptr;
 8002d82:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a28      	ldr	r2, [pc, #160]	@ (8002e28 <spi_transmit_callback+0xcc>)
 8002d88:	6013      	str	r3, [r2, #0]
			rx_buffer.data_ptr++;
 8002d8a:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <spi_transmit_callback+0xcc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <spi_transmit_callback+0xcc>)
 8002d92:	6013      	str	r3, [r2, #0]
			rx_buffer.count--;
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <spi_transmit_callback+0xcc>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <spi_transmit_callback+0xcc>)
 8002d9c:	6053      	str	r3, [r2, #4]
			// end echo

			tx_buffer.data_ptr++;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002da6:	6013      	str	r3, [r2, #0]
			tx_buffer.count--;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002db0:	6053      	str	r3, [r2, #4]
 8002db2:	e008      	b.n	8002dc6 <spi_transmit_callback+0x6a>
		}
		else
		{
			LL_SPI_TransmitData8(SPI2, DUMMY_BYTE);
 8002db4:	21ff      	movs	r1, #255	@ 0xff
 8002db6:	481b      	ldr	r0, [pc, #108]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002db8:	f7ff ff9b 	bl	8002cf2 <LL_SPI_TransmitData8>
			tx_buffer.count--;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002dc4:	6053      	str	r3, [r2, #4]
		}
	}
	if(tx_buffer.count <= 0 && !LL_SPI_IsEnabledIT_RXNE(SPI2))
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <spi_transmit_callback+0xc4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d126      	bne.n	8002e1c <spi_transmit_callback+0xc0>
 8002dce:	4815      	ldr	r0, [pc, #84]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002dd0:	f7ff ff5b 	bl	8002c8a <LL_SPI_IsEnabledIT_RXNE>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d120      	bne.n	8002e1c <spi_transmit_callback+0xc0>
	{
		LL_SPI_DisableIT_TXE(SPI2);
 8002dda:	4812      	ldr	r0, [pc, #72]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002ddc:	f7ff ff45 	bl	8002c6a <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY)
 8002de0:	bf00      	nop
 8002de2:	4810      	ldr	r0, [pc, #64]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002de4:	f7ff ff11 	bl	8002c0a <LL_SPI_GetTxFIFOLevel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <spi_transmit_callback+0x86>
			;

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0)
 8002dee:	bf00      	nop
 8002df0:	480c      	ldr	r0, [pc, #48]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002df2:	f7ff fee9 	bl	8002bc8 <LL_SPI_IsActiveFlag_BSY>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f9      	bne.n	8002df0 <spi_transmit_callback+0x94>
			;

		LL_SPI_Disable(SPI2);
 8002dfc:	4809      	ldr	r0, [pc, #36]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002dfe:	f7ff fead 	bl	8002b5c <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8002e02:	e002      	b.n	8002e0a <spi_transmit_callback+0xae>
		{
			LL_SPI_ReceiveData8(SPI2);
 8002e04:	4807      	ldr	r0, [pc, #28]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002e06:	f7ff ff66 	bl	8002cd6 <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8002e0a:	4806      	ldr	r0, [pc, #24]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002e0c:	f7ff feef 	bl	8002bee <LL_SPI_GetRxFIFOLevel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f6      	bne.n	8002e04 <spi_transmit_callback+0xa8>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 8002e16:	4803      	ldr	r0, [pc, #12]	@ (8002e24 <spi_transmit_callback+0xc8>)
 8002e18:	f7ff ff05 	bl	8002c26 <LL_SPI_ClearFlag_OVR>
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000474 	.word	0x20000474
 8002e24:	40003800 	.word	0x40003800
 8002e28:	2000046c 	.word	0x2000046c

08002e2c <spi_receive_callback>:

void spi_receive_callback(void)
{
 8002e2c:	b598      	push	{r3, r4, r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 8002e30:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <spi_receive_callback+0x2e>
	{
		*rx_buffer.data_ptr = LL_SPI_ReceiveData8(SPI2);
 8002e38:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e3a:	681c      	ldr	r4, [r3, #0]
 8002e3c:	481d      	ldr	r0, [pc, #116]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e3e:	f7ff ff4a 	bl	8002cd6 <LL_SPI_ReceiveData8>
 8002e42:	4603      	mov	r3, r0
 8002e44:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e4e:	6013      	str	r3, [r2, #0]
		rx_buffer.count--;
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e58:	6053      	str	r3, [r2, #4]
	}

	if(rx_buffer.count <= 0)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <spi_receive_callback+0x84>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d123      	bne.n	8002eaa <spi_receive_callback+0x7e>
	{
		LL_SPI_DisableIT_RXNE(SPI2);
 8002e62:	4814      	ldr	r0, [pc, #80]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e64:	f7ff fef1 	bl	8002c4a <LL_SPI_DisableIT_RXNE>
		LL_SPI_DisableIT_TXE(SPI2);
 8002e68:	4812      	ldr	r0, [pc, #72]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e6a:	f7ff fefe 	bl	8002c6a <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY);
 8002e6e:	bf00      	nop
 8002e70:	4810      	ldr	r0, [pc, #64]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e72:	f7ff feca 	bl	8002c0a <LL_SPI_GetTxFIFOLevel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <spi_receive_callback+0x44>

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0);
 8002e7c:	bf00      	nop
 8002e7e:	480d      	ldr	r0, [pc, #52]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e80:	f7ff fea2 	bl	8002bc8 <LL_SPI_IsActiveFlag_BSY>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <spi_receive_callback+0x52>

		LL_SPI_Disable(SPI2);
 8002e8a:	480a      	ldr	r0, [pc, #40]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e8c:	f7ff fe66 	bl	8002b5c <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8002e90:	e002      	b.n	8002e98 <spi_receive_callback+0x6c>
		{
			LL_SPI_ReceiveData8(SPI2);
 8002e92:	4808      	ldr	r0, [pc, #32]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e94:	f7ff ff1f 	bl	8002cd6 <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8002e98:	4806      	ldr	r0, [pc, #24]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002e9a:	f7ff fea8 	bl	8002bee <LL_SPI_GetRxFIFOLevel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f6      	bne.n	8002e92 <spi_receive_callback+0x66>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 8002ea4:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <spi_receive_callback+0x88>)
 8002ea6:	f7ff febe 	bl	8002c26 <LL_SPI_ClearFlag_OVR>

	}
}
 8002eaa:	bf00      	nop
 8002eac:	bd98      	pop	{r3, r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000046c 	.word	0x2000046c
 8002eb4:	40003800 	.word	0x40003800

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <NMI_Handler+0x4>

08002ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <MemManage_Handler+0x4>

08002ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <BusFault_Handler+0x4>

08002ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <UsageFault_Handler+0x4>

08002ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  return 1;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_kill>:

int _kill(int pid, int sig)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f24:	f001 fc4a 	bl	80047bc <__errno>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2216      	movs	r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_exit>:

void _exit (int status)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f42:	f04f 31ff 	mov.w	r1, #4294967295
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffe7 	bl	8002f1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <_exit+0x12>

08002f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e00a      	b.n	8002f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f62:	f3af 8000 	nop.w
 8002f66:	4601      	mov	r1, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dbf0      	blt.n	8002f62 <_read+0x12>
  }

  return len;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e009      	b.n	8002fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	60ba      	str	r2, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbf1      	blt.n	8002f9c <_write+0x12>
  }
  return len;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_close>:

int _close(int file)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fea:	605a      	str	r2, [r3, #4]
  return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_isatty>:

int _isatty(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	@ (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f001 fbae 	bl	80047bc <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20018000 	.word	0x20018000
 800308c:	00000400 	.word	0x00000400
 8003090:	2000047c 	.word	0x2000047c
 8003094:	200006d8 	.word	0x200006d8

08003098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <SystemInit+0x20>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <SystemInit+0x20>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <LL_AHB2_GRP1_EnableClock>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80030c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030c8:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80030d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000

080030ec <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f06f 0201 	mvn.w	r2, #1
 80030fa:	611a      	str	r2, [r3, #16]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4013      	ands	r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d101      	bne.n	800314a <LL_GPIO_IsInputPinSet+0x1c>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <LL_GPIO_IsInputPinSet+0x1e>
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <TIM5_IRQHandler>:

   /* USER CODE END TIM5_Init 2 */

 }

  void TIM5_IRQHandler(void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
      // Sprawdzenie flagi przerwania
      if (LL_TIM_IsActiveFlag_UPDATE(TIM5)) {
 800315c:	480e      	ldr	r0, [pc, #56]	@ (8003198 <TIM5_IRQHandler+0x40>)
 800315e:	f7ff ffd3 	bl	8003108 <LL_TIM_IsActiveFlag_UPDATE>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d014      	beq.n	8003192 <TIM5_IRQHandler+0x3a>
          LL_TIM_ClearFlag_UPDATE(TIM5); // Wyczyść flagę przerwania
 8003168:	480b      	ldr	r0, [pc, #44]	@ (8003198 <TIM5_IRQHandler+0x40>)
 800316a:	f7ff ffbf 	bl	80030ec <LL_TIM_ClearFlag_UPDATE>

          // Sprawdzenie stanu GPIO (PA0)
          if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_8)) {
 800316e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003176:	f7ff ffda 	bl	800312e <LL_GPIO_IsInputPinSet>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <TIM5_IRQHandler+0x30>
              counter = 0; // Wyzeruj licznik, jeśli stan wysoki
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <TIM5_IRQHandler+0x44>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
          } else {
              counter++;   // Inkrementuj licznik, jeśli stan niski
          }
      }
  }
 8003186:	e004      	b.n	8003192 <TIM5_IRQHandler+0x3a>
              counter++;   // Inkrementuj licznik, jeśli stan niski
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <TIM5_IRQHandler+0x44>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	4a03      	ldr	r2, [pc, #12]	@ (800319c <TIM5_IRQHandler+0x44>)
 8003190:	6013      	str	r3, [r2, #0]
  }
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40000c00 	.word	0x40000c00
 800319c:	20000480 	.word	0x20000480

080031a0 <PWM_GPIO_init>:
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
  LL_TIM_EnableCounter(TIM3);

}
void PWM_GPIO_init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	615a      	str	r2, [r3, #20]


	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7ff ff80 	bl	80030bc <LL_AHB2_GRP1_EnableClock>

	  GPIO_InitStruct.Pin = PWM_LOGIC2_Pin|PWM_LOGIC1_Pin;
 80031bc:	2322      	movs	r3, #34	@ 0x22
 80031be:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031c0:	2301      	movs	r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(PWM_LOGIC2_Port, &GPIO_InitStruct);
 80031d0:	463b      	mov	r3, r7
 80031d2:	4619      	mov	r1, r3
 80031d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031d8:	f000 fb73 	bl	80038c2 <LL_GPIO_Init>

}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d101      	bne.n	80031fc <LL_USART_IsActiveFlag_IDLE+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_USART_IsActiveFlag_IDLE+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b20      	cmp	r3, #32
 800321c:	d101      	bne.n	8003222 <LL_USART_IsActiveFlag_RXNE+0x18>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	2b80      	cmp	r3, #128	@ 0x80
 8003242:	d101      	bne.n	8003248 <LL_USART_IsActiveFlag_TXE+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_USART_IsActiveFlag_TXE+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2210      	movs	r2, #16
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	60bb      	str	r3, [r7, #8]
   return(result);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	61ba      	str	r2, [r7, #24]
 8003292:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6979      	ldr	r1, [r7, #20]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	613b      	str	r3, [r7, #16]
   return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e9      	bne.n	8003278 <LL_USART_DisableIT_TXE+0x8>
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	@ 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d101      	bne.n	80032ca <LL_USART_IsEnabledIT_IDLE+0x18>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <LL_USART_IsEnabledIT_IDLE+0x1a>
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d101      	bne.n	80032f0 <LL_USART_IsEnabledIT_RXNE+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_USART_IsEnabledIT_RXNE+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b80      	cmp	r3, #128	@ 0x80
 8003310:	d101      	bne.n	8003316 <LL_USART_IsEnabledIT_TXE+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_USART_IsEnabledIT_TXE+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003330:	b29b      	uxth	r3, r3
 8003332:	b2db      	uxtb	r3, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <USART2_IRQHandler>:

}

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void)
{
 8003360:	b598      	push	{r3, r4, r7, lr}
 8003362:	af00      	add	r7, sp, #0
	if(LL_USART_IsEnabledIT_TXE(USART2) && LL_USART_IsActiveFlag_TXE(USART2))
 8003364:	482a      	ldr	r0, [pc, #168]	@ (8003410 <USART2_IRQHandler+0xb0>)
 8003366:	f7ff ffca 	bl	80032fe <LL_USART_IsEnabledIT_TXE>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d022      	beq.n	80033b6 <USART2_IRQHandler+0x56>
 8003370:	4827      	ldr	r0, [pc, #156]	@ (8003410 <USART2_IRQHandler+0xb0>)
 8003372:	f7ff ff5d 	bl	8003230 <LL_USART_IsActiveFlag_TXE>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <USART2_IRQHandler+0x56>
	{
		if(tx_buffer.count == sizeof(tx_buffer))
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <USART2_IRQHandler+0xb4>)
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003382:	2b84      	cmp	r3, #132	@ 0x84
 8003384:	d107      	bne.n	8003396 <USART2_IRQHandler+0x36>
		{
			tx_buffer.count = 0;
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <USART2_IRQHandler+0xb4>)
 8003388:	2200      	movs	r2, #0
 800338a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			LL_USART_DisableIT_TXE(USART2);
 800338e:	4820      	ldr	r0, [pc, #128]	@ (8003410 <USART2_IRQHandler+0xb0>)
 8003390:	f7ff ff6e 	bl	8003270 <LL_USART_DisableIT_TXE>

			return;
 8003394:	e03b      	b.n	800340e <USART2_IRQHandler+0xae>
		}

		LL_USART_TransmitData8(USART2, tx_buffer.data[tx_buffer.count]);
 8003396:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <USART2_IRQHandler+0xb4>)
 8003398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339c:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <USART2_IRQHandler+0xb4>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	4619      	mov	r1, r3
 80033a2:	481b      	ldr	r0, [pc, #108]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033a4:	f7ff ffcc 	bl	8003340 <LL_USART_TransmitData8>
		tx_buffer.count++;
 80033a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003414 <USART2_IRQHandler+0xb4>)
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ae:	3301      	adds	r3, #1
 80033b0:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <USART2_IRQHandler+0xb4>)
 80033b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
	}
	if(LL_USART_IsEnabledIT_RXNE(USART2) && LL_USART_IsActiveFlag_RXNE(USART2))
 80033b6:	4816      	ldr	r0, [pc, #88]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033b8:	f7ff ff8e 	bl	80032d8 <LL_USART_IsEnabledIT_RXNE>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <USART2_IRQHandler+0x90>
 80033c2:	4813      	ldr	r0, [pc, #76]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033c4:	f7ff ff21 	bl	800320a <LL_USART_IsActiveFlag_RXNE>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <USART2_IRQHandler+0x90>
	{
		rx_buffer.data[rx_buffer.count] = LL_USART_ReceiveData8(USART2);
 80033ce:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <USART2_IRQHandler+0xb8>)
 80033d0:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80033d4:	480e      	ldr	r0, [pc, #56]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033d6:	f7ff ffa5 	bl	8003324 <LL_USART_ReceiveData8>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <USART2_IRQHandler+0xb8>)
 80033e0:	551a      	strb	r2, [r3, r4]
	        rx_buffer.count++;
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <USART2_IRQHandler+0xb8>)
 80033e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <USART2_IRQHandler+0xb8>)
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
	}

	if(LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2))
 80033f0:	4807      	ldr	r0, [pc, #28]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033f2:	f7ff ff5e 	bl	80032b2 <LL_USART_IsEnabledIT_IDLE>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <USART2_IRQHandler+0xae>
 80033fc:	4804      	ldr	r0, [pc, #16]	@ (8003410 <USART2_IRQHandler+0xb0>)
 80033fe:	f7ff fef1 	bl	80031e4 <LL_USART_IsActiveFlag_IDLE>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <USART2_IRQHandler+0xae>
	{
		LL_USART_ClearFlag_IDLE(USART2);
 8003408:	4801      	ldr	r0, [pc, #4]	@ (8003410 <USART2_IRQHandler+0xb0>)
 800340a:	f7ff ff24 	bl	8003256 <LL_USART_ClearFlag_IDLE>

		//obsługa zdarzenia po odebraniu całej ramki
	}
}
 800340e:	bd98      	pop	{r3, r4, r7, pc}
 8003410:	40004400 	.word	0x40004400
 8003414:	20000508 	.word	0x20000508
 8003418:	20000484 	.word	0x20000484

0800341c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800341c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003420:	f7ff fe3a 	bl	8003098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003424:	480c      	ldr	r0, [pc, #48]	@ (8003458 <LoopForever+0x6>)
  ldr r1, =_edata
 8003426:	490d      	ldr	r1, [pc, #52]	@ (800345c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003428:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <LoopForever+0xe>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800342c:	e002      	b.n	8003434 <LoopCopyDataInit>

0800342e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003432:	3304      	adds	r3, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003438:	d3f9      	bcc.n	800342e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343a:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800343c:	4c0a      	ldr	r4, [pc, #40]	@ (8003468 <LoopForever+0x16>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003440:	e001      	b.n	8003446 <LoopFillZerobss>

08003442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003444:	3204      	adds	r2, #4

08003446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003448:	d3fb      	bcc.n	8003442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800344a:	f001 f9bd 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800344e:	f7ff f877 	bl	8002540 <main>

08003452 <LoopForever>:

LoopForever:
    b LoopForever
 8003452:	e7fe      	b.n	8003452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800345c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003460:	08007b28 	.word	0x08007b28
  ldr r2, =_sbss
 8003464:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003468:	200006d8 	.word	0x200006d8

0800346c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800346c:	e7fe      	b.n	800346c <ADC3_IRQHandler>

0800346e <LL_ADC_REG_SetSequencerLength>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	f023 020f 	bic.w	r2, r3, #15
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_IsEnabled>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <LL_ADC_IsEnabled+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_ADC_IsEnabled+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80034ca:	481c      	ldr	r0, [pc, #112]	@ (800353c <LL_ADC_CommonInit+0x80>)
 80034cc:	f7ff ffe2 	bl	8003494 <LL_ADC_IsEnabled>
 80034d0:	4604      	mov	r4, r0
 80034d2:	481b      	ldr	r0, [pc, #108]	@ (8003540 <LL_ADC_CommonInit+0x84>)
 80034d4:	f7ff ffde 	bl	8003494 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	431c      	orrs	r4, r3
 80034dc:	4819      	ldr	r0, [pc, #100]	@ (8003544 <LL_ADC_CommonInit+0x88>)
 80034de:	f7ff ffd9 	bl	8003494 <LL_ADC_IsEnabled>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4323      	orrs	r3, r4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d120      	bne.n	800352c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <LL_ADC_CommonInit+0x8c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6852      	ldr	r2, [r2, #4]
 8003502:	4311      	orrs	r1, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	6892      	ldr	r2, [r2, #8]
 8003508:	4311      	orrs	r1, r2
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	430a      	orrs	r2, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	e00b      	b.n	8003530 <LL_ADC_CommonInit+0x74>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <LL_ADC_CommonInit+0x8c>)
 800351e:	4013      	ands	r3, r2
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	e001      	b.n	8003530 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	50040000 	.word	0x50040000
 8003540:	50040100 	.word	0x50040100
 8003544:	50040200 	.word	0x50040200
 8003548:	ffc030e0 	.word	0xffc030e0

0800354c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff9a 	bl	8003494 <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d111      	bne.n	800358a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800356e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6811      	ldr	r1, [r2, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6852      	ldr	r2, [r2, #4]
 800357a:	4311      	orrs	r1, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	430a      	orrs	r2, r1
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e001      	b.n	800358e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff74 	bl	8003494 <LL_ADC_IsEnabled>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d132      	bne.n	8003618 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <LL_ADC_REG_Init+0x90>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	6811      	ldr	r1, [r2, #0]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	68d2      	ldr	r2, [r2, #12]
 80035d0:	4311      	orrs	r1, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	4311      	orrs	r1, r2
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	6952      	ldr	r2, [r2, #20]
 80035dc:	430a      	orrs	r2, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e011      	b.n	800360a <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <LL_ADC_REG_Init+0x90>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	6811      	ldr	r1, [r2, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	4311      	orrs	r1, r2
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	6912      	ldr	r2, [r2, #16]
 80035fc:	4311      	orrs	r1, r2
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	6952      	ldr	r2, [r2, #20]
 8003602:	430a      	orrs	r2, r1
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff2c 	bl	800346e <LL_ADC_REG_SetSequencerLength>
 8003616:	e001      	b.n	800361c <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	fff0c03c 	.word	0xfff0c03c

0800362c <LL_GPIO_SetPinMode>:
{
 800362c:	b480      	push	{r7}
 800362e:	b08b      	sub	sp, #44	@ 0x2c
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
  return result;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	2103      	movs	r1, #3
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	401a      	ands	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	61fb      	str	r3, [r7, #28]
  return result;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e003      	b.n	800368c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	372c      	adds	r7, #44	@ 0x2c
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_GPIO_SetPinOutputType>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	401a      	ands	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_GPIO_SetPinSpeed>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b08b      	sub	sp, #44	@ 0x2c
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	613b      	str	r3, [r7, #16]
  return result;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2103      	movs	r1, #3
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	61fb      	str	r3, [r7, #28]
  return result;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	431a      	orrs	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	372c      	adds	r7, #44	@ 0x2c
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_GPIO_SetPinPull>:
{
 8003750:	b480      	push	{r7}
 8003752:	b08b      	sub	sp, #44	@ 0x2c
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	613b      	str	r3, [r7, #16]
  return result;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e003      	b.n	8003782 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2103      	movs	r1, #3
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	61fb      	str	r3, [r7, #28]
  return result;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	60da      	str	r2, [r3, #12]
}
 80037be:	bf00      	nop
 80037c0:	372c      	adds	r7, #44	@ 0x2c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_GPIO_SetAFPin_0_7>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	b08b      	sub	sp, #44	@ 0x2c
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	613b      	str	r3, [r7, #16]
  return result;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	210f      	movs	r1, #15
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
  return result;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	431a      	orrs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	bf00      	nop
 800383a:	372c      	adds	r7, #44	@ 0x2c
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_GPIO_SetAFPin_8_15>:
{
 8003844:	b480      	push	{r7}
 8003846:	b08b      	sub	sp, #44	@ 0x2c
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	613b      	str	r3, [r7, #16]
  return result;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e003      	b.n	8003878 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	210f      	movs	r1, #15
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	61fb      	str	r3, [r7, #28]
  return result;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e003      	b.n	80038a8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038b6:	bf00      	nop
 80038b8:	372c      	adds	r7, #44	@ 0x2c
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b088      	sub	sp, #32
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	60fb      	str	r3, [r7, #12]
  return result;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <LL_GPIO_Init+0x26>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80038f2:	e048      	b.n	8003986 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d03a      	beq.n	8003980 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d003      	beq.n	800391a <LL_GPIO_Init+0x58>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d10e      	bne.n	8003938 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	461a      	mov	r2, r3
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fed7 	bl	80036d6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	461a      	mov	r2, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff feb7 	bl	80036a6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	461a      	mov	r2, r3
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff05 	bl	8003750 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d111      	bne.n	8003972 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2bff      	cmp	r3, #255	@ 0xff
 8003952:	d807      	bhi.n	8003964 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	461a      	mov	r2, r3
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff34 	bl	80037ca <LL_GPIO_SetAFPin_0_7>
 8003962:	e006      	b.n	8003972 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	461a      	mov	r2, r3
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff69 	bl	8003844 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe56 	bl	800362c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1af      	bne.n	80038f4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <LL_I2C_Enable>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_I2C_Disable>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 0201 	bic.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_I2C_ConfigFilters>:
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0219      	lsls	r1, r3, #8
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_I2C_SetOwnAddress1>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_I2C_EnableOwnAddress1>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_I2C_DisableOwnAddress1>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_I2C_SetTiming>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_I2C_SetMode>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_I2C_AcknowledgeNextData>:
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff65 	bl	80039be <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff6d 	bl	80039de <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ffb6 	bl	8003a7c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff44 	bl	800399e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa0 	bl	8003a5c <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6919      	ldr	r1, [r3, #16]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ff70 	bl	8003a0c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff81 	bl	8003a3c <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ffa9 	bl	8003a98 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffb6 	bl	8003abe <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4a07      	ldr	r2, [pc, #28]	@ (8003b8c <LL_InitTick+0x30>)
 8003b70:	3b01      	subs	r3, #1
 8003b72:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <LL_InitTick+0x30>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7a:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <LL_InitTick+0x30>)
 8003b7c:	2205      	movs	r2, #5
 8003b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003b98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ffdd 	bl	8003b5c <LL_InitTick>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <LL_mDelay+0x4c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003bbe:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d00c      	beq.n	8003be2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8003bce:	e008      	b.n	8003be2 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003bd0:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <LL_mDelay+0x4c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f3      	bne.n	8003bd0 <LL_mDelay+0x24>
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e010 	.word	0xe000e010

08003bfc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <LL_SetSystemCoreClock+0x1c>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6013      	str	r3, [r2, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000024 	.word	0x20000024

08003c1c <__cvt>:
 8003c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	ec57 6b10 	vmov	r6, r7, d0
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	460c      	mov	r4, r1
 8003c28:	4619      	mov	r1, r3
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	bfbb      	ittet	lt
 8003c2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c32:	461f      	movlt	r7, r3
 8003c34:	2300      	movge	r3, #0
 8003c36:	232d      	movlt	r3, #45	@ 0x2d
 8003c38:	700b      	strb	r3, [r1, #0]
 8003c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c40:	4691      	mov	r9, r2
 8003c42:	f023 0820 	bic.w	r8, r3, #32
 8003c46:	bfbc      	itt	lt
 8003c48:	4632      	movlt	r2, r6
 8003c4a:	4616      	movlt	r6, r2
 8003c4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c50:	d005      	beq.n	8003c5e <__cvt+0x42>
 8003c52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c56:	d100      	bne.n	8003c5a <__cvt+0x3e>
 8003c58:	3401      	adds	r4, #1
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	e000      	b.n	8003c60 <__cvt+0x44>
 8003c5e:	2103      	movs	r1, #3
 8003c60:	ab03      	add	r3, sp, #12
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	ab02      	add	r3, sp, #8
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	ec47 6b10 	vmov	d0, r6, r7
 8003c6c:	4653      	mov	r3, sl
 8003c6e:	4622      	mov	r2, r4
 8003c70:	f000 fe5a 	bl	8004928 <_dtoa_r>
 8003c74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c78:	4605      	mov	r5, r0
 8003c7a:	d119      	bne.n	8003cb0 <__cvt+0x94>
 8003c7c:	f019 0f01 	tst.w	r9, #1
 8003c80:	d00e      	beq.n	8003ca0 <__cvt+0x84>
 8003c82:	eb00 0904 	add.w	r9, r0, r4
 8003c86:	2200      	movs	r2, #0
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	f7fc ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c92:	b108      	cbz	r0, 8003c98 <__cvt+0x7c>
 8003c94:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c98:	2230      	movs	r2, #48	@ 0x30
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	454b      	cmp	r3, r9
 8003c9e:	d31e      	bcc.n	8003cde <__cvt+0xc2>
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ca4:	1b5b      	subs	r3, r3, r5
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	b004      	add	sp, #16
 8003cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cb4:	eb00 0904 	add.w	r9, r0, r4
 8003cb8:	d1e5      	bne.n	8003c86 <__cvt+0x6a>
 8003cba:	7803      	ldrb	r3, [r0, #0]
 8003cbc:	2b30      	cmp	r3, #48	@ 0x30
 8003cbe:	d10a      	bne.n	8003cd6 <__cvt+0xba>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	4639      	mov	r1, r7
 8003cc8:	f7fc fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ccc:	b918      	cbnz	r0, 8003cd6 <__cvt+0xba>
 8003cce:	f1c4 0401 	rsb	r4, r4, #1
 8003cd2:	f8ca 4000 	str.w	r4, [sl]
 8003cd6:	f8da 3000 	ldr.w	r3, [sl]
 8003cda:	4499      	add	r9, r3
 8003cdc:	e7d3      	b.n	8003c86 <__cvt+0x6a>
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	9103      	str	r1, [sp, #12]
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e7d9      	b.n	8003c9a <__cvt+0x7e>

08003ce6 <__exponent>:
 8003ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	bfba      	itte	lt
 8003cec:	4249      	neglt	r1, r1
 8003cee:	232d      	movlt	r3, #45	@ 0x2d
 8003cf0:	232b      	movge	r3, #43	@ 0x2b
 8003cf2:	2909      	cmp	r1, #9
 8003cf4:	7002      	strb	r2, [r0, #0]
 8003cf6:	7043      	strb	r3, [r0, #1]
 8003cf8:	dd29      	ble.n	8003d4e <__exponent+0x68>
 8003cfa:	f10d 0307 	add.w	r3, sp, #7
 8003cfe:	461d      	mov	r5, r3
 8003d00:	270a      	movs	r7, #10
 8003d02:	461a      	mov	r2, r3
 8003d04:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d08:	fb07 1416 	mls	r4, r7, r6, r1
 8003d0c:	3430      	adds	r4, #48	@ 0x30
 8003d0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d12:	460c      	mov	r4, r1
 8003d14:	2c63      	cmp	r4, #99	@ 0x63
 8003d16:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	dcf1      	bgt.n	8003d02 <__exponent+0x1c>
 8003d1e:	3130      	adds	r1, #48	@ 0x30
 8003d20:	1e94      	subs	r4, r2, #2
 8003d22:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d26:	1c41      	adds	r1, r0, #1
 8003d28:	4623      	mov	r3, r4
 8003d2a:	42ab      	cmp	r3, r5
 8003d2c:	d30a      	bcc.n	8003d44 <__exponent+0x5e>
 8003d2e:	f10d 0309 	add.w	r3, sp, #9
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	bf88      	it	hi
 8003d38:	2300      	movhi	r3, #0
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	4403      	add	r3, r0
 8003d3e:	1a18      	subs	r0, r3, r0
 8003d40:	b003      	add	sp, #12
 8003d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d44:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d48:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d4c:	e7ed      	b.n	8003d2a <__exponent+0x44>
 8003d4e:	2330      	movs	r3, #48	@ 0x30
 8003d50:	3130      	adds	r1, #48	@ 0x30
 8003d52:	7083      	strb	r3, [r0, #2]
 8003d54:	70c1      	strb	r1, [r0, #3]
 8003d56:	1d03      	adds	r3, r0, #4
 8003d58:	e7f1      	b.n	8003d3e <__exponent+0x58>
	...

08003d5c <_printf_float>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	b08d      	sub	sp, #52	@ 0x34
 8003d62:	460c      	mov	r4, r1
 8003d64:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d68:	4616      	mov	r6, r2
 8003d6a:	461f      	mov	r7, r3
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	f000 fcdb 	bl	8004728 <_localeconv_r>
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fa7a 	bl	8000270 <strlen>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d80:	f8d8 3000 	ldr.w	r3, [r8]
 8003d84:	9005      	str	r0, [sp, #20]
 8003d86:	3307      	adds	r3, #7
 8003d88:	f023 0307 	bic.w	r3, r3, #7
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d94:	f8d4 b000 	ldr.w	fp, [r4]
 8003d98:	f8c8 2000 	str.w	r2, [r8]
 8003d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003da0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003da4:	9307      	str	r3, [sp, #28]
 8003da6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003daa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db2:	4b9c      	ldr	r3, [pc, #624]	@ (8004024 <_printf_float+0x2c8>)
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	f7fc feb8 	bl	8000b2c <__aeabi_dcmpun>
 8003dbc:	bb70      	cbnz	r0, 8003e1c <_printf_float+0xc0>
 8003dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dc2:	4b98      	ldr	r3, [pc, #608]	@ (8004024 <_printf_float+0x2c8>)
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	f7fc fe92 	bl	8000af0 <__aeabi_dcmple>
 8003dcc:	bb30      	cbnz	r0, 8003e1c <_printf_float+0xc0>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	f7fc fe81 	bl	8000adc <__aeabi_dcmplt>
 8003dda:	b110      	cbz	r0, 8003de2 <_printf_float+0x86>
 8003ddc:	232d      	movs	r3, #45	@ 0x2d
 8003dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de2:	4a91      	ldr	r2, [pc, #580]	@ (8004028 <_printf_float+0x2cc>)
 8003de4:	4b91      	ldr	r3, [pc, #580]	@ (800402c <_printf_float+0x2d0>)
 8003de6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dea:	bf94      	ite	ls
 8003dec:	4690      	movls	r8, r2
 8003dee:	4698      	movhi	r8, r3
 8003df0:	2303      	movs	r3, #3
 8003df2:	6123      	str	r3, [r4, #16]
 8003df4:	f02b 0304 	bic.w	r3, fp, #4
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	9700      	str	r7, [sp, #0]
 8003e00:	4633      	mov	r3, r6
 8003e02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f9d2 	bl	80041b0 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	f040 808d 	bne.w	8003f2c <_printf_float+0x1d0>
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	b00d      	add	sp, #52	@ 0x34
 8003e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	4640      	mov	r0, r8
 8003e22:	4649      	mov	r1, r9
 8003e24:	f7fc fe82 	bl	8000b2c <__aeabi_dcmpun>
 8003e28:	b140      	cbz	r0, 8003e3c <_printf_float+0xe0>
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bfbc      	itt	lt
 8003e30:	232d      	movlt	r3, #45	@ 0x2d
 8003e32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e36:	4a7e      	ldr	r2, [pc, #504]	@ (8004030 <_printf_float+0x2d4>)
 8003e38:	4b7e      	ldr	r3, [pc, #504]	@ (8004034 <_printf_float+0x2d8>)
 8003e3a:	e7d4      	b.n	8003de6 <_printf_float+0x8a>
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e42:	9206      	str	r2, [sp, #24]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	d13b      	bne.n	8003ec0 <_printf_float+0x164>
 8003e48:	2306      	movs	r3, #6
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e50:	2300      	movs	r3, #0
 8003e52:	6022      	str	r2, [r4, #0]
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e5c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	6861      	ldr	r1, [r4, #4]
 8003e62:	ec49 8b10 	vmov	d0, r8, r9
 8003e66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7ff fed6 	bl	8003c1c <__cvt>
 8003e70:	9b06      	ldr	r3, [sp, #24]
 8003e72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e74:	2b47      	cmp	r3, #71	@ 0x47
 8003e76:	4680      	mov	r8, r0
 8003e78:	d129      	bne.n	8003ece <_printf_float+0x172>
 8003e7a:	1cc8      	adds	r0, r1, #3
 8003e7c:	db02      	blt.n	8003e84 <_printf_float+0x128>
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	4299      	cmp	r1, r3
 8003e82:	dd41      	ble.n	8003f08 <_printf_float+0x1ac>
 8003e84:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e88:	fa5f fa8a 	uxtb.w	sl, sl
 8003e8c:	3901      	subs	r1, #1
 8003e8e:	4652      	mov	r2, sl
 8003e90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e94:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e96:	f7ff ff26 	bl	8003ce6 <__exponent>
 8003e9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e9c:	1813      	adds	r3, r2, r0
 8003e9e:	2a01      	cmp	r2, #1
 8003ea0:	4681      	mov	r9, r0
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	dc02      	bgt.n	8003eac <_printf_float+0x150>
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	07d2      	lsls	r2, r2, #31
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_float+0x154>
 8003eac:	3301      	adds	r3, #1
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0a2      	beq.n	8003dfe <_printf_float+0xa2>
 8003eb8:	232d      	movs	r3, #45	@ 0x2d
 8003eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ebe:	e79e      	b.n	8003dfe <_printf_float+0xa2>
 8003ec0:	9a06      	ldr	r2, [sp, #24]
 8003ec2:	2a47      	cmp	r2, #71	@ 0x47
 8003ec4:	d1c2      	bne.n	8003e4c <_printf_float+0xf0>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1c0      	bne.n	8003e4c <_printf_float+0xf0>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e7bd      	b.n	8003e4a <_printf_float+0xee>
 8003ece:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ed2:	d9db      	bls.n	8003e8c <_printf_float+0x130>
 8003ed4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ed8:	d118      	bne.n	8003f0c <_printf_float+0x1b0>
 8003eda:	2900      	cmp	r1, #0
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	dd0b      	ble.n	8003ef8 <_printf_float+0x19c>
 8003ee0:	6121      	str	r1, [r4, #16]
 8003ee2:	b913      	cbnz	r3, 8003eea <_printf_float+0x18e>
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	07d0      	lsls	r0, r2, #31
 8003ee8:	d502      	bpl.n	8003ef0 <_printf_float+0x194>
 8003eea:	3301      	adds	r3, #1
 8003eec:	440b      	add	r3, r1
 8003eee:	6123      	str	r3, [r4, #16]
 8003ef0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	e7db      	b.n	8003eb0 <_printf_float+0x154>
 8003ef8:	b913      	cbnz	r3, 8003f00 <_printf_float+0x1a4>
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	07d2      	lsls	r2, r2, #31
 8003efe:	d501      	bpl.n	8003f04 <_printf_float+0x1a8>
 8003f00:	3302      	adds	r3, #2
 8003f02:	e7f4      	b.n	8003eee <_printf_float+0x192>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e7f2      	b.n	8003eee <_printf_float+0x192>
 8003f08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	db05      	blt.n	8003f1e <_printf_float+0x1c2>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	6121      	str	r1, [r4, #16]
 8003f16:	07d8      	lsls	r0, r3, #31
 8003f18:	d5ea      	bpl.n	8003ef0 <_printf_float+0x194>
 8003f1a:	1c4b      	adds	r3, r1, #1
 8003f1c:	e7e7      	b.n	8003eee <_printf_float+0x192>
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	bfd4      	ite	le
 8003f22:	f1c1 0202 	rsble	r2, r1, #2
 8003f26:	2201      	movgt	r2, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	e7e0      	b.n	8003eee <_printf_float+0x192>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	055a      	lsls	r2, r3, #21
 8003f30:	d407      	bmi.n	8003f42 <_printf_float+0x1e6>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	4642      	mov	r2, r8
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d12b      	bne.n	8003f98 <_printf_float+0x23c>
 8003f40:	e767      	b.n	8003e12 <_printf_float+0xb6>
 8003f42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f46:	f240 80dd 	bls.w	8004104 <_printf_float+0x3a8>
 8003f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2300      	movs	r3, #0
 8003f52:	f7fc fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d033      	beq.n	8003fc2 <_printf_float+0x266>
 8003f5a:	4a37      	ldr	r2, [pc, #220]	@ (8004038 <_printf_float+0x2dc>)
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f af54 	beq.w	8003e12 <_printf_float+0xb6>
 8003f6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f6e:	4543      	cmp	r3, r8
 8003f70:	db02      	blt.n	8003f78 <_printf_float+0x21c>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	07d8      	lsls	r0, r3, #31
 8003f76:	d50f      	bpl.n	8003f98 <_printf_float+0x23c>
 8003f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	f43f af45 	beq.w	8003e12 <_printf_float+0xb6>
 8003f88:	f04f 0900 	mov.w	r9, #0
 8003f8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f90:	f104 0a1a 	add.w	sl, r4, #26
 8003f94:	45c8      	cmp	r8, r9
 8003f96:	dc09      	bgt.n	8003fac <_printf_float+0x250>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	079b      	lsls	r3, r3, #30
 8003f9c:	f100 8103 	bmi.w	80041a6 <_printf_float+0x44a>
 8003fa0:	68e0      	ldr	r0, [r4, #12]
 8003fa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fa4:	4298      	cmp	r0, r3
 8003fa6:	bfb8      	it	lt
 8003fa8:	4618      	movlt	r0, r3
 8003faa:	e734      	b.n	8003e16 <_printf_float+0xba>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4652      	mov	r2, sl
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f43f af2b 	beq.w	8003e12 <_printf_float+0xb6>
 8003fbc:	f109 0901 	add.w	r9, r9, #1
 8003fc0:	e7e8      	b.n	8003f94 <_printf_float+0x238>
 8003fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dc39      	bgt.n	800403c <_printf_float+0x2e0>
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004038 <_printf_float+0x2dc>)
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4628      	mov	r0, r5
 8003fd0:	47b8      	blx	r7
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	f43f af1d 	beq.w	8003e12 <_printf_float+0xb6>
 8003fd8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003fdc:	ea59 0303 	orrs.w	r3, r9, r3
 8003fe0:	d102      	bne.n	8003fe8 <_printf_float+0x28c>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	07d9      	lsls	r1, r3, #31
 8003fe6:	d5d7      	bpl.n	8003f98 <_printf_float+0x23c>
 8003fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b8      	blx	r7
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f43f af0d 	beq.w	8003e12 <_printf_float+0xb6>
 8003ff8:	f04f 0a00 	mov.w	sl, #0
 8003ffc:	f104 0b1a 	add.w	fp, r4, #26
 8004000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004002:	425b      	negs	r3, r3
 8004004:	4553      	cmp	r3, sl
 8004006:	dc01      	bgt.n	800400c <_printf_float+0x2b0>
 8004008:	464b      	mov	r3, r9
 800400a:	e793      	b.n	8003f34 <_printf_float+0x1d8>
 800400c:	2301      	movs	r3, #1
 800400e:	465a      	mov	r2, fp
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	f43f aefb 	beq.w	8003e12 <_printf_float+0xb6>
 800401c:	f10a 0a01 	add.w	sl, sl, #1
 8004020:	e7ee      	b.n	8004000 <_printf_float+0x2a4>
 8004022:	bf00      	nop
 8004024:	7fefffff 	.word	0x7fefffff
 8004028:	080077a4 	.word	0x080077a4
 800402c:	080077a8 	.word	0x080077a8
 8004030:	080077ac 	.word	0x080077ac
 8004034:	080077b0 	.word	0x080077b0
 8004038:	080077b4 	.word	0x080077b4
 800403c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800403e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004042:	4553      	cmp	r3, sl
 8004044:	bfa8      	it	ge
 8004046:	4653      	movge	r3, sl
 8004048:	2b00      	cmp	r3, #0
 800404a:	4699      	mov	r9, r3
 800404c:	dc36      	bgt.n	80040bc <_printf_float+0x360>
 800404e:	f04f 0b00 	mov.w	fp, #0
 8004052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004056:	f104 021a 	add.w	r2, r4, #26
 800405a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800405c:	9306      	str	r3, [sp, #24]
 800405e:	eba3 0309 	sub.w	r3, r3, r9
 8004062:	455b      	cmp	r3, fp
 8004064:	dc31      	bgt.n	80040ca <_printf_float+0x36e>
 8004066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004068:	459a      	cmp	sl, r3
 800406a:	dc3a      	bgt.n	80040e2 <_printf_float+0x386>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	07da      	lsls	r2, r3, #31
 8004070:	d437      	bmi.n	80040e2 <_printf_float+0x386>
 8004072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004074:	ebaa 0903 	sub.w	r9, sl, r3
 8004078:	9b06      	ldr	r3, [sp, #24]
 800407a:	ebaa 0303 	sub.w	r3, sl, r3
 800407e:	4599      	cmp	r9, r3
 8004080:	bfa8      	it	ge
 8004082:	4699      	movge	r9, r3
 8004084:	f1b9 0f00 	cmp.w	r9, #0
 8004088:	dc33      	bgt.n	80040f2 <_printf_float+0x396>
 800408a:	f04f 0800 	mov.w	r8, #0
 800408e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004092:	f104 0b1a 	add.w	fp, r4, #26
 8004096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004098:	ebaa 0303 	sub.w	r3, sl, r3
 800409c:	eba3 0309 	sub.w	r3, r3, r9
 80040a0:	4543      	cmp	r3, r8
 80040a2:	f77f af79 	ble.w	8003f98 <_printf_float+0x23c>
 80040a6:	2301      	movs	r3, #1
 80040a8:	465a      	mov	r2, fp
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b8      	blx	r7
 80040b0:	3001      	adds	r0, #1
 80040b2:	f43f aeae 	beq.w	8003e12 <_printf_float+0xb6>
 80040b6:	f108 0801 	add.w	r8, r8, #1
 80040ba:	e7ec      	b.n	8004096 <_printf_float+0x33a>
 80040bc:	4642      	mov	r2, r8
 80040be:	4631      	mov	r1, r6
 80040c0:	4628      	mov	r0, r5
 80040c2:	47b8      	blx	r7
 80040c4:	3001      	adds	r0, #1
 80040c6:	d1c2      	bne.n	800404e <_printf_float+0x2f2>
 80040c8:	e6a3      	b.n	8003e12 <_printf_float+0xb6>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4631      	mov	r1, r6
 80040ce:	4628      	mov	r0, r5
 80040d0:	9206      	str	r2, [sp, #24]
 80040d2:	47b8      	blx	r7
 80040d4:	3001      	adds	r0, #1
 80040d6:	f43f ae9c 	beq.w	8003e12 <_printf_float+0xb6>
 80040da:	9a06      	ldr	r2, [sp, #24]
 80040dc:	f10b 0b01 	add.w	fp, fp, #1
 80040e0:	e7bb      	b.n	800405a <_printf_float+0x2fe>
 80040e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040e6:	4631      	mov	r1, r6
 80040e8:	4628      	mov	r0, r5
 80040ea:	47b8      	blx	r7
 80040ec:	3001      	adds	r0, #1
 80040ee:	d1c0      	bne.n	8004072 <_printf_float+0x316>
 80040f0:	e68f      	b.n	8003e12 <_printf_float+0xb6>
 80040f2:	9a06      	ldr	r2, [sp, #24]
 80040f4:	464b      	mov	r3, r9
 80040f6:	4442      	add	r2, r8
 80040f8:	4631      	mov	r1, r6
 80040fa:	4628      	mov	r0, r5
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	d1c3      	bne.n	800408a <_printf_float+0x32e>
 8004102:	e686      	b.n	8003e12 <_printf_float+0xb6>
 8004104:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004108:	f1ba 0f01 	cmp.w	sl, #1
 800410c:	dc01      	bgt.n	8004112 <_printf_float+0x3b6>
 800410e:	07db      	lsls	r3, r3, #31
 8004110:	d536      	bpl.n	8004180 <_printf_float+0x424>
 8004112:	2301      	movs	r3, #1
 8004114:	4642      	mov	r2, r8
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	47b8      	blx	r7
 800411c:	3001      	adds	r0, #1
 800411e:	f43f ae78 	beq.w	8003e12 <_printf_float+0xb6>
 8004122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	f43f ae70 	beq.w	8003e12 <_printf_float+0xb6>
 8004132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800413e:	f7fc fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004142:	b9c0      	cbnz	r0, 8004176 <_printf_float+0x41a>
 8004144:	4653      	mov	r3, sl
 8004146:	f108 0201 	add.w	r2, r8, #1
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	d10c      	bne.n	800416e <_printf_float+0x412>
 8004154:	e65d      	b.n	8003e12 <_printf_float+0xb6>
 8004156:	2301      	movs	r3, #1
 8004158:	465a      	mov	r2, fp
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f ae56 	beq.w	8003e12 <_printf_float+0xb6>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	45d0      	cmp	r8, sl
 800416c:	dbf3      	blt.n	8004156 <_printf_float+0x3fa>
 800416e:	464b      	mov	r3, r9
 8004170:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004174:	e6df      	b.n	8003f36 <_printf_float+0x1da>
 8004176:	f04f 0800 	mov.w	r8, #0
 800417a:	f104 0b1a 	add.w	fp, r4, #26
 800417e:	e7f4      	b.n	800416a <_printf_float+0x40e>
 8004180:	2301      	movs	r3, #1
 8004182:	4642      	mov	r2, r8
 8004184:	e7e1      	b.n	800414a <_printf_float+0x3ee>
 8004186:	2301      	movs	r3, #1
 8004188:	464a      	mov	r2, r9
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	f43f ae3e 	beq.w	8003e12 <_printf_float+0xb6>
 8004196:	f108 0801 	add.w	r8, r8, #1
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	4543      	cmp	r3, r8
 80041a2:	dcf0      	bgt.n	8004186 <_printf_float+0x42a>
 80041a4:	e6fc      	b.n	8003fa0 <_printf_float+0x244>
 80041a6:	f04f 0800 	mov.w	r8, #0
 80041aa:	f104 0919 	add.w	r9, r4, #25
 80041ae:	e7f4      	b.n	800419a <_printf_float+0x43e>

080041b0 <_printf_common>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4616      	mov	r6, r2
 80041b6:	4698      	mov	r8, r3
 80041b8:	688a      	ldr	r2, [r1, #8]
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bfb8      	it	lt
 80041c4:	4613      	movlt	r3, r2
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041cc:	4607      	mov	r7, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	b10a      	cbz	r2, 80041d6 <_printf_common+0x26>
 80041d2:	3301      	adds	r3, #1
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	0699      	lsls	r1, r3, #26
 80041da:	bf42      	ittt	mi
 80041dc:	6833      	ldrmi	r3, [r6, #0]
 80041de:	3302      	addmi	r3, #2
 80041e0:	6033      	strmi	r3, [r6, #0]
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	f015 0506 	ands.w	r5, r5, #6
 80041e8:	d106      	bne.n	80041f8 <_printf_common+0x48>
 80041ea:	f104 0a19 	add.w	sl, r4, #25
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	6832      	ldr	r2, [r6, #0]
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dc26      	bgt.n	8004246 <_printf_common+0x96>
 80041f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	3b00      	subs	r3, #0
 8004200:	bf18      	it	ne
 8004202:	2301      	movne	r3, #1
 8004204:	0692      	lsls	r2, r2, #26
 8004206:	d42b      	bmi.n	8004260 <_printf_common+0xb0>
 8004208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800420c:	4641      	mov	r1, r8
 800420e:	4638      	mov	r0, r7
 8004210:	47c8      	blx	r9
 8004212:	3001      	adds	r0, #1
 8004214:	d01e      	beq.n	8004254 <_printf_common+0xa4>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	6922      	ldr	r2, [r4, #16]
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	2b04      	cmp	r3, #4
 8004220:	bf02      	ittt	eq
 8004222:	68e5      	ldreq	r5, [r4, #12]
 8004224:	6833      	ldreq	r3, [r6, #0]
 8004226:	1aed      	subeq	r5, r5, r3
 8004228:	68a3      	ldr	r3, [r4, #8]
 800422a:	bf0c      	ite	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	2500      	movne	r5, #0
 8004232:	4293      	cmp	r3, r2
 8004234:	bfc4      	itt	gt
 8004236:	1a9b      	subgt	r3, r3, r2
 8004238:	18ed      	addgt	r5, r5, r3
 800423a:	2600      	movs	r6, #0
 800423c:	341a      	adds	r4, #26
 800423e:	42b5      	cmp	r5, r6
 8004240:	d11a      	bne.n	8004278 <_printf_common+0xc8>
 8004242:	2000      	movs	r0, #0
 8004244:	e008      	b.n	8004258 <_printf_common+0xa8>
 8004246:	2301      	movs	r3, #1
 8004248:	4652      	mov	r2, sl
 800424a:	4641      	mov	r1, r8
 800424c:	4638      	mov	r0, r7
 800424e:	47c8      	blx	r9
 8004250:	3001      	adds	r0, #1
 8004252:	d103      	bne.n	800425c <_printf_common+0xac>
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	3501      	adds	r5, #1
 800425e:	e7c6      	b.n	80041ee <_printf_common+0x3e>
 8004260:	18e1      	adds	r1, r4, r3
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	2030      	movs	r0, #48	@ 0x30
 8004266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800426a:	4422      	add	r2, r4
 800426c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004274:	3302      	adds	r3, #2
 8004276:	e7c7      	b.n	8004208 <_printf_common+0x58>
 8004278:	2301      	movs	r3, #1
 800427a:	4622      	mov	r2, r4
 800427c:	4641      	mov	r1, r8
 800427e:	4638      	mov	r0, r7
 8004280:	47c8      	blx	r9
 8004282:	3001      	adds	r0, #1
 8004284:	d0e6      	beq.n	8004254 <_printf_common+0xa4>
 8004286:	3601      	adds	r6, #1
 8004288:	e7d9      	b.n	800423e <_printf_common+0x8e>
	...

0800428c <_printf_i>:
 800428c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	7e0f      	ldrb	r7, [r1, #24]
 8004292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004294:	2f78      	cmp	r7, #120	@ 0x78
 8004296:	4691      	mov	r9, r2
 8004298:	4680      	mov	r8, r0
 800429a:	460c      	mov	r4, r1
 800429c:	469a      	mov	sl, r3
 800429e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042a2:	d807      	bhi.n	80042b4 <_printf_i+0x28>
 80042a4:	2f62      	cmp	r7, #98	@ 0x62
 80042a6:	d80a      	bhi.n	80042be <_printf_i+0x32>
 80042a8:	2f00      	cmp	r7, #0
 80042aa:	f000 80d2 	beq.w	8004452 <_printf_i+0x1c6>
 80042ae:	2f58      	cmp	r7, #88	@ 0x58
 80042b0:	f000 80b9 	beq.w	8004426 <_printf_i+0x19a>
 80042b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042bc:	e03a      	b.n	8004334 <_printf_i+0xa8>
 80042be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042c2:	2b15      	cmp	r3, #21
 80042c4:	d8f6      	bhi.n	80042b4 <_printf_i+0x28>
 80042c6:	a101      	add	r1, pc, #4	@ (adr r1, 80042cc <_printf_i+0x40>)
 80042c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004339 	.word	0x08004339
 80042d4:	080042b5 	.word	0x080042b5
 80042d8:	080042b5 	.word	0x080042b5
 80042dc:	080042b5 	.word	0x080042b5
 80042e0:	080042b5 	.word	0x080042b5
 80042e4:	08004339 	.word	0x08004339
 80042e8:	080042b5 	.word	0x080042b5
 80042ec:	080042b5 	.word	0x080042b5
 80042f0:	080042b5 	.word	0x080042b5
 80042f4:	080042b5 	.word	0x080042b5
 80042f8:	08004439 	.word	0x08004439
 80042fc:	08004363 	.word	0x08004363
 8004300:	080043f3 	.word	0x080043f3
 8004304:	080042b5 	.word	0x080042b5
 8004308:	080042b5 	.word	0x080042b5
 800430c:	0800445b 	.word	0x0800445b
 8004310:	080042b5 	.word	0x080042b5
 8004314:	08004363 	.word	0x08004363
 8004318:	080042b5 	.word	0x080042b5
 800431c:	080042b5 	.word	0x080042b5
 8004320:	080043fb 	.word	0x080043fb
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6032      	str	r2, [r6, #0]
 800432c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004334:	2301      	movs	r3, #1
 8004336:	e09d      	b.n	8004474 <_printf_i+0x1e8>
 8004338:	6833      	ldr	r3, [r6, #0]
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	6031      	str	r1, [r6, #0]
 8004340:	0606      	lsls	r6, r0, #24
 8004342:	d501      	bpl.n	8004348 <_printf_i+0xbc>
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	e003      	b.n	8004350 <_printf_i+0xc4>
 8004348:	0645      	lsls	r5, r0, #25
 800434a:	d5fb      	bpl.n	8004344 <_printf_i+0xb8>
 800434c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004350:	2d00      	cmp	r5, #0
 8004352:	da03      	bge.n	800435c <_printf_i+0xd0>
 8004354:	232d      	movs	r3, #45	@ 0x2d
 8004356:	426d      	negs	r5, r5
 8004358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800435c:	4859      	ldr	r0, [pc, #356]	@ (80044c4 <_printf_i+0x238>)
 800435e:	230a      	movs	r3, #10
 8004360:	e011      	b.n	8004386 <_printf_i+0xfa>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	6833      	ldr	r3, [r6, #0]
 8004366:	0608      	lsls	r0, r1, #24
 8004368:	f853 5b04 	ldr.w	r5, [r3], #4
 800436c:	d402      	bmi.n	8004374 <_printf_i+0xe8>
 800436e:	0649      	lsls	r1, r1, #25
 8004370:	bf48      	it	mi
 8004372:	b2ad      	uxthmi	r5, r5
 8004374:	2f6f      	cmp	r7, #111	@ 0x6f
 8004376:	4853      	ldr	r0, [pc, #332]	@ (80044c4 <_printf_i+0x238>)
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	bf14      	ite	ne
 800437c:	230a      	movne	r3, #10
 800437e:	2308      	moveq	r3, #8
 8004380:	2100      	movs	r1, #0
 8004382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004386:	6866      	ldr	r6, [r4, #4]
 8004388:	60a6      	str	r6, [r4, #8]
 800438a:	2e00      	cmp	r6, #0
 800438c:	bfa2      	ittt	ge
 800438e:	6821      	ldrge	r1, [r4, #0]
 8004390:	f021 0104 	bicge.w	r1, r1, #4
 8004394:	6021      	strge	r1, [r4, #0]
 8004396:	b90d      	cbnz	r5, 800439c <_printf_i+0x110>
 8004398:	2e00      	cmp	r6, #0
 800439a:	d04b      	beq.n	8004434 <_printf_i+0x1a8>
 800439c:	4616      	mov	r6, r2
 800439e:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a2:	fb03 5711 	mls	r7, r3, r1, r5
 80043a6:	5dc7      	ldrb	r7, [r0, r7]
 80043a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ac:	462f      	mov	r7, r5
 80043ae:	42bb      	cmp	r3, r7
 80043b0:	460d      	mov	r5, r1
 80043b2:	d9f4      	bls.n	800439e <_printf_i+0x112>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d10b      	bne.n	80043d0 <_printf_i+0x144>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07df      	lsls	r7, r3, #31
 80043bc:	d508      	bpl.n	80043d0 <_printf_i+0x144>
 80043be:	6923      	ldr	r3, [r4, #16]
 80043c0:	6861      	ldr	r1, [r4, #4]
 80043c2:	4299      	cmp	r1, r3
 80043c4:	bfde      	ittt	le
 80043c6:	2330      	movle	r3, #48	@ 0x30
 80043c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043d0:	1b92      	subs	r2, r2, r6
 80043d2:	6122      	str	r2, [r4, #16]
 80043d4:	f8cd a000 	str.w	sl, [sp]
 80043d8:	464b      	mov	r3, r9
 80043da:	aa03      	add	r2, sp, #12
 80043dc:	4621      	mov	r1, r4
 80043de:	4640      	mov	r0, r8
 80043e0:	f7ff fee6 	bl	80041b0 <_printf_common>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d14a      	bne.n	800447e <_printf_i+0x1f2>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	b004      	add	sp, #16
 80043ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f043 0320 	orr.w	r3, r3, #32
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	4833      	ldr	r0, [pc, #204]	@ (80044c8 <_printf_i+0x23c>)
 80043fc:	2778      	movs	r7, #120	@ 0x78
 80043fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6831      	ldr	r1, [r6, #0]
 8004406:	061f      	lsls	r7, r3, #24
 8004408:	f851 5b04 	ldr.w	r5, [r1], #4
 800440c:	d402      	bmi.n	8004414 <_printf_i+0x188>
 800440e:	065f      	lsls	r7, r3, #25
 8004410:	bf48      	it	mi
 8004412:	b2ad      	uxthmi	r5, r5
 8004414:	6031      	str	r1, [r6, #0]
 8004416:	07d9      	lsls	r1, r3, #31
 8004418:	bf44      	itt	mi
 800441a:	f043 0320 	orrmi.w	r3, r3, #32
 800441e:	6023      	strmi	r3, [r4, #0]
 8004420:	b11d      	cbz	r5, 800442a <_printf_i+0x19e>
 8004422:	2310      	movs	r3, #16
 8004424:	e7ac      	b.n	8004380 <_printf_i+0xf4>
 8004426:	4827      	ldr	r0, [pc, #156]	@ (80044c4 <_printf_i+0x238>)
 8004428:	e7e9      	b.n	80043fe <_printf_i+0x172>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	f023 0320 	bic.w	r3, r3, #32
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	e7f6      	b.n	8004422 <_printf_i+0x196>
 8004434:	4616      	mov	r6, r2
 8004436:	e7bd      	b.n	80043b4 <_printf_i+0x128>
 8004438:	6833      	ldr	r3, [r6, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	6961      	ldr	r1, [r4, #20]
 800443e:	1d18      	adds	r0, r3, #4
 8004440:	6030      	str	r0, [r6, #0]
 8004442:	062e      	lsls	r6, r5, #24
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	d501      	bpl.n	800444c <_printf_i+0x1c0>
 8004448:	6019      	str	r1, [r3, #0]
 800444a:	e002      	b.n	8004452 <_printf_i+0x1c6>
 800444c:	0668      	lsls	r0, r5, #25
 800444e:	d5fb      	bpl.n	8004448 <_printf_i+0x1bc>
 8004450:	8019      	strh	r1, [r3, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	4616      	mov	r6, r2
 8004458:	e7bc      	b.n	80043d4 <_printf_i+0x148>
 800445a:	6833      	ldr	r3, [r6, #0]
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	6032      	str	r2, [r6, #0]
 8004460:	681e      	ldr	r6, [r3, #0]
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	2100      	movs	r1, #0
 8004466:	4630      	mov	r0, r6
 8004468:	f7fb feb2 	bl	80001d0 <memchr>
 800446c:	b108      	cbz	r0, 8004472 <_printf_i+0x1e6>
 800446e:	1b80      	subs	r0, r0, r6
 8004470:	6060      	str	r0, [r4, #4]
 8004472:	6863      	ldr	r3, [r4, #4]
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	2300      	movs	r3, #0
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800447c:	e7aa      	b.n	80043d4 <_printf_i+0x148>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	4632      	mov	r2, r6
 8004482:	4649      	mov	r1, r9
 8004484:	4640      	mov	r0, r8
 8004486:	47d0      	blx	sl
 8004488:	3001      	adds	r0, #1
 800448a:	d0ad      	beq.n	80043e8 <_printf_i+0x15c>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	079b      	lsls	r3, r3, #30
 8004490:	d413      	bmi.n	80044ba <_printf_i+0x22e>
 8004492:	68e0      	ldr	r0, [r4, #12]
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	4298      	cmp	r0, r3
 8004498:	bfb8      	it	lt
 800449a:	4618      	movlt	r0, r3
 800449c:	e7a6      	b.n	80043ec <_printf_i+0x160>
 800449e:	2301      	movs	r3, #1
 80044a0:	4632      	mov	r2, r6
 80044a2:	4649      	mov	r1, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	47d0      	blx	sl
 80044a8:	3001      	adds	r0, #1
 80044aa:	d09d      	beq.n	80043e8 <_printf_i+0x15c>
 80044ac:	3501      	adds	r5, #1
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	9903      	ldr	r1, [sp, #12]
 80044b2:	1a5b      	subs	r3, r3, r1
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	dcf2      	bgt.n	800449e <_printf_i+0x212>
 80044b8:	e7eb      	b.n	8004492 <_printf_i+0x206>
 80044ba:	2500      	movs	r5, #0
 80044bc:	f104 0619 	add.w	r6, r4, #25
 80044c0:	e7f5      	b.n	80044ae <_printf_i+0x222>
 80044c2:	bf00      	nop
 80044c4:	080077b6 	.word	0x080077b6
 80044c8:	080077c7 	.word	0x080077c7

080044cc <std>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	e9c0 3300 	strd	r3, r3, [r0]
 80044d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044da:	6083      	str	r3, [r0, #8]
 80044dc:	8181      	strh	r1, [r0, #12]
 80044de:	6643      	str	r3, [r0, #100]	@ 0x64
 80044e0:	81c2      	strh	r2, [r0, #14]
 80044e2:	6183      	str	r3, [r0, #24]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	305c      	adds	r0, #92	@ 0x5c
 80044ea:	f000 f914 	bl	8004716 <memset>
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <std+0x58>)
 80044f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <std+0x5c>)
 80044f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <std+0x60>)
 80044f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <std+0x64>)
 80044fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <std+0x68>)
 8004500:	6224      	str	r4, [r4, #32]
 8004502:	429c      	cmp	r4, r3
 8004504:	d006      	beq.n	8004514 <std+0x48>
 8004506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800450a:	4294      	cmp	r4, r2
 800450c:	d002      	beq.n	8004514 <std+0x48>
 800450e:	33d0      	adds	r3, #208	@ 0xd0
 8004510:	429c      	cmp	r4, r3
 8004512:	d105      	bne.n	8004520 <std+0x54>
 8004514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f000 b978 	b.w	8004810 <__retarget_lock_init_recursive>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	bf00      	nop
 8004524:	08004691 	.word	0x08004691
 8004528:	080046b3 	.word	0x080046b3
 800452c:	080046eb 	.word	0x080046eb
 8004530:	0800470f 	.word	0x0800470f
 8004534:	2000058c 	.word	0x2000058c

08004538 <stdio_exit_handler>:
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <stdio_exit_handler+0xc>)
 800453a:	4903      	ldr	r1, [pc, #12]	@ (8004548 <stdio_exit_handler+0x10>)
 800453c:	4803      	ldr	r0, [pc, #12]	@ (800454c <stdio_exit_handler+0x14>)
 800453e:	f000 b869 	b.w	8004614 <_fwalk_sglue>
 8004542:	bf00      	nop
 8004544:	20000028 	.word	0x20000028
 8004548:	0800616d 	.word	0x0800616d
 800454c:	20000038 	.word	0x20000038

08004550 <cleanup_stdio>:
 8004550:	6841      	ldr	r1, [r0, #4]
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <cleanup_stdio+0x34>)
 8004554:	4299      	cmp	r1, r3
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
 800455a:	d001      	beq.n	8004560 <cleanup_stdio+0x10>
 800455c:	f001 fe06 	bl	800616c <_fflush_r>
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <cleanup_stdio+0x38>)
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <cleanup_stdio+0x1e>
 8004568:	4620      	mov	r0, r4
 800456a:	f001 fdff 	bl	800616c <_fflush_r>
 800456e:	68e1      	ldr	r1, [r4, #12]
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <cleanup_stdio+0x3c>)
 8004572:	4299      	cmp	r1, r3
 8004574:	d004      	beq.n	8004580 <cleanup_stdio+0x30>
 8004576:	4620      	mov	r0, r4
 8004578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457c:	f001 bdf6 	b.w	800616c <_fflush_r>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	2000058c 	.word	0x2000058c
 8004588:	200005f4 	.word	0x200005f4
 800458c:	2000065c 	.word	0x2000065c

08004590 <global_stdio_init.part.0>:
 8004590:	b510      	push	{r4, lr}
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <global_stdio_init.part.0+0x30>)
 8004594:	4c0b      	ldr	r4, [pc, #44]	@ (80045c4 <global_stdio_init.part.0+0x34>)
 8004596:	4a0c      	ldr	r2, [pc, #48]	@ (80045c8 <global_stdio_init.part.0+0x38>)
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4620      	mov	r0, r4
 800459c:	2200      	movs	r2, #0
 800459e:	2104      	movs	r1, #4
 80045a0:	f7ff ff94 	bl	80044cc <std>
 80045a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045a8:	2201      	movs	r2, #1
 80045aa:	2109      	movs	r1, #9
 80045ac:	f7ff ff8e 	bl	80044cc <std>
 80045b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045b4:	2202      	movs	r2, #2
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ba:	2112      	movs	r1, #18
 80045bc:	f7ff bf86 	b.w	80044cc <std>
 80045c0:	200006c4 	.word	0x200006c4
 80045c4:	2000058c 	.word	0x2000058c
 80045c8:	08004539 	.word	0x08004539

080045cc <__sfp_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	@ (80045d4 <__sfp_lock_acquire+0x8>)
 80045ce:	f000 b920 	b.w	8004812 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200006cd 	.word	0x200006cd

080045d8 <__sfp_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__sfp_lock_release+0x8>)
 80045da:	f000 b91b 	b.w	8004814 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200006cd 	.word	0x200006cd

080045e4 <__sinit>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	f7ff fff0 	bl	80045cc <__sfp_lock_acquire>
 80045ec:	6a23      	ldr	r3, [r4, #32]
 80045ee:	b11b      	cbz	r3, 80045f8 <__sinit+0x14>
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f7ff bff0 	b.w	80045d8 <__sfp_lock_release>
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__sinit+0x28>)
 80045fa:	6223      	str	r3, [r4, #32]
 80045fc:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <__sinit+0x2c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f5      	bne.n	80045f0 <__sinit+0xc>
 8004604:	f7ff ffc4 	bl	8004590 <global_stdio_init.part.0>
 8004608:	e7f2      	b.n	80045f0 <__sinit+0xc>
 800460a:	bf00      	nop
 800460c:	08004551 	.word	0x08004551
 8004610:	200006c4 	.word	0x200006c4

08004614 <_fwalk_sglue>:
 8004614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004618:	4607      	mov	r7, r0
 800461a:	4688      	mov	r8, r1
 800461c:	4614      	mov	r4, r2
 800461e:	2600      	movs	r6, #0
 8004620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004624:	f1b9 0901 	subs.w	r9, r9, #1
 8004628:	d505      	bpl.n	8004636 <_fwalk_sglue+0x22>
 800462a:	6824      	ldr	r4, [r4, #0]
 800462c:	2c00      	cmp	r4, #0
 800462e:	d1f7      	bne.n	8004620 <_fwalk_sglue+0xc>
 8004630:	4630      	mov	r0, r6
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d907      	bls.n	800464c <_fwalk_sglue+0x38>
 800463c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004640:	3301      	adds	r3, #1
 8004642:	d003      	beq.n	800464c <_fwalk_sglue+0x38>
 8004644:	4629      	mov	r1, r5
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	4306      	orrs	r6, r0
 800464c:	3568      	adds	r5, #104	@ 0x68
 800464e:	e7e9      	b.n	8004624 <_fwalk_sglue+0x10>

08004650 <siprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b500      	push	{lr}
 8004654:	b09c      	sub	sp, #112	@ 0x70
 8004656:	ab1d      	add	r3, sp, #116	@ 0x74
 8004658:	9002      	str	r0, [sp, #8]
 800465a:	9006      	str	r0, [sp, #24]
 800465c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004660:	4809      	ldr	r0, [pc, #36]	@ (8004688 <siprintf+0x38>)
 8004662:	9107      	str	r1, [sp, #28]
 8004664:	9104      	str	r1, [sp, #16]
 8004666:	4909      	ldr	r1, [pc, #36]	@ (800468c <siprintf+0x3c>)
 8004668:	f853 2b04 	ldr.w	r2, [r3], #4
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	a902      	add	r1, sp, #8
 8004674:	f001 fbfa 	bl	8005e6c <_svfiprintf_r>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	b01c      	add	sp, #112	@ 0x70
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b003      	add	sp, #12
 8004686:	4770      	bx	lr
 8004688:	20000034 	.word	0x20000034
 800468c:	ffff0208 	.word	0xffff0208

08004690 <__sread>:
 8004690:	b510      	push	{r4, lr}
 8004692:	460c      	mov	r4, r1
 8004694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004698:	f000 f86c 	bl	8004774 <_read_r>
 800469c:	2800      	cmp	r0, #0
 800469e:	bfab      	itete	ge
 80046a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046a2:	89a3      	ldrhlt	r3, [r4, #12]
 80046a4:	181b      	addge	r3, r3, r0
 80046a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046aa:	bfac      	ite	ge
 80046ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046ae:	81a3      	strhlt	r3, [r4, #12]
 80046b0:	bd10      	pop	{r4, pc}

080046b2 <__swrite>:
 80046b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	461f      	mov	r7, r3
 80046b8:	898b      	ldrh	r3, [r1, #12]
 80046ba:	05db      	lsls	r3, r3, #23
 80046bc:	4605      	mov	r5, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4616      	mov	r6, r2
 80046c2:	d505      	bpl.n	80046d0 <__swrite+0x1e>
 80046c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c8:	2302      	movs	r3, #2
 80046ca:	2200      	movs	r2, #0
 80046cc:	f000 f840 	bl	8004750 <_lseek_r>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046da:	81a3      	strh	r3, [r4, #12]
 80046dc:	4632      	mov	r2, r6
 80046de:	463b      	mov	r3, r7
 80046e0:	4628      	mov	r0, r5
 80046e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046e6:	f000 b857 	b.w	8004798 <_write_r>

080046ea <__sseek>:
 80046ea:	b510      	push	{r4, lr}
 80046ec:	460c      	mov	r4, r1
 80046ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f2:	f000 f82d 	bl	8004750 <_lseek_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	bf15      	itete	ne
 80046fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004706:	81a3      	strheq	r3, [r4, #12]
 8004708:	bf18      	it	ne
 800470a:	81a3      	strhne	r3, [r4, #12]
 800470c:	bd10      	pop	{r4, pc}

0800470e <__sclose>:
 800470e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004712:	f000 b80d 	b.w	8004730 <_close_r>

08004716 <memset>:
 8004716:	4402      	add	r2, r0
 8004718:	4603      	mov	r3, r0
 800471a:	4293      	cmp	r3, r2
 800471c:	d100      	bne.n	8004720 <memset+0xa>
 800471e:	4770      	bx	lr
 8004720:	f803 1b01 	strb.w	r1, [r3], #1
 8004724:	e7f9      	b.n	800471a <memset+0x4>
	...

08004728 <_localeconv_r>:
 8004728:	4800      	ldr	r0, [pc, #0]	@ (800472c <_localeconv_r+0x4>)
 800472a:	4770      	bx	lr
 800472c:	20000174 	.word	0x20000174

08004730 <_close_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	@ (800474c <_close_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fe fc41 	bl	8002fc2 <_close>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_close_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_close_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200006c8 	.word	0x200006c8

08004750 <_lseek_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4d07      	ldr	r5, [pc, #28]	@ (8004770 <_lseek_r+0x20>)
 8004754:	4604      	mov	r4, r0
 8004756:	4608      	mov	r0, r1
 8004758:	4611      	mov	r1, r2
 800475a:	2200      	movs	r2, #0
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	f7fe fc56 	bl	8003010 <_lseek>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_lseek_r+0x1e>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_lseek_r+0x1e>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	200006c8 	.word	0x200006c8

08004774 <_read_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d07      	ldr	r5, [pc, #28]	@ (8004794 <_read_r+0x20>)
 8004778:	4604      	mov	r4, r0
 800477a:	4608      	mov	r0, r1
 800477c:	4611      	mov	r1, r2
 800477e:	2200      	movs	r2, #0
 8004780:	602a      	str	r2, [r5, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f7fe fbe4 	bl	8002f50 <_read>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_read_r+0x1e>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_read_r+0x1e>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	200006c8 	.word	0x200006c8

08004798 <_write_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d07      	ldr	r5, [pc, #28]	@ (80047b8 <_write_r+0x20>)
 800479c:	4604      	mov	r4, r0
 800479e:	4608      	mov	r0, r1
 80047a0:	4611      	mov	r1, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	602a      	str	r2, [r5, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f7fe fbef 	bl	8002f8a <_write>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_write_r+0x1e>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_write_r+0x1e>
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	200006c8 	.word	0x200006c8

080047bc <__errno>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	@ (80047c4 <__errno+0x8>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000034 	.word	0x20000034

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004800 <__libc_init_array+0x38>)
 80047cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047ce:	1b64      	subs	r4, r4, r5
 80047d0:	10a4      	asrs	r4, r4, #2
 80047d2:	2600      	movs	r6, #0
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004808 <__libc_init_array+0x40>)
 80047da:	4c0c      	ldr	r4, [pc, #48]	@ (800480c <__libc_init_array+0x44>)
 80047dc:	f002 fbf6 	bl	8006fcc <_init>
 80047e0:	1b64      	subs	r4, r4, r5
 80047e2:	10a4      	asrs	r4, r4, #2
 80047e4:	2600      	movs	r6, #0
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08007b20 	.word	0x08007b20
 8004804:	08007b20 	.word	0x08007b20
 8004808:	08007b20 	.word	0x08007b20
 800480c:	08007b24 	.word	0x08007b24

08004810 <__retarget_lock_init_recursive>:
 8004810:	4770      	bx	lr

08004812 <__retarget_lock_acquire_recursive>:
 8004812:	4770      	bx	lr

08004814 <__retarget_lock_release_recursive>:
 8004814:	4770      	bx	lr

08004816 <quorem>:
 8004816:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6903      	ldr	r3, [r0, #16]
 800481c:	690c      	ldr	r4, [r1, #16]
 800481e:	42a3      	cmp	r3, r4
 8004820:	4607      	mov	r7, r0
 8004822:	db7e      	blt.n	8004922 <quorem+0x10c>
 8004824:	3c01      	subs	r4, #1
 8004826:	f101 0814 	add.w	r8, r1, #20
 800482a:	00a3      	lsls	r3, r4, #2
 800482c:	f100 0514 	add.w	r5, r0, #20
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800483c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004840:	3301      	adds	r3, #1
 8004842:	429a      	cmp	r2, r3
 8004844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004848:	fbb2 f6f3 	udiv	r6, r2, r3
 800484c:	d32e      	bcc.n	80048ac <quorem+0x96>
 800484e:	f04f 0a00 	mov.w	sl, #0
 8004852:	46c4      	mov	ip, r8
 8004854:	46ae      	mov	lr, r5
 8004856:	46d3      	mov	fp, sl
 8004858:	f85c 3b04 	ldr.w	r3, [ip], #4
 800485c:	b298      	uxth	r0, r3
 800485e:	fb06 a000 	mla	r0, r6, r0, sl
 8004862:	0c02      	lsrs	r2, r0, #16
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	fb06 2303 	mla	r3, r6, r3, r2
 800486a:	f8de 2000 	ldr.w	r2, [lr]
 800486e:	b280      	uxth	r0, r0
 8004870:	b292      	uxth	r2, r2
 8004872:	1a12      	subs	r2, r2, r0
 8004874:	445a      	add	r2, fp
 8004876:	f8de 0000 	ldr.w	r0, [lr]
 800487a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800487e:	b29b      	uxth	r3, r3
 8004880:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004884:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004888:	b292      	uxth	r2, r2
 800488a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800488e:	45e1      	cmp	r9, ip
 8004890:	f84e 2b04 	str.w	r2, [lr], #4
 8004894:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004898:	d2de      	bcs.n	8004858 <quorem+0x42>
 800489a:	9b00      	ldr	r3, [sp, #0]
 800489c:	58eb      	ldr	r3, [r5, r3]
 800489e:	b92b      	cbnz	r3, 80048ac <quorem+0x96>
 80048a0:	9b01      	ldr	r3, [sp, #4]
 80048a2:	3b04      	subs	r3, #4
 80048a4:	429d      	cmp	r5, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	d32f      	bcc.n	800490a <quorem+0xf4>
 80048aa:	613c      	str	r4, [r7, #16]
 80048ac:	4638      	mov	r0, r7
 80048ae:	f001 f979 	bl	8005ba4 <__mcmp>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	db25      	blt.n	8004902 <quorem+0xec>
 80048b6:	4629      	mov	r1, r5
 80048b8:	2000      	movs	r0, #0
 80048ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80048be:	f8d1 c000 	ldr.w	ip, [r1]
 80048c2:	fa1f fe82 	uxth.w	lr, r2
 80048c6:	fa1f f38c 	uxth.w	r3, ip
 80048ca:	eba3 030e 	sub.w	r3, r3, lr
 80048ce:	4403      	add	r3, r0
 80048d0:	0c12      	lsrs	r2, r2, #16
 80048d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048da:	b29b      	uxth	r3, r3
 80048dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048e0:	45c1      	cmp	r9, r8
 80048e2:	f841 3b04 	str.w	r3, [r1], #4
 80048e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048ea:	d2e6      	bcs.n	80048ba <quorem+0xa4>
 80048ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048f4:	b922      	cbnz	r2, 8004900 <quorem+0xea>
 80048f6:	3b04      	subs	r3, #4
 80048f8:	429d      	cmp	r5, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	d30b      	bcc.n	8004916 <quorem+0x100>
 80048fe:	613c      	str	r4, [r7, #16]
 8004900:	3601      	adds	r6, #1
 8004902:	4630      	mov	r0, r6
 8004904:	b003      	add	sp, #12
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	3b04      	subs	r3, #4
 800490e:	2a00      	cmp	r2, #0
 8004910:	d1cb      	bne.n	80048aa <quorem+0x94>
 8004912:	3c01      	subs	r4, #1
 8004914:	e7c6      	b.n	80048a4 <quorem+0x8e>
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	3b04      	subs	r3, #4
 800491a:	2a00      	cmp	r2, #0
 800491c:	d1ef      	bne.n	80048fe <quorem+0xe8>
 800491e:	3c01      	subs	r4, #1
 8004920:	e7ea      	b.n	80048f8 <quorem+0xe2>
 8004922:	2000      	movs	r0, #0
 8004924:	e7ee      	b.n	8004904 <quorem+0xee>
	...

08004928 <_dtoa_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	69c7      	ldr	r7, [r0, #28]
 800492e:	b099      	sub	sp, #100	@ 0x64
 8004930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004934:	ec55 4b10 	vmov	r4, r5, d0
 8004938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800493a:	9109      	str	r1, [sp, #36]	@ 0x24
 800493c:	4683      	mov	fp, r0
 800493e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004942:	b97f      	cbnz	r7, 8004964 <_dtoa_r+0x3c>
 8004944:	2010      	movs	r0, #16
 8004946:	f000 fdfd 	bl	8005544 <malloc>
 800494a:	4602      	mov	r2, r0
 800494c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004950:	b920      	cbnz	r0, 800495c <_dtoa_r+0x34>
 8004952:	4ba7      	ldr	r3, [pc, #668]	@ (8004bf0 <_dtoa_r+0x2c8>)
 8004954:	21ef      	movs	r1, #239	@ 0xef
 8004956:	48a7      	ldr	r0, [pc, #668]	@ (8004bf4 <_dtoa_r+0x2cc>)
 8004958:	f001 fc68 	bl	800622c <__assert_func>
 800495c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004960:	6007      	str	r7, [r0, #0]
 8004962:	60c7      	str	r7, [r0, #12]
 8004964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	b159      	cbz	r1, 8004984 <_dtoa_r+0x5c>
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	604a      	str	r2, [r1, #4]
 8004970:	2301      	movs	r3, #1
 8004972:	4093      	lsls	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	4658      	mov	r0, fp
 8004978:	f000 feda 	bl	8005730 <_Bfree>
 800497c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	1e2b      	subs	r3, r5, #0
 8004986:	bfb9      	ittee	lt
 8004988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800498c:	9303      	strlt	r3, [sp, #12]
 800498e:	2300      	movge	r3, #0
 8004990:	6033      	strge	r3, [r6, #0]
 8004992:	9f03      	ldr	r7, [sp, #12]
 8004994:	4b98      	ldr	r3, [pc, #608]	@ (8004bf8 <_dtoa_r+0x2d0>)
 8004996:	bfbc      	itt	lt
 8004998:	2201      	movlt	r2, #1
 800499a:	6032      	strlt	r2, [r6, #0]
 800499c:	43bb      	bics	r3, r7
 800499e:	d112      	bne.n	80049c6 <_dtoa_r+0x9e>
 80049a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80049a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049ac:	4323      	orrs	r3, r4
 80049ae:	f000 854d 	beq.w	800544c <_dtoa_r+0xb24>
 80049b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004c0c <_dtoa_r+0x2e4>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 854f 	beq.w	800545c <_dtoa_r+0xb34>
 80049be:	f10a 0303 	add.w	r3, sl, #3
 80049c2:	f000 bd49 	b.w	8005458 <_dtoa_r+0xb30>
 80049c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	ec51 0b17 	vmov	r0, r1, d7
 80049d0:	2300      	movs	r3, #0
 80049d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80049d6:	f7fc f877 	bl	8000ac8 <__aeabi_dcmpeq>
 80049da:	4680      	mov	r8, r0
 80049dc:	b158      	cbz	r0, 80049f6 <_dtoa_r+0xce>
 80049de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80049e0:	2301      	movs	r3, #1
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049e6:	b113      	cbz	r3, 80049ee <_dtoa_r+0xc6>
 80049e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80049ea:	4b84      	ldr	r3, [pc, #528]	@ (8004bfc <_dtoa_r+0x2d4>)
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004c10 <_dtoa_r+0x2e8>
 80049f2:	f000 bd33 	b.w	800545c <_dtoa_r+0xb34>
 80049f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80049fa:	aa16      	add	r2, sp, #88	@ 0x58
 80049fc:	a917      	add	r1, sp, #92	@ 0x5c
 80049fe:	4658      	mov	r0, fp
 8004a00:	f001 f980 	bl	8005d04 <__d2b>
 8004a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004a08:	4681      	mov	r9, r0
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	d077      	beq.n	8004afe <_dtoa_r+0x1d6>
 8004a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a28:	4619      	mov	r1, r3
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4b74      	ldr	r3, [pc, #464]	@ (8004c00 <_dtoa_r+0x2d8>)
 8004a2e:	f7fb fc2b 	bl	8000288 <__aeabi_dsub>
 8004a32:	a369      	add	r3, pc, #420	@ (adr r3, 8004bd8 <_dtoa_r+0x2b0>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fdde 	bl	80005f8 <__aeabi_dmul>
 8004a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8004be0 <_dtoa_r+0x2b8>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb fc23 	bl	800028c <__adddf3>
 8004a46:	4604      	mov	r4, r0
 8004a48:	4630      	mov	r0, r6
 8004a4a:	460d      	mov	r5, r1
 8004a4c:	f7fb fd6a 	bl	8000524 <__aeabi_i2d>
 8004a50:	a365      	add	r3, pc, #404	@ (adr r3, 8004be8 <_dtoa_r+0x2c0>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fdcf 	bl	80005f8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7fb fc13 	bl	800028c <__adddf3>
 8004a66:	4604      	mov	r4, r0
 8004a68:	460d      	mov	r5, r1
 8004a6a:	f7fc f875 	bl	8000b58 <__aeabi_d2iz>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4607      	mov	r7, r0
 8004a72:	2300      	movs	r3, #0
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fc f830 	bl	8000adc <__aeabi_dcmplt>
 8004a7c:	b140      	cbz	r0, 8004a90 <_dtoa_r+0x168>
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f7fb fd50 	bl	8000524 <__aeabi_i2d>
 8004a84:	4622      	mov	r2, r4
 8004a86:	462b      	mov	r3, r5
 8004a88:	f7fc f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a8c:	b900      	cbnz	r0, 8004a90 <_dtoa_r+0x168>
 8004a8e:	3f01      	subs	r7, #1
 8004a90:	2f16      	cmp	r7, #22
 8004a92:	d851      	bhi.n	8004b38 <_dtoa_r+0x210>
 8004a94:	4b5b      	ldr	r3, [pc, #364]	@ (8004c04 <_dtoa_r+0x2dc>)
 8004a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004aa2:	f7fc f81b 	bl	8000adc <__aeabi_dcmplt>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d048      	beq.n	8004b3c <_dtoa_r+0x214>
 8004aaa:	3f01      	subs	r7, #1
 8004aac:	2300      	movs	r3, #0
 8004aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8004ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004ab2:	1b9b      	subs	r3, r3, r6
 8004ab4:	1e5a      	subs	r2, r3, #1
 8004ab6:	bf44      	itt	mi
 8004ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8004abc:	2300      	movmi	r3, #0
 8004abe:	9208      	str	r2, [sp, #32]
 8004ac0:	bf54      	ite	pl
 8004ac2:	f04f 0800 	movpl.w	r8, #0
 8004ac6:	9308      	strmi	r3, [sp, #32]
 8004ac8:	2f00      	cmp	r7, #0
 8004aca:	db39      	blt.n	8004b40 <_dtoa_r+0x218>
 8004acc:	9b08      	ldr	r3, [sp, #32]
 8004ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004ad0:	443b      	add	r3, r7
 8004ad2:	9308      	str	r3, [sp, #32]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d864      	bhi.n	8004ba8 <_dtoa_r+0x280>
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	bfc4      	itt	gt
 8004ae2:	3b04      	subgt	r3, #4
 8004ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8004aec:	bfcc      	ite	gt
 8004aee:	2400      	movgt	r4, #0
 8004af0:	2401      	movle	r4, #1
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d863      	bhi.n	8004bbe <_dtoa_r+0x296>
 8004af6:	e8df f003 	tbb	[pc, r3]
 8004afa:	372a      	.short	0x372a
 8004afc:	5535      	.short	0x5535
 8004afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004b02:	441e      	add	r6, r3
 8004b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	bfc1      	itttt	gt
 8004b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b10:	409f      	lslgt	r7, r3
 8004b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b1a:	bfd6      	itet	le
 8004b1c:	f1c3 0320 	rsble	r3, r3, #32
 8004b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8004b24:	fa04 f003 	lslle.w	r0, r4, r3
 8004b28:	f7fb fcec 	bl	8000504 <__aeabi_ui2d>
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b32:	3e01      	subs	r6, #1
 8004b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8004b36:	e777      	b.n	8004a28 <_dtoa_r+0x100>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7b8      	b.n	8004aae <_dtoa_r+0x186>
 8004b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004b3e:	e7b7      	b.n	8004ab0 <_dtoa_r+0x188>
 8004b40:	427b      	negs	r3, r7
 8004b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b44:	2300      	movs	r3, #0
 8004b46:	eba8 0807 	sub.w	r8, r8, r7
 8004b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b4c:	e7c4      	b.n	8004ad8 <_dtoa_r+0x1b0>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dc35      	bgt.n	8004bc4 <_dtoa_r+0x29c>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	9307      	str	r3, [sp, #28]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b62:	e00b      	b.n	8004b7c <_dtoa_r+0x254>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e7f3      	b.n	8004b50 <_dtoa_r+0x228>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	9307      	str	r3, [sp, #28]
 8004b78:	bfb8      	it	lt
 8004b7a:	2301      	movlt	r3, #1
 8004b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b80:	2100      	movs	r1, #0
 8004b82:	2204      	movs	r2, #4
 8004b84:	f102 0514 	add.w	r5, r2, #20
 8004b88:	429d      	cmp	r5, r3
 8004b8a:	d91f      	bls.n	8004bcc <_dtoa_r+0x2a4>
 8004b8c:	6041      	str	r1, [r0, #4]
 8004b8e:	4658      	mov	r0, fp
 8004b90:	f000 fd8e 	bl	80056b0 <_Balloc>
 8004b94:	4682      	mov	sl, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d13c      	bne.n	8004c14 <_dtoa_r+0x2ec>
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <_dtoa_r+0x2e0>)
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ba2:	e6d8      	b.n	8004956 <_dtoa_r+0x2e>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e7e0      	b.n	8004b6a <_dtoa_r+0x242>
 8004ba8:	2401      	movs	r4, #1
 8004baa:	2300      	movs	r3, #0
 8004bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2312      	movs	r3, #18
 8004bbc:	e7d0      	b.n	8004b60 <_dtoa_r+0x238>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bc2:	e7f5      	b.n	8004bb0 <_dtoa_r+0x288>
 8004bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	9307      	str	r3, [sp, #28]
 8004bca:	e7d7      	b.n	8004b7c <_dtoa_r+0x254>
 8004bcc:	3101      	adds	r1, #1
 8004bce:	0052      	lsls	r2, r2, #1
 8004bd0:	e7d8      	b.n	8004b84 <_dtoa_r+0x25c>
 8004bd2:	bf00      	nop
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	636f4361 	.word	0x636f4361
 8004bdc:	3fd287a7 	.word	0x3fd287a7
 8004be0:	8b60c8b3 	.word	0x8b60c8b3
 8004be4:	3fc68a28 	.word	0x3fc68a28
 8004be8:	509f79fb 	.word	0x509f79fb
 8004bec:	3fd34413 	.word	0x3fd34413
 8004bf0:	080077e5 	.word	0x080077e5
 8004bf4:	080077fc 	.word	0x080077fc
 8004bf8:	7ff00000 	.word	0x7ff00000
 8004bfc:	080077b5 	.word	0x080077b5
 8004c00:	3ff80000 	.word	0x3ff80000
 8004c04:	080078f8 	.word	0x080078f8
 8004c08:	08007854 	.word	0x08007854
 8004c0c:	080077e1 	.word	0x080077e1
 8004c10:	080077b4 	.word	0x080077b4
 8004c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c18:	6018      	str	r0, [r3, #0]
 8004c1a:	9b07      	ldr	r3, [sp, #28]
 8004c1c:	2b0e      	cmp	r3, #14
 8004c1e:	f200 80a4 	bhi.w	8004d6a <_dtoa_r+0x442>
 8004c22:	2c00      	cmp	r4, #0
 8004c24:	f000 80a1 	beq.w	8004d6a <_dtoa_r+0x442>
 8004c28:	2f00      	cmp	r7, #0
 8004c2a:	dd33      	ble.n	8004c94 <_dtoa_r+0x36c>
 8004c2c:	4bad      	ldr	r3, [pc, #692]	@ (8004ee4 <_dtoa_r+0x5bc>)
 8004c2e:	f007 020f 	and.w	r2, r7, #15
 8004c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c36:	ed93 7b00 	vldr	d7, [r3]
 8004c3a:	05f8      	lsls	r0, r7, #23
 8004c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c44:	d516      	bpl.n	8004c74 <_dtoa_r+0x34c>
 8004c46:	4ba8      	ldr	r3, [pc, #672]	@ (8004ee8 <_dtoa_r+0x5c0>)
 8004c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c50:	f7fb fdfc 	bl	800084c <__aeabi_ddiv>
 8004c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c58:	f004 040f 	and.w	r4, r4, #15
 8004c5c:	2603      	movs	r6, #3
 8004c5e:	4da2      	ldr	r5, [pc, #648]	@ (8004ee8 <_dtoa_r+0x5c0>)
 8004c60:	b954      	cbnz	r4, 8004c78 <_dtoa_r+0x350>
 8004c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6a:	f7fb fdef 	bl	800084c <__aeabi_ddiv>
 8004c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c72:	e028      	b.n	8004cc6 <_dtoa_r+0x39e>
 8004c74:	2602      	movs	r6, #2
 8004c76:	e7f2      	b.n	8004c5e <_dtoa_r+0x336>
 8004c78:	07e1      	lsls	r1, r4, #31
 8004c7a:	d508      	bpl.n	8004c8e <_dtoa_r+0x366>
 8004c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c84:	f7fb fcb8 	bl	80005f8 <__aeabi_dmul>
 8004c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	1064      	asrs	r4, r4, #1
 8004c90:	3508      	adds	r5, #8
 8004c92:	e7e5      	b.n	8004c60 <_dtoa_r+0x338>
 8004c94:	f000 80d2 	beq.w	8004e3c <_dtoa_r+0x514>
 8004c98:	427c      	negs	r4, r7
 8004c9a:	4b92      	ldr	r3, [pc, #584]	@ (8004ee4 <_dtoa_r+0x5bc>)
 8004c9c:	4d92      	ldr	r5, [pc, #584]	@ (8004ee8 <_dtoa_r+0x5c0>)
 8004c9e:	f004 020f 	and.w	r2, r4, #15
 8004ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cae:	f7fb fca3 	bl	80005f8 <__aeabi_dmul>
 8004cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb6:	1124      	asrs	r4, r4, #4
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2602      	movs	r6, #2
 8004cbc:	2c00      	cmp	r4, #0
 8004cbe:	f040 80b2 	bne.w	8004e26 <_dtoa_r+0x4fe>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1d3      	bne.n	8004c6e <_dtoa_r+0x346>
 8004cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80b7 	beq.w	8004e40 <_dtoa_r+0x518>
 8004cd2:	4b86      	ldr	r3, [pc, #536]	@ (8004eec <_dtoa_r+0x5c4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7fb feff 	bl	8000adc <__aeabi_dcmplt>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f000 80ae 	beq.w	8004e40 <_dtoa_r+0x518>
 8004ce4:	9b07      	ldr	r3, [sp, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80aa 	beq.w	8004e40 <_dtoa_r+0x518>
 8004cec:	9b00      	ldr	r3, [sp, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	dd37      	ble.n	8004d62 <_dtoa_r+0x43a>
 8004cf2:	1e7b      	subs	r3, r7, #1
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef0 <_dtoa_r+0x5c8>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7fb fc7b 	bl	80005f8 <__aeabi_dmul>
 8004d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d06:	9c00      	ldr	r4, [sp, #0]
 8004d08:	3601      	adds	r6, #1
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7fb fc0a 	bl	8000524 <__aeabi_i2d>
 8004d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d14:	f7fb fc70 	bl	80005f8 <__aeabi_dmul>
 8004d18:	4b76      	ldr	r3, [pc, #472]	@ (8004ef4 <_dtoa_r+0x5cc>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f7fb fab6 	bl	800028c <__adddf3>
 8004d20:	4605      	mov	r5, r0
 8004d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	f040 808d 	bne.w	8004e46 <_dtoa_r+0x51e>
 8004d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d30:	4b71      	ldr	r3, [pc, #452]	@ (8004ef8 <_dtoa_r+0x5d0>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	f7fb faa8 	bl	8000288 <__aeabi_dsub>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4633      	mov	r3, r6
 8004d44:	f7fb fee8 	bl	8000b18 <__aeabi_dcmpgt>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f040 828b 	bne.w	8005264 <_dtoa_r+0x93c>
 8004d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d52:	462a      	mov	r2, r5
 8004d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d58:	f7fb fec0 	bl	8000adc <__aeabi_dcmplt>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f040 8128 	bne.w	8004fb2 <_dtoa_r+0x68a>
 8004d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f2c0 815a 	blt.w	8005026 <_dtoa_r+0x6fe>
 8004d72:	2f0e      	cmp	r7, #14
 8004d74:	f300 8157 	bgt.w	8005026 <_dtoa_r+0x6fe>
 8004d78:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee4 <_dtoa_r+0x5bc>)
 8004d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d7e:	ed93 7b00 	vldr	d7, [r3]
 8004d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	ed8d 7b00 	vstr	d7, [sp]
 8004d8a:	da03      	bge.n	8004d94 <_dtoa_r+0x46c>
 8004d8c:	9b07      	ldr	r3, [sp, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f340 8101 	ble.w	8004f96 <_dtoa_r+0x66e>
 8004d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d98:	4656      	mov	r6, sl
 8004d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fd53 	bl	800084c <__aeabi_ddiv>
 8004da6:	f7fb fed7 	bl	8000b58 <__aeabi_d2iz>
 8004daa:	4680      	mov	r8, r0
 8004dac:	f7fb fbba 	bl	8000524 <__aeabi_i2d>
 8004db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db4:	f7fb fc20 	bl	80005f8 <__aeabi_dmul>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004dc4:	f7fb fa60 	bl	8000288 <__aeabi_dsub>
 8004dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8004dcc:	9d07      	ldr	r5, [sp, #28]
 8004dce:	eba6 040a 	sub.w	r4, r6, sl
 8004dd2:	42a5      	cmp	r5, r4
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	f040 8117 	bne.w	800500a <_dtoa_r+0x6e2>
 8004ddc:	f7fb fa56 	bl	800028c <__adddf3>
 8004de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	f7fb fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f040 80f9 	bne.w	8004fe4 <_dtoa_r+0x6bc>
 8004df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dfe:	b118      	cbz	r0, 8004e08 <_dtoa_r+0x4e0>
 8004e00:	f018 0f01 	tst.w	r8, #1
 8004e04:	f040 80ee 	bne.w	8004fe4 <_dtoa_r+0x6bc>
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4658      	mov	r0, fp
 8004e0c:	f000 fc90 	bl	8005730 <_Bfree>
 8004e10:	2300      	movs	r3, #0
 8004e12:	7033      	strb	r3, [r6, #0]
 8004e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e16:	3701      	adds	r7, #1
 8004e18:	601f      	str	r7, [r3, #0]
 8004e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 831d 	beq.w	800545c <_dtoa_r+0xb34>
 8004e22:	601e      	str	r6, [r3, #0]
 8004e24:	e31a      	b.n	800545c <_dtoa_r+0xb34>
 8004e26:	07e2      	lsls	r2, r4, #31
 8004e28:	d505      	bpl.n	8004e36 <_dtoa_r+0x50e>
 8004e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e2e:	f7fb fbe3 	bl	80005f8 <__aeabi_dmul>
 8004e32:	3601      	adds	r6, #1
 8004e34:	2301      	movs	r3, #1
 8004e36:	1064      	asrs	r4, r4, #1
 8004e38:	3508      	adds	r5, #8
 8004e3a:	e73f      	b.n	8004cbc <_dtoa_r+0x394>
 8004e3c:	2602      	movs	r6, #2
 8004e3e:	e742      	b.n	8004cc6 <_dtoa_r+0x39e>
 8004e40:	9c07      	ldr	r4, [sp, #28]
 8004e42:	9704      	str	r7, [sp, #16]
 8004e44:	e761      	b.n	8004d0a <_dtoa_r+0x3e2>
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <_dtoa_r+0x5bc>)
 8004e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e52:	4454      	add	r4, sl
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d053      	beq.n	8004f00 <_dtoa_r+0x5d8>
 8004e58:	4928      	ldr	r1, [pc, #160]	@ (8004efc <_dtoa_r+0x5d4>)
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7fb fcf6 	bl	800084c <__aeabi_ddiv>
 8004e60:	4633      	mov	r3, r6
 8004e62:	462a      	mov	r2, r5
 8004e64:	f7fb fa10 	bl	8000288 <__aeabi_dsub>
 8004e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e6c:	4656      	mov	r6, sl
 8004e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e72:	f7fb fe71 	bl	8000b58 <__aeabi_d2iz>
 8004e76:	4605      	mov	r5, r0
 8004e78:	f7fb fb54 	bl	8000524 <__aeabi_i2d>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e84:	f7fb fa00 	bl	8000288 <__aeabi_dsub>
 8004e88:	3530      	adds	r5, #48	@ 0x30
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e92:	f806 5b01 	strb.w	r5, [r6], #1
 8004e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e9a:	f7fb fe1f 	bl	8000adc <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d171      	bne.n	8004f86 <_dtoa_r+0x65e>
 8004ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ea6:	4911      	ldr	r1, [pc, #68]	@ (8004eec <_dtoa_r+0x5c4>)
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fb f9ed 	bl	8000288 <__aeabi_dsub>
 8004eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eb2:	f7fb fe13 	bl	8000adc <__aeabi_dcmplt>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f040 8095 	bne.w	8004fe6 <_dtoa_r+0x6be>
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	f43f af50 	beq.w	8004d62 <_dtoa_r+0x43a>
 8004ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <_dtoa_r+0x5c8>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f7fb fb95 	bl	80005f8 <__aeabi_dmul>
 8004ece:	4b08      	ldr	r3, [pc, #32]	@ (8004ef0 <_dtoa_r+0x5c8>)
 8004ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eda:	f7fb fb8d 	bl	80005f8 <__aeabi_dmul>
 8004ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee2:	e7c4      	b.n	8004e6e <_dtoa_r+0x546>
 8004ee4:	080078f8 	.word	0x080078f8
 8004ee8:	080078d0 	.word	0x080078d0
 8004eec:	3ff00000 	.word	0x3ff00000
 8004ef0:	40240000 	.word	0x40240000
 8004ef4:	401c0000 	.word	0x401c0000
 8004ef8:	40140000 	.word	0x40140000
 8004efc:	3fe00000 	.word	0x3fe00000
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	f7fb fb78 	bl	80005f8 <__aeabi_dmul>
 8004f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004f0e:	4656      	mov	r6, sl
 8004f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f14:	f7fb fe20 	bl	8000b58 <__aeabi_d2iz>
 8004f18:	4605      	mov	r5, r0
 8004f1a:	f7fb fb03 	bl	8000524 <__aeabi_i2d>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f26:	f7fb f9af 	bl	8000288 <__aeabi_dsub>
 8004f2a:	3530      	adds	r5, #48	@ 0x30
 8004f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	d124      	bne.n	8004f8a <_dtoa_r+0x662>
 8004f40:	4bac      	ldr	r3, [pc, #688]	@ (80051f4 <_dtoa_r+0x8cc>)
 8004f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f46:	f7fb f9a1 	bl	800028c <__adddf3>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f52:	f7fb fde1 	bl	8000b18 <__aeabi_dcmpgt>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d145      	bne.n	8004fe6 <_dtoa_r+0x6be>
 8004f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f5e:	49a5      	ldr	r1, [pc, #660]	@ (80051f4 <_dtoa_r+0x8cc>)
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fb f991 	bl	8000288 <__aeabi_dsub>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f6e:	f7fb fdb5 	bl	8000adc <__aeabi_dcmplt>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f43f aef5 	beq.w	8004d62 <_dtoa_r+0x43a>
 8004f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004f7a:	1e73      	subs	r3, r6, #1
 8004f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f82:	2b30      	cmp	r3, #48	@ 0x30
 8004f84:	d0f8      	beq.n	8004f78 <_dtoa_r+0x650>
 8004f86:	9f04      	ldr	r7, [sp, #16]
 8004f88:	e73e      	b.n	8004e08 <_dtoa_r+0x4e0>
 8004f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80051f8 <_dtoa_r+0x8d0>)
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f94:	e7bc      	b.n	8004f10 <_dtoa_r+0x5e8>
 8004f96:	d10c      	bne.n	8004fb2 <_dtoa_r+0x68a>
 8004f98:	4b98      	ldr	r3, [pc, #608]	@ (80051fc <_dtoa_r+0x8d4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa0:	f7fb fb2a 	bl	80005f8 <__aeabi_dmul>
 8004fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa8:	f7fb fdac 	bl	8000b04 <__aeabi_dcmpge>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f000 8157 	beq.w	8005260 <_dtoa_r+0x938>
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	4625      	mov	r5, r4
 8004fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	4656      	mov	r6, sl
 8004fbe:	2700      	movs	r7, #0
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4658      	mov	r0, fp
 8004fc4:	f000 fbb4 	bl	8005730 <_Bfree>
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	d0dc      	beq.n	8004f86 <_dtoa_r+0x65e>
 8004fcc:	b12f      	cbz	r7, 8004fda <_dtoa_r+0x6b2>
 8004fce:	42af      	cmp	r7, r5
 8004fd0:	d003      	beq.n	8004fda <_dtoa_r+0x6b2>
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	f000 fbab 	bl	8005730 <_Bfree>
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4658      	mov	r0, fp
 8004fde:	f000 fba7 	bl	8005730 <_Bfree>
 8004fe2:	e7d0      	b.n	8004f86 <_dtoa_r+0x65e>
 8004fe4:	9704      	str	r7, [sp, #16]
 8004fe6:	4633      	mov	r3, r6
 8004fe8:	461e      	mov	r6, r3
 8004fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fee:	2a39      	cmp	r2, #57	@ 0x39
 8004ff0:	d107      	bne.n	8005002 <_dtoa_r+0x6da>
 8004ff2:	459a      	cmp	sl, r3
 8004ff4:	d1f8      	bne.n	8004fe8 <_dtoa_r+0x6c0>
 8004ff6:	9a04      	ldr	r2, [sp, #16]
 8004ff8:	3201      	adds	r2, #1
 8004ffa:	9204      	str	r2, [sp, #16]
 8004ffc:	2230      	movs	r2, #48	@ 0x30
 8004ffe:	f88a 2000 	strb.w	r2, [sl]
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	3201      	adds	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	e7bd      	b.n	8004f86 <_dtoa_r+0x65e>
 800500a:	4b7b      	ldr	r3, [pc, #492]	@ (80051f8 <_dtoa_r+0x8d0>)
 800500c:	2200      	movs	r2, #0
 800500e:	f7fb faf3 	bl	80005f8 <__aeabi_dmul>
 8005012:	2200      	movs	r2, #0
 8005014:	2300      	movs	r3, #0
 8005016:	4604      	mov	r4, r0
 8005018:	460d      	mov	r5, r1
 800501a:	f7fb fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f aebb 	beq.w	8004d9a <_dtoa_r+0x472>
 8005024:	e6f0      	b.n	8004e08 <_dtoa_r+0x4e0>
 8005026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005028:	2a00      	cmp	r2, #0
 800502a:	f000 80db 	beq.w	80051e4 <_dtoa_r+0x8bc>
 800502e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005030:	2a01      	cmp	r2, #1
 8005032:	f300 80bf 	bgt.w	80051b4 <_dtoa_r+0x88c>
 8005036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005038:	2a00      	cmp	r2, #0
 800503a:	f000 80b7 	beq.w	80051ac <_dtoa_r+0x884>
 800503e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005044:	4646      	mov	r6, r8
 8005046:	9a08      	ldr	r2, [sp, #32]
 8005048:	2101      	movs	r1, #1
 800504a:	441a      	add	r2, r3
 800504c:	4658      	mov	r0, fp
 800504e:	4498      	add	r8, r3
 8005050:	9208      	str	r2, [sp, #32]
 8005052:	f000 fc21 	bl	8005898 <__i2b>
 8005056:	4605      	mov	r5, r0
 8005058:	b15e      	cbz	r6, 8005072 <_dtoa_r+0x74a>
 800505a:	9b08      	ldr	r3, [sp, #32]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dd08      	ble.n	8005072 <_dtoa_r+0x74a>
 8005060:	42b3      	cmp	r3, r6
 8005062:	9a08      	ldr	r2, [sp, #32]
 8005064:	bfa8      	it	ge
 8005066:	4633      	movge	r3, r6
 8005068:	eba8 0803 	sub.w	r8, r8, r3
 800506c:	1af6      	subs	r6, r6, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	9308      	str	r3, [sp, #32]
 8005072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005074:	b1f3      	cbz	r3, 80050b4 <_dtoa_r+0x78c>
 8005076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80b7 	beq.w	80051ec <_dtoa_r+0x8c4>
 800507e:	b18c      	cbz	r4, 80050a4 <_dtoa_r+0x77c>
 8005080:	4629      	mov	r1, r5
 8005082:	4622      	mov	r2, r4
 8005084:	4658      	mov	r0, fp
 8005086:	f000 fcc7 	bl	8005a18 <__pow5mult>
 800508a:	464a      	mov	r2, r9
 800508c:	4601      	mov	r1, r0
 800508e:	4605      	mov	r5, r0
 8005090:	4658      	mov	r0, fp
 8005092:	f000 fc17 	bl	80058c4 <__multiply>
 8005096:	4649      	mov	r1, r9
 8005098:	9004      	str	r0, [sp, #16]
 800509a:	4658      	mov	r0, fp
 800509c:	f000 fb48 	bl	8005730 <_Bfree>
 80050a0:	9b04      	ldr	r3, [sp, #16]
 80050a2:	4699      	mov	r9, r3
 80050a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050a6:	1b1a      	subs	r2, r3, r4
 80050a8:	d004      	beq.n	80050b4 <_dtoa_r+0x78c>
 80050aa:	4649      	mov	r1, r9
 80050ac:	4658      	mov	r0, fp
 80050ae:	f000 fcb3 	bl	8005a18 <__pow5mult>
 80050b2:	4681      	mov	r9, r0
 80050b4:	2101      	movs	r1, #1
 80050b6:	4658      	mov	r0, fp
 80050b8:	f000 fbee 	bl	8005898 <__i2b>
 80050bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050be:	4604      	mov	r4, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 81cf 	beq.w	8005464 <_dtoa_r+0xb3c>
 80050c6:	461a      	mov	r2, r3
 80050c8:	4601      	mov	r1, r0
 80050ca:	4658      	mov	r0, fp
 80050cc:	f000 fca4 	bl	8005a18 <__pow5mult>
 80050d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	4604      	mov	r4, r0
 80050d6:	f300 8095 	bgt.w	8005204 <_dtoa_r+0x8dc>
 80050da:	9b02      	ldr	r3, [sp, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8087 	bne.w	80051f0 <_dtoa_r+0x8c8>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8089 	bne.w	8005200 <_dtoa_r+0x8d8>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050f4:	0d1b      	lsrs	r3, r3, #20
 80050f6:	051b      	lsls	r3, r3, #20
 80050f8:	b12b      	cbz	r3, 8005106 <_dtoa_r+0x7de>
 80050fa:	9b08      	ldr	r3, [sp, #32]
 80050fc:	3301      	adds	r3, #1
 80050fe:	9308      	str	r3, [sp, #32]
 8005100:	f108 0801 	add.w	r8, r8, #1
 8005104:	2301      	movs	r3, #1
 8005106:	930a      	str	r3, [sp, #40]	@ 0x28
 8005108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 81b0 	beq.w	8005470 <_dtoa_r+0xb48>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005116:	6918      	ldr	r0, [r3, #16]
 8005118:	f000 fb72 	bl	8005800 <__hi0bits>
 800511c:	f1c0 0020 	rsb	r0, r0, #32
 8005120:	9b08      	ldr	r3, [sp, #32]
 8005122:	4418      	add	r0, r3
 8005124:	f010 001f 	ands.w	r0, r0, #31
 8005128:	d077      	beq.n	800521a <_dtoa_r+0x8f2>
 800512a:	f1c0 0320 	rsb	r3, r0, #32
 800512e:	2b04      	cmp	r3, #4
 8005130:	dd6b      	ble.n	800520a <_dtoa_r+0x8e2>
 8005132:	9b08      	ldr	r3, [sp, #32]
 8005134:	f1c0 001c 	rsb	r0, r0, #28
 8005138:	4403      	add	r3, r0
 800513a:	4480      	add	r8, r0
 800513c:	4406      	add	r6, r0
 800513e:	9308      	str	r3, [sp, #32]
 8005140:	f1b8 0f00 	cmp.w	r8, #0
 8005144:	dd05      	ble.n	8005152 <_dtoa_r+0x82a>
 8005146:	4649      	mov	r1, r9
 8005148:	4642      	mov	r2, r8
 800514a:	4658      	mov	r0, fp
 800514c:	f000 fcbe 	bl	8005acc <__lshift>
 8005150:	4681      	mov	r9, r0
 8005152:	9b08      	ldr	r3, [sp, #32]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dd05      	ble.n	8005164 <_dtoa_r+0x83c>
 8005158:	4621      	mov	r1, r4
 800515a:	461a      	mov	r2, r3
 800515c:	4658      	mov	r0, fp
 800515e:	f000 fcb5 	bl	8005acc <__lshift>
 8005162:	4604      	mov	r4, r0
 8005164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005166:	2b00      	cmp	r3, #0
 8005168:	d059      	beq.n	800521e <_dtoa_r+0x8f6>
 800516a:	4621      	mov	r1, r4
 800516c:	4648      	mov	r0, r9
 800516e:	f000 fd19 	bl	8005ba4 <__mcmp>
 8005172:	2800      	cmp	r0, #0
 8005174:	da53      	bge.n	800521e <_dtoa_r+0x8f6>
 8005176:	1e7b      	subs	r3, r7, #1
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	4649      	mov	r1, r9
 800517c:	2300      	movs	r3, #0
 800517e:	220a      	movs	r2, #10
 8005180:	4658      	mov	r0, fp
 8005182:	f000 faf7 	bl	8005774 <__multadd>
 8005186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005188:	4681      	mov	r9, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8172 	beq.w	8005474 <_dtoa_r+0xb4c>
 8005190:	2300      	movs	r3, #0
 8005192:	4629      	mov	r1, r5
 8005194:	220a      	movs	r2, #10
 8005196:	4658      	mov	r0, fp
 8005198:	f000 faec 	bl	8005774 <__multadd>
 800519c:	9b00      	ldr	r3, [sp, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	4605      	mov	r5, r0
 80051a2:	dc67      	bgt.n	8005274 <_dtoa_r+0x94c>
 80051a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	dc41      	bgt.n	800522e <_dtoa_r+0x906>
 80051aa:	e063      	b.n	8005274 <_dtoa_r+0x94c>
 80051ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80051ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80051b2:	e746      	b.n	8005042 <_dtoa_r+0x71a>
 80051b4:	9b07      	ldr	r3, [sp, #28]
 80051b6:	1e5c      	subs	r4, r3, #1
 80051b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	bfbf      	itttt	lt
 80051be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80051c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80051c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80051c4:	1ae3      	sublt	r3, r4, r3
 80051c6:	bfb4      	ite	lt
 80051c8:	18d2      	addlt	r2, r2, r3
 80051ca:	1b1c      	subge	r4, r3, r4
 80051cc:	9b07      	ldr	r3, [sp, #28]
 80051ce:	bfbc      	itt	lt
 80051d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80051d2:	2400      	movlt	r4, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bfb5      	itete	lt
 80051d8:	eba8 0603 	sublt.w	r6, r8, r3
 80051dc:	9b07      	ldrge	r3, [sp, #28]
 80051de:	2300      	movlt	r3, #0
 80051e0:	4646      	movge	r6, r8
 80051e2:	e730      	b.n	8005046 <_dtoa_r+0x71e>
 80051e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051e8:	4646      	mov	r6, r8
 80051ea:	e735      	b.n	8005058 <_dtoa_r+0x730>
 80051ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051ee:	e75c      	b.n	80050aa <_dtoa_r+0x782>
 80051f0:	2300      	movs	r3, #0
 80051f2:	e788      	b.n	8005106 <_dtoa_r+0x7de>
 80051f4:	3fe00000 	.word	0x3fe00000
 80051f8:	40240000 	.word	0x40240000
 80051fc:	40140000 	.word	0x40140000
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	e780      	b.n	8005106 <_dtoa_r+0x7de>
 8005204:	2300      	movs	r3, #0
 8005206:	930a      	str	r3, [sp, #40]	@ 0x28
 8005208:	e782      	b.n	8005110 <_dtoa_r+0x7e8>
 800520a:	d099      	beq.n	8005140 <_dtoa_r+0x818>
 800520c:	9a08      	ldr	r2, [sp, #32]
 800520e:	331c      	adds	r3, #28
 8005210:	441a      	add	r2, r3
 8005212:	4498      	add	r8, r3
 8005214:	441e      	add	r6, r3
 8005216:	9208      	str	r2, [sp, #32]
 8005218:	e792      	b.n	8005140 <_dtoa_r+0x818>
 800521a:	4603      	mov	r3, r0
 800521c:	e7f6      	b.n	800520c <_dtoa_r+0x8e4>
 800521e:	9b07      	ldr	r3, [sp, #28]
 8005220:	9704      	str	r7, [sp, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	dc20      	bgt.n	8005268 <_dtoa_r+0x940>
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522a:	2b02      	cmp	r3, #2
 800522c:	dd1e      	ble.n	800526c <_dtoa_r+0x944>
 800522e:	9b00      	ldr	r3, [sp, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f aec0 	bne.w	8004fb6 <_dtoa_r+0x68e>
 8005236:	4621      	mov	r1, r4
 8005238:	2205      	movs	r2, #5
 800523a:	4658      	mov	r0, fp
 800523c:	f000 fa9a 	bl	8005774 <__multadd>
 8005240:	4601      	mov	r1, r0
 8005242:	4604      	mov	r4, r0
 8005244:	4648      	mov	r0, r9
 8005246:	f000 fcad 	bl	8005ba4 <__mcmp>
 800524a:	2800      	cmp	r0, #0
 800524c:	f77f aeb3 	ble.w	8004fb6 <_dtoa_r+0x68e>
 8005250:	4656      	mov	r6, sl
 8005252:	2331      	movs	r3, #49	@ 0x31
 8005254:	f806 3b01 	strb.w	r3, [r6], #1
 8005258:	9b04      	ldr	r3, [sp, #16]
 800525a:	3301      	adds	r3, #1
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	e6ae      	b.n	8004fbe <_dtoa_r+0x696>
 8005260:	9c07      	ldr	r4, [sp, #28]
 8005262:	9704      	str	r7, [sp, #16]
 8005264:	4625      	mov	r5, r4
 8005266:	e7f3      	b.n	8005250 <_dtoa_r+0x928>
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8104 	beq.w	800547c <_dtoa_r+0xb54>
 8005274:	2e00      	cmp	r6, #0
 8005276:	dd05      	ble.n	8005284 <_dtoa_r+0x95c>
 8005278:	4629      	mov	r1, r5
 800527a:	4632      	mov	r2, r6
 800527c:	4658      	mov	r0, fp
 800527e:	f000 fc25 	bl	8005acc <__lshift>
 8005282:	4605      	mov	r5, r0
 8005284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d05a      	beq.n	8005340 <_dtoa_r+0xa18>
 800528a:	6869      	ldr	r1, [r5, #4]
 800528c:	4658      	mov	r0, fp
 800528e:	f000 fa0f 	bl	80056b0 <_Balloc>
 8005292:	4606      	mov	r6, r0
 8005294:	b928      	cbnz	r0, 80052a2 <_dtoa_r+0x97a>
 8005296:	4b84      	ldr	r3, [pc, #528]	@ (80054a8 <_dtoa_r+0xb80>)
 8005298:	4602      	mov	r2, r0
 800529a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800529e:	f7ff bb5a 	b.w	8004956 <_dtoa_r+0x2e>
 80052a2:	692a      	ldr	r2, [r5, #16]
 80052a4:	3202      	adds	r2, #2
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	f105 010c 	add.w	r1, r5, #12
 80052ac:	300c      	adds	r0, #12
 80052ae:	f000 ffaf 	bl	8006210 <memcpy>
 80052b2:	2201      	movs	r2, #1
 80052b4:	4631      	mov	r1, r6
 80052b6:	4658      	mov	r0, fp
 80052b8:	f000 fc08 	bl	8005acc <__lshift>
 80052bc:	f10a 0301 	add.w	r3, sl, #1
 80052c0:	9307      	str	r3, [sp, #28]
 80052c2:	9b00      	ldr	r3, [sp, #0]
 80052c4:	4453      	add	r3, sl
 80052c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	462f      	mov	r7, r5
 80052d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052d2:	4605      	mov	r5, r0
 80052d4:	9b07      	ldr	r3, [sp, #28]
 80052d6:	4621      	mov	r1, r4
 80052d8:	3b01      	subs	r3, #1
 80052da:	4648      	mov	r0, r9
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	f7ff fa9a 	bl	8004816 <quorem>
 80052e2:	4639      	mov	r1, r7
 80052e4:	9002      	str	r0, [sp, #8]
 80052e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052ea:	4648      	mov	r0, r9
 80052ec:	f000 fc5a 	bl	8005ba4 <__mcmp>
 80052f0:	462a      	mov	r2, r5
 80052f2:	9008      	str	r0, [sp, #32]
 80052f4:	4621      	mov	r1, r4
 80052f6:	4658      	mov	r0, fp
 80052f8:	f000 fc70 	bl	8005bdc <__mdiff>
 80052fc:	68c2      	ldr	r2, [r0, #12]
 80052fe:	4606      	mov	r6, r0
 8005300:	bb02      	cbnz	r2, 8005344 <_dtoa_r+0xa1c>
 8005302:	4601      	mov	r1, r0
 8005304:	4648      	mov	r0, r9
 8005306:	f000 fc4d 	bl	8005ba4 <__mcmp>
 800530a:	4602      	mov	r2, r0
 800530c:	4631      	mov	r1, r6
 800530e:	4658      	mov	r0, fp
 8005310:	920e      	str	r2, [sp, #56]	@ 0x38
 8005312:	f000 fa0d 	bl	8005730 <_Bfree>
 8005316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800531a:	9e07      	ldr	r6, [sp, #28]
 800531c:	ea43 0102 	orr.w	r1, r3, r2
 8005320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005322:	4319      	orrs	r1, r3
 8005324:	d110      	bne.n	8005348 <_dtoa_r+0xa20>
 8005326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800532a:	d029      	beq.n	8005380 <_dtoa_r+0xa58>
 800532c:	9b08      	ldr	r3, [sp, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dd02      	ble.n	8005338 <_dtoa_r+0xa10>
 8005332:	9b02      	ldr	r3, [sp, #8]
 8005334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005338:	9b00      	ldr	r3, [sp, #0]
 800533a:	f883 8000 	strb.w	r8, [r3]
 800533e:	e63f      	b.n	8004fc0 <_dtoa_r+0x698>
 8005340:	4628      	mov	r0, r5
 8005342:	e7bb      	b.n	80052bc <_dtoa_r+0x994>
 8005344:	2201      	movs	r2, #1
 8005346:	e7e1      	b.n	800530c <_dtoa_r+0x9e4>
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	2b00      	cmp	r3, #0
 800534c:	db04      	blt.n	8005358 <_dtoa_r+0xa30>
 800534e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005350:	430b      	orrs	r3, r1
 8005352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005354:	430b      	orrs	r3, r1
 8005356:	d120      	bne.n	800539a <_dtoa_r+0xa72>
 8005358:	2a00      	cmp	r2, #0
 800535a:	dded      	ble.n	8005338 <_dtoa_r+0xa10>
 800535c:	4649      	mov	r1, r9
 800535e:	2201      	movs	r2, #1
 8005360:	4658      	mov	r0, fp
 8005362:	f000 fbb3 	bl	8005acc <__lshift>
 8005366:	4621      	mov	r1, r4
 8005368:	4681      	mov	r9, r0
 800536a:	f000 fc1b 	bl	8005ba4 <__mcmp>
 800536e:	2800      	cmp	r0, #0
 8005370:	dc03      	bgt.n	800537a <_dtoa_r+0xa52>
 8005372:	d1e1      	bne.n	8005338 <_dtoa_r+0xa10>
 8005374:	f018 0f01 	tst.w	r8, #1
 8005378:	d0de      	beq.n	8005338 <_dtoa_r+0xa10>
 800537a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800537e:	d1d8      	bne.n	8005332 <_dtoa_r+0xa0a>
 8005380:	9a00      	ldr	r2, [sp, #0]
 8005382:	2339      	movs	r3, #57	@ 0x39
 8005384:	7013      	strb	r3, [r2, #0]
 8005386:	4633      	mov	r3, r6
 8005388:	461e      	mov	r6, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005390:	2a39      	cmp	r2, #57	@ 0x39
 8005392:	d052      	beq.n	800543a <_dtoa_r+0xb12>
 8005394:	3201      	adds	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e612      	b.n	8004fc0 <_dtoa_r+0x698>
 800539a:	2a00      	cmp	r2, #0
 800539c:	dd07      	ble.n	80053ae <_dtoa_r+0xa86>
 800539e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053a2:	d0ed      	beq.n	8005380 <_dtoa_r+0xa58>
 80053a4:	9a00      	ldr	r2, [sp, #0]
 80053a6:	f108 0301 	add.w	r3, r8, #1
 80053aa:	7013      	strb	r3, [r2, #0]
 80053ac:	e608      	b.n	8004fc0 <_dtoa_r+0x698>
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	9a07      	ldr	r2, [sp, #28]
 80053b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80053b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d028      	beq.n	800540e <_dtoa_r+0xae6>
 80053bc:	4649      	mov	r1, r9
 80053be:	2300      	movs	r3, #0
 80053c0:	220a      	movs	r2, #10
 80053c2:	4658      	mov	r0, fp
 80053c4:	f000 f9d6 	bl	8005774 <__multadd>
 80053c8:	42af      	cmp	r7, r5
 80053ca:	4681      	mov	r9, r0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	f04f 020a 	mov.w	r2, #10
 80053d4:	4639      	mov	r1, r7
 80053d6:	4658      	mov	r0, fp
 80053d8:	d107      	bne.n	80053ea <_dtoa_r+0xac2>
 80053da:	f000 f9cb 	bl	8005774 <__multadd>
 80053de:	4607      	mov	r7, r0
 80053e0:	4605      	mov	r5, r0
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	e774      	b.n	80052d4 <_dtoa_r+0x9ac>
 80053ea:	f000 f9c3 	bl	8005774 <__multadd>
 80053ee:	4629      	mov	r1, r5
 80053f0:	4607      	mov	r7, r0
 80053f2:	2300      	movs	r3, #0
 80053f4:	220a      	movs	r2, #10
 80053f6:	4658      	mov	r0, fp
 80053f8:	f000 f9bc 	bl	8005774 <__multadd>
 80053fc:	4605      	mov	r5, r0
 80053fe:	e7f0      	b.n	80053e2 <_dtoa_r+0xaba>
 8005400:	9b00      	ldr	r3, [sp, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bfcc      	ite	gt
 8005406:	461e      	movgt	r6, r3
 8005408:	2601      	movle	r6, #1
 800540a:	4456      	add	r6, sl
 800540c:	2700      	movs	r7, #0
 800540e:	4649      	mov	r1, r9
 8005410:	2201      	movs	r2, #1
 8005412:	4658      	mov	r0, fp
 8005414:	f000 fb5a 	bl	8005acc <__lshift>
 8005418:	4621      	mov	r1, r4
 800541a:	4681      	mov	r9, r0
 800541c:	f000 fbc2 	bl	8005ba4 <__mcmp>
 8005420:	2800      	cmp	r0, #0
 8005422:	dcb0      	bgt.n	8005386 <_dtoa_r+0xa5e>
 8005424:	d102      	bne.n	800542c <_dtoa_r+0xb04>
 8005426:	f018 0f01 	tst.w	r8, #1
 800542a:	d1ac      	bne.n	8005386 <_dtoa_r+0xa5e>
 800542c:	4633      	mov	r3, r6
 800542e:	461e      	mov	r6, r3
 8005430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005434:	2a30      	cmp	r2, #48	@ 0x30
 8005436:	d0fa      	beq.n	800542e <_dtoa_r+0xb06>
 8005438:	e5c2      	b.n	8004fc0 <_dtoa_r+0x698>
 800543a:	459a      	cmp	sl, r3
 800543c:	d1a4      	bne.n	8005388 <_dtoa_r+0xa60>
 800543e:	9b04      	ldr	r3, [sp, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	9304      	str	r3, [sp, #16]
 8005444:	2331      	movs	r3, #49	@ 0x31
 8005446:	f88a 3000 	strb.w	r3, [sl]
 800544a:	e5b9      	b.n	8004fc0 <_dtoa_r+0x698>
 800544c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800544e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80054ac <_dtoa_r+0xb84>
 8005452:	b11b      	cbz	r3, 800545c <_dtoa_r+0xb34>
 8005454:	f10a 0308 	add.w	r3, sl, #8
 8005458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4650      	mov	r0, sl
 800545e:	b019      	add	sp, #100	@ 0x64
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005466:	2b01      	cmp	r3, #1
 8005468:	f77f ae37 	ble.w	80050da <_dtoa_r+0x7b2>
 800546c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800546e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005470:	2001      	movs	r0, #1
 8005472:	e655      	b.n	8005120 <_dtoa_r+0x7f8>
 8005474:	9b00      	ldr	r3, [sp, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f77f aed6 	ble.w	8005228 <_dtoa_r+0x900>
 800547c:	4656      	mov	r6, sl
 800547e:	4621      	mov	r1, r4
 8005480:	4648      	mov	r0, r9
 8005482:	f7ff f9c8 	bl	8004816 <quorem>
 8005486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800548a:	f806 8b01 	strb.w	r8, [r6], #1
 800548e:	9b00      	ldr	r3, [sp, #0]
 8005490:	eba6 020a 	sub.w	r2, r6, sl
 8005494:	4293      	cmp	r3, r2
 8005496:	ddb3      	ble.n	8005400 <_dtoa_r+0xad8>
 8005498:	4649      	mov	r1, r9
 800549a:	2300      	movs	r3, #0
 800549c:	220a      	movs	r2, #10
 800549e:	4658      	mov	r0, fp
 80054a0:	f000 f968 	bl	8005774 <__multadd>
 80054a4:	4681      	mov	r9, r0
 80054a6:	e7ea      	b.n	800547e <_dtoa_r+0xb56>
 80054a8:	08007854 	.word	0x08007854
 80054ac:	080077d8 	.word	0x080077d8

080054b0 <_free_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4605      	mov	r5, r0
 80054b4:	2900      	cmp	r1, #0
 80054b6:	d041      	beq.n	800553c <_free_r+0x8c>
 80054b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054bc:	1f0c      	subs	r4, r1, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfb8      	it	lt
 80054c2:	18e4      	addlt	r4, r4, r3
 80054c4:	f000 f8e8 	bl	8005698 <__malloc_lock>
 80054c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005540 <_free_r+0x90>)
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	b933      	cbnz	r3, 80054dc <_free_r+0x2c>
 80054ce:	6063      	str	r3, [r4, #4]
 80054d0:	6014      	str	r4, [r2, #0]
 80054d2:	4628      	mov	r0, r5
 80054d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d8:	f000 b8e4 	b.w	80056a4 <__malloc_unlock>
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d908      	bls.n	80054f2 <_free_r+0x42>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf01      	itttt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	1809      	addeq	r1, r1, r0
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	e7ed      	b.n	80054ce <_free_r+0x1e>
 80054f2:	461a      	mov	r2, r3
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b10b      	cbz	r3, 80054fc <_free_r+0x4c>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d9fa      	bls.n	80054f2 <_free_r+0x42>
 80054fc:	6811      	ldr	r1, [r2, #0]
 80054fe:	1850      	adds	r0, r2, r1
 8005500:	42a0      	cmp	r0, r4
 8005502:	d10b      	bne.n	800551c <_free_r+0x6c>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	4401      	add	r1, r0
 8005508:	1850      	adds	r0, r2, r1
 800550a:	4283      	cmp	r3, r0
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	d1e0      	bne.n	80054d2 <_free_r+0x22>
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	6053      	str	r3, [r2, #4]
 8005516:	4408      	add	r0, r1
 8005518:	6010      	str	r0, [r2, #0]
 800551a:	e7da      	b.n	80054d2 <_free_r+0x22>
 800551c:	d902      	bls.n	8005524 <_free_r+0x74>
 800551e:	230c      	movs	r3, #12
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	e7d6      	b.n	80054d2 <_free_r+0x22>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	1821      	adds	r1, r4, r0
 8005528:	428b      	cmp	r3, r1
 800552a:	bf04      	itt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	6063      	str	r3, [r4, #4]
 8005532:	bf04      	itt	eq
 8005534:	1809      	addeq	r1, r1, r0
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	6054      	str	r4, [r2, #4]
 800553a:	e7ca      	b.n	80054d2 <_free_r+0x22>
 800553c:	bd38      	pop	{r3, r4, r5, pc}
 800553e:	bf00      	nop
 8005540:	200006d4 	.word	0x200006d4

08005544 <malloc>:
 8005544:	4b02      	ldr	r3, [pc, #8]	@ (8005550 <malloc+0xc>)
 8005546:	4601      	mov	r1, r0
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	f000 b825 	b.w	8005598 <_malloc_r>
 800554e:	bf00      	nop
 8005550:	20000034 	.word	0x20000034

08005554 <sbrk_aligned>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4e0f      	ldr	r6, [pc, #60]	@ (8005594 <sbrk_aligned+0x40>)
 8005558:	460c      	mov	r4, r1
 800555a:	6831      	ldr	r1, [r6, #0]
 800555c:	4605      	mov	r5, r0
 800555e:	b911      	cbnz	r1, 8005566 <sbrk_aligned+0x12>
 8005560:	f000 fe46 	bl	80061f0 <_sbrk_r>
 8005564:	6030      	str	r0, [r6, #0]
 8005566:	4621      	mov	r1, r4
 8005568:	4628      	mov	r0, r5
 800556a:	f000 fe41 	bl	80061f0 <_sbrk_r>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	d103      	bne.n	800557a <sbrk_aligned+0x26>
 8005572:	f04f 34ff 	mov.w	r4, #4294967295
 8005576:	4620      	mov	r0, r4
 8005578:	bd70      	pop	{r4, r5, r6, pc}
 800557a:	1cc4      	adds	r4, r0, #3
 800557c:	f024 0403 	bic.w	r4, r4, #3
 8005580:	42a0      	cmp	r0, r4
 8005582:	d0f8      	beq.n	8005576 <sbrk_aligned+0x22>
 8005584:	1a21      	subs	r1, r4, r0
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fe32 	bl	80061f0 <_sbrk_r>
 800558c:	3001      	adds	r0, #1
 800558e:	d1f2      	bne.n	8005576 <sbrk_aligned+0x22>
 8005590:	e7ef      	b.n	8005572 <sbrk_aligned+0x1e>
 8005592:	bf00      	nop
 8005594:	200006d0 	.word	0x200006d0

08005598 <_malloc_r>:
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800559c:	1ccd      	adds	r5, r1, #3
 800559e:	f025 0503 	bic.w	r5, r5, #3
 80055a2:	3508      	adds	r5, #8
 80055a4:	2d0c      	cmp	r5, #12
 80055a6:	bf38      	it	cc
 80055a8:	250c      	movcc	r5, #12
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	4606      	mov	r6, r0
 80055ae:	db01      	blt.n	80055b4 <_malloc_r+0x1c>
 80055b0:	42a9      	cmp	r1, r5
 80055b2:	d904      	bls.n	80055be <_malloc_r+0x26>
 80055b4:	230c      	movs	r3, #12
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	2000      	movs	r0, #0
 80055ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005694 <_malloc_r+0xfc>
 80055c2:	f000 f869 	bl	8005698 <__malloc_lock>
 80055c6:	f8d8 3000 	ldr.w	r3, [r8]
 80055ca:	461c      	mov	r4, r3
 80055cc:	bb44      	cbnz	r4, 8005620 <_malloc_r+0x88>
 80055ce:	4629      	mov	r1, r5
 80055d0:	4630      	mov	r0, r6
 80055d2:	f7ff ffbf 	bl	8005554 <sbrk_aligned>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	4604      	mov	r4, r0
 80055da:	d158      	bne.n	800568e <_malloc_r+0xf6>
 80055dc:	f8d8 4000 	ldr.w	r4, [r8]
 80055e0:	4627      	mov	r7, r4
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d143      	bne.n	800566e <_malloc_r+0xd6>
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	d04b      	beq.n	8005682 <_malloc_r+0xea>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	4639      	mov	r1, r7
 80055ee:	4630      	mov	r0, r6
 80055f0:	eb04 0903 	add.w	r9, r4, r3
 80055f4:	f000 fdfc 	bl	80061f0 <_sbrk_r>
 80055f8:	4581      	cmp	r9, r0
 80055fa:	d142      	bne.n	8005682 <_malloc_r+0xea>
 80055fc:	6821      	ldr	r1, [r4, #0]
 80055fe:	1a6d      	subs	r5, r5, r1
 8005600:	4629      	mov	r1, r5
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff ffa6 	bl	8005554 <sbrk_aligned>
 8005608:	3001      	adds	r0, #1
 800560a:	d03a      	beq.n	8005682 <_malloc_r+0xea>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	442b      	add	r3, r5
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	f8d8 3000 	ldr.w	r3, [r8]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	bb62      	cbnz	r2, 8005674 <_malloc_r+0xdc>
 800561a:	f8c8 7000 	str.w	r7, [r8]
 800561e:	e00f      	b.n	8005640 <_malloc_r+0xa8>
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	1b52      	subs	r2, r2, r5
 8005624:	d420      	bmi.n	8005668 <_malloc_r+0xd0>
 8005626:	2a0b      	cmp	r2, #11
 8005628:	d917      	bls.n	800565a <_malloc_r+0xc2>
 800562a:	1961      	adds	r1, r4, r5
 800562c:	42a3      	cmp	r3, r4
 800562e:	6025      	str	r5, [r4, #0]
 8005630:	bf18      	it	ne
 8005632:	6059      	strne	r1, [r3, #4]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	bf08      	it	eq
 8005638:	f8c8 1000 	streq.w	r1, [r8]
 800563c:	5162      	str	r2, [r4, r5]
 800563e:	604b      	str	r3, [r1, #4]
 8005640:	4630      	mov	r0, r6
 8005642:	f000 f82f 	bl	80056a4 <__malloc_unlock>
 8005646:	f104 000b 	add.w	r0, r4, #11
 800564a:	1d23      	adds	r3, r4, #4
 800564c:	f020 0007 	bic.w	r0, r0, #7
 8005650:	1ac2      	subs	r2, r0, r3
 8005652:	bf1c      	itt	ne
 8005654:	1a1b      	subne	r3, r3, r0
 8005656:	50a3      	strne	r3, [r4, r2]
 8005658:	e7af      	b.n	80055ba <_malloc_r+0x22>
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	42a3      	cmp	r3, r4
 800565e:	bf0c      	ite	eq
 8005660:	f8c8 2000 	streq.w	r2, [r8]
 8005664:	605a      	strne	r2, [r3, #4]
 8005666:	e7eb      	b.n	8005640 <_malloc_r+0xa8>
 8005668:	4623      	mov	r3, r4
 800566a:	6864      	ldr	r4, [r4, #4]
 800566c:	e7ae      	b.n	80055cc <_malloc_r+0x34>
 800566e:	463c      	mov	r4, r7
 8005670:	687f      	ldr	r7, [r7, #4]
 8005672:	e7b6      	b.n	80055e2 <_malloc_r+0x4a>
 8005674:	461a      	mov	r2, r3
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	42a3      	cmp	r3, r4
 800567a:	d1fb      	bne.n	8005674 <_malloc_r+0xdc>
 800567c:	2300      	movs	r3, #0
 800567e:	6053      	str	r3, [r2, #4]
 8005680:	e7de      	b.n	8005640 <_malloc_r+0xa8>
 8005682:	230c      	movs	r3, #12
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	4630      	mov	r0, r6
 8005688:	f000 f80c 	bl	80056a4 <__malloc_unlock>
 800568c:	e794      	b.n	80055b8 <_malloc_r+0x20>
 800568e:	6005      	str	r5, [r0, #0]
 8005690:	e7d6      	b.n	8005640 <_malloc_r+0xa8>
 8005692:	bf00      	nop
 8005694:	200006d4 	.word	0x200006d4

08005698 <__malloc_lock>:
 8005698:	4801      	ldr	r0, [pc, #4]	@ (80056a0 <__malloc_lock+0x8>)
 800569a:	f7ff b8ba 	b.w	8004812 <__retarget_lock_acquire_recursive>
 800569e:	bf00      	nop
 80056a0:	200006cc 	.word	0x200006cc

080056a4 <__malloc_unlock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	@ (80056ac <__malloc_unlock+0x8>)
 80056a6:	f7ff b8b5 	b.w	8004814 <__retarget_lock_release_recursive>
 80056aa:	bf00      	nop
 80056ac:	200006cc 	.word	0x200006cc

080056b0 <_Balloc>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	69c6      	ldr	r6, [r0, #28]
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	b976      	cbnz	r6, 80056d8 <_Balloc+0x28>
 80056ba:	2010      	movs	r0, #16
 80056bc:	f7ff ff42 	bl	8005544 <malloc>
 80056c0:	4602      	mov	r2, r0
 80056c2:	61e0      	str	r0, [r4, #28]
 80056c4:	b920      	cbnz	r0, 80056d0 <_Balloc+0x20>
 80056c6:	4b18      	ldr	r3, [pc, #96]	@ (8005728 <_Balloc+0x78>)
 80056c8:	4818      	ldr	r0, [pc, #96]	@ (800572c <_Balloc+0x7c>)
 80056ca:	216b      	movs	r1, #107	@ 0x6b
 80056cc:	f000 fdae 	bl	800622c <__assert_func>
 80056d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d4:	6006      	str	r6, [r0, #0]
 80056d6:	60c6      	str	r6, [r0, #12]
 80056d8:	69e6      	ldr	r6, [r4, #28]
 80056da:	68f3      	ldr	r3, [r6, #12]
 80056dc:	b183      	cbz	r3, 8005700 <_Balloc+0x50>
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056e6:	b9b8      	cbnz	r0, 8005718 <_Balloc+0x68>
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f605 	lsl.w	r6, r1, r5
 80056ee:	1d72      	adds	r2, r6, #5
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fdb8 	bl	8006268 <_calloc_r>
 80056f8:	b160      	cbz	r0, 8005714 <_Balloc+0x64>
 80056fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056fe:	e00e      	b.n	800571e <_Balloc+0x6e>
 8005700:	2221      	movs	r2, #33	@ 0x21
 8005702:	2104      	movs	r1, #4
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fdaf 	bl	8006268 <_calloc_r>
 800570a:	69e3      	ldr	r3, [r4, #28]
 800570c:	60f0      	str	r0, [r6, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e4      	bne.n	80056de <_Balloc+0x2e>
 8005714:	2000      	movs	r0, #0
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	6802      	ldr	r2, [r0, #0]
 800571a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800571e:	2300      	movs	r3, #0
 8005720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005724:	e7f7      	b.n	8005716 <_Balloc+0x66>
 8005726:	bf00      	nop
 8005728:	080077e5 	.word	0x080077e5
 800572c:	08007865 	.word	0x08007865

08005730 <_Bfree>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	69c6      	ldr	r6, [r0, #28]
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b976      	cbnz	r6, 8005758 <_Bfree+0x28>
 800573a:	2010      	movs	r0, #16
 800573c:	f7ff ff02 	bl	8005544 <malloc>
 8005740:	4602      	mov	r2, r0
 8005742:	61e8      	str	r0, [r5, #28]
 8005744:	b920      	cbnz	r0, 8005750 <_Bfree+0x20>
 8005746:	4b09      	ldr	r3, [pc, #36]	@ (800576c <_Bfree+0x3c>)
 8005748:	4809      	ldr	r0, [pc, #36]	@ (8005770 <_Bfree+0x40>)
 800574a:	218f      	movs	r1, #143	@ 0x8f
 800574c:	f000 fd6e 	bl	800622c <__assert_func>
 8005750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005754:	6006      	str	r6, [r0, #0]
 8005756:	60c6      	str	r6, [r0, #12]
 8005758:	b13c      	cbz	r4, 800576a <_Bfree+0x3a>
 800575a:	69eb      	ldr	r3, [r5, #28]
 800575c:	6862      	ldr	r2, [r4, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005764:	6021      	str	r1, [r4, #0]
 8005766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	080077e5 	.word	0x080077e5
 8005770:	08007865 	.word	0x08007865

08005774 <__multadd>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	690d      	ldr	r5, [r1, #16]
 800577a:	4607      	mov	r7, r0
 800577c:	460c      	mov	r4, r1
 800577e:	461e      	mov	r6, r3
 8005780:	f101 0c14 	add.w	ip, r1, #20
 8005784:	2000      	movs	r0, #0
 8005786:	f8dc 3000 	ldr.w	r3, [ip]
 800578a:	b299      	uxth	r1, r3
 800578c:	fb02 6101 	mla	r1, r2, r1, r6
 8005790:	0c1e      	lsrs	r6, r3, #16
 8005792:	0c0b      	lsrs	r3, r1, #16
 8005794:	fb02 3306 	mla	r3, r2, r6, r3
 8005798:	b289      	uxth	r1, r1
 800579a:	3001      	adds	r0, #1
 800579c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057a0:	4285      	cmp	r5, r0
 80057a2:	f84c 1b04 	str.w	r1, [ip], #4
 80057a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057aa:	dcec      	bgt.n	8005786 <__multadd+0x12>
 80057ac:	b30e      	cbz	r6, 80057f2 <__multadd+0x7e>
 80057ae:	68a3      	ldr	r3, [r4, #8]
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc19      	bgt.n	80057e8 <__multadd+0x74>
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4638      	mov	r0, r7
 80057b8:	3101      	adds	r1, #1
 80057ba:	f7ff ff79 	bl	80056b0 <_Balloc>
 80057be:	4680      	mov	r8, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__multadd+0x5a>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <__multadd+0x84>)
 80057c6:	480d      	ldr	r0, [pc, #52]	@ (80057fc <__multadd+0x88>)
 80057c8:	21ba      	movs	r1, #186	@ 0xba
 80057ca:	f000 fd2f 	bl	800622c <__assert_func>
 80057ce:	6922      	ldr	r2, [r4, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	f104 010c 	add.w	r1, r4, #12
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	300c      	adds	r0, #12
 80057da:	f000 fd19 	bl	8006210 <memcpy>
 80057de:	4621      	mov	r1, r4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ffa5 	bl	8005730 <_Bfree>
 80057e6:	4644      	mov	r4, r8
 80057e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057ec:	3501      	adds	r5, #1
 80057ee:	615e      	str	r6, [r3, #20]
 80057f0:	6125      	str	r5, [r4, #16]
 80057f2:	4620      	mov	r0, r4
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	08007854 	.word	0x08007854
 80057fc:	08007865 	.word	0x08007865

08005800 <__hi0bits>:
 8005800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005804:	4603      	mov	r3, r0
 8005806:	bf36      	itet	cc
 8005808:	0403      	lslcc	r3, r0, #16
 800580a:	2000      	movcs	r0, #0
 800580c:	2010      	movcc	r0, #16
 800580e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005812:	bf3c      	itt	cc
 8005814:	021b      	lslcc	r3, r3, #8
 8005816:	3008      	addcc	r0, #8
 8005818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800581c:	bf3c      	itt	cc
 800581e:	011b      	lslcc	r3, r3, #4
 8005820:	3004      	addcc	r0, #4
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005826:	bf3c      	itt	cc
 8005828:	009b      	lslcc	r3, r3, #2
 800582a:	3002      	addcc	r0, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	db05      	blt.n	800583c <__hi0bits+0x3c>
 8005830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005834:	f100 0001 	add.w	r0, r0, #1
 8005838:	bf08      	it	eq
 800583a:	2020      	moveq	r0, #32
 800583c:	4770      	bx	lr

0800583e <__lo0bits>:
 800583e:	6803      	ldr	r3, [r0, #0]
 8005840:	4602      	mov	r2, r0
 8005842:	f013 0007 	ands.w	r0, r3, #7
 8005846:	d00b      	beq.n	8005860 <__lo0bits+0x22>
 8005848:	07d9      	lsls	r1, r3, #31
 800584a:	d421      	bmi.n	8005890 <__lo0bits+0x52>
 800584c:	0798      	lsls	r0, r3, #30
 800584e:	bf49      	itett	mi
 8005850:	085b      	lsrmi	r3, r3, #1
 8005852:	089b      	lsrpl	r3, r3, #2
 8005854:	2001      	movmi	r0, #1
 8005856:	6013      	strmi	r3, [r2, #0]
 8005858:	bf5c      	itt	pl
 800585a:	6013      	strpl	r3, [r2, #0]
 800585c:	2002      	movpl	r0, #2
 800585e:	4770      	bx	lr
 8005860:	b299      	uxth	r1, r3
 8005862:	b909      	cbnz	r1, 8005868 <__lo0bits+0x2a>
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	2010      	movs	r0, #16
 8005868:	b2d9      	uxtb	r1, r3
 800586a:	b909      	cbnz	r1, 8005870 <__lo0bits+0x32>
 800586c:	3008      	adds	r0, #8
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	0719      	lsls	r1, r3, #28
 8005872:	bf04      	itt	eq
 8005874:	091b      	lsreq	r3, r3, #4
 8005876:	3004      	addeq	r0, #4
 8005878:	0799      	lsls	r1, r3, #30
 800587a:	bf04      	itt	eq
 800587c:	089b      	lsreq	r3, r3, #2
 800587e:	3002      	addeq	r0, #2
 8005880:	07d9      	lsls	r1, r3, #31
 8005882:	d403      	bmi.n	800588c <__lo0bits+0x4e>
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	f100 0001 	add.w	r0, r0, #1
 800588a:	d003      	beq.n	8005894 <__lo0bits+0x56>
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	4770      	bx	lr
 8005890:	2000      	movs	r0, #0
 8005892:	4770      	bx	lr
 8005894:	2020      	movs	r0, #32
 8005896:	4770      	bx	lr

08005898 <__i2b>:
 8005898:	b510      	push	{r4, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	2101      	movs	r1, #1
 800589e:	f7ff ff07 	bl	80056b0 <_Balloc>
 80058a2:	4602      	mov	r2, r0
 80058a4:	b928      	cbnz	r0, 80058b2 <__i2b+0x1a>
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <__i2b+0x24>)
 80058a8:	4805      	ldr	r0, [pc, #20]	@ (80058c0 <__i2b+0x28>)
 80058aa:	f240 1145 	movw	r1, #325	@ 0x145
 80058ae:	f000 fcbd 	bl	800622c <__assert_func>
 80058b2:	2301      	movs	r3, #1
 80058b4:	6144      	str	r4, [r0, #20]
 80058b6:	6103      	str	r3, [r0, #16]
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08007854 	.word	0x08007854
 80058c0:	08007865 	.word	0x08007865

080058c4 <__multiply>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	4614      	mov	r4, r2
 80058ca:	690a      	ldr	r2, [r1, #16]
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	bfa8      	it	ge
 80058d2:	4623      	movge	r3, r4
 80058d4:	460f      	mov	r7, r1
 80058d6:	bfa4      	itt	ge
 80058d8:	460c      	movge	r4, r1
 80058da:	461f      	movge	r7, r3
 80058dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	6861      	ldr	r1, [r4, #4]
 80058e8:	eb0a 0609 	add.w	r6, sl, r9
 80058ec:	42b3      	cmp	r3, r6
 80058ee:	b085      	sub	sp, #20
 80058f0:	bfb8      	it	lt
 80058f2:	3101      	addlt	r1, #1
 80058f4:	f7ff fedc 	bl	80056b0 <_Balloc>
 80058f8:	b930      	cbnz	r0, 8005908 <__multiply+0x44>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b44      	ldr	r3, [pc, #272]	@ (8005a10 <__multiply+0x14c>)
 80058fe:	4845      	ldr	r0, [pc, #276]	@ (8005a14 <__multiply+0x150>)
 8005900:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005904:	f000 fc92 	bl	800622c <__assert_func>
 8005908:	f100 0514 	add.w	r5, r0, #20
 800590c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005910:	462b      	mov	r3, r5
 8005912:	2200      	movs	r2, #0
 8005914:	4543      	cmp	r3, r8
 8005916:	d321      	bcc.n	800595c <__multiply+0x98>
 8005918:	f107 0114 	add.w	r1, r7, #20
 800591c:	f104 0214 	add.w	r2, r4, #20
 8005920:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005924:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	1b13      	subs	r3, r2, r4
 800592c:	3b15      	subs	r3, #21
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	3304      	adds	r3, #4
 8005934:	f104 0715 	add.w	r7, r4, #21
 8005938:	42ba      	cmp	r2, r7
 800593a:	bf38      	it	cc
 800593c:	2304      	movcc	r3, #4
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	9103      	str	r1, [sp, #12]
 8005944:	428b      	cmp	r3, r1
 8005946:	d80c      	bhi.n	8005962 <__multiply+0x9e>
 8005948:	2e00      	cmp	r6, #0
 800594a:	dd03      	ble.n	8005954 <__multiply+0x90>
 800594c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05b      	beq.n	8005a0c <__multiply+0x148>
 8005954:	6106      	str	r6, [r0, #16]
 8005956:	b005      	add	sp, #20
 8005958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	f843 2b04 	str.w	r2, [r3], #4
 8005960:	e7d8      	b.n	8005914 <__multiply+0x50>
 8005962:	f8b1 a000 	ldrh.w	sl, [r1]
 8005966:	f1ba 0f00 	cmp.w	sl, #0
 800596a:	d024      	beq.n	80059b6 <__multiply+0xf2>
 800596c:	f104 0e14 	add.w	lr, r4, #20
 8005970:	46a9      	mov	r9, r5
 8005972:	f04f 0c00 	mov.w	ip, #0
 8005976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800597a:	f8d9 3000 	ldr.w	r3, [r9]
 800597e:	fa1f fb87 	uxth.w	fp, r7
 8005982:	b29b      	uxth	r3, r3
 8005984:	fb0a 330b 	mla	r3, sl, fp, r3
 8005988:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800598c:	f8d9 7000 	ldr.w	r7, [r9]
 8005990:	4463      	add	r3, ip
 8005992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005996:	fb0a c70b 	mla	r7, sl, fp, ip
 800599a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800599e:	b29b      	uxth	r3, r3
 80059a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059a4:	4572      	cmp	r2, lr
 80059a6:	f849 3b04 	str.w	r3, [r9], #4
 80059aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80059ae:	d8e2      	bhi.n	8005976 <__multiply+0xb2>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f845 c003 	str.w	ip, [r5, r3]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80059bc:	3104      	adds	r1, #4
 80059be:	f1b9 0f00 	cmp.w	r9, #0
 80059c2:	d021      	beq.n	8005a08 <__multiply+0x144>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	f104 0c14 	add.w	ip, r4, #20
 80059ca:	46ae      	mov	lr, r5
 80059cc:	f04f 0a00 	mov.w	sl, #0
 80059d0:	f8bc b000 	ldrh.w	fp, [ip]
 80059d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059d8:	fb09 770b 	mla	r7, r9, fp, r7
 80059dc:	4457      	add	r7, sl
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059e4:	f84e 3b04 	str.w	r3, [lr], #4
 80059e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059f0:	f8be 3000 	ldrh.w	r3, [lr]
 80059f4:	fb09 330a 	mla	r3, r9, sl, r3
 80059f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80059fc:	4562      	cmp	r2, ip
 80059fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a02:	d8e5      	bhi.n	80059d0 <__multiply+0x10c>
 8005a04:	9f01      	ldr	r7, [sp, #4]
 8005a06:	51eb      	str	r3, [r5, r7]
 8005a08:	3504      	adds	r5, #4
 8005a0a:	e799      	b.n	8005940 <__multiply+0x7c>
 8005a0c:	3e01      	subs	r6, #1
 8005a0e:	e79b      	b.n	8005948 <__multiply+0x84>
 8005a10:	08007854 	.word	0x08007854
 8005a14:	08007865 	.word	0x08007865

08005a18 <__pow5mult>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	4615      	mov	r5, r2
 8005a1e:	f012 0203 	ands.w	r2, r2, #3
 8005a22:	4607      	mov	r7, r0
 8005a24:	460e      	mov	r6, r1
 8005a26:	d007      	beq.n	8005a38 <__pow5mult+0x20>
 8005a28:	4c25      	ldr	r4, [pc, #148]	@ (8005ac0 <__pow5mult+0xa8>)
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a32:	f7ff fe9f 	bl	8005774 <__multadd>
 8005a36:	4606      	mov	r6, r0
 8005a38:	10ad      	asrs	r5, r5, #2
 8005a3a:	d03d      	beq.n	8005ab8 <__pow5mult+0xa0>
 8005a3c:	69fc      	ldr	r4, [r7, #28]
 8005a3e:	b97c      	cbnz	r4, 8005a60 <__pow5mult+0x48>
 8005a40:	2010      	movs	r0, #16
 8005a42:	f7ff fd7f 	bl	8005544 <malloc>
 8005a46:	4602      	mov	r2, r0
 8005a48:	61f8      	str	r0, [r7, #28]
 8005a4a:	b928      	cbnz	r0, 8005a58 <__pow5mult+0x40>
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac4 <__pow5mult+0xac>)
 8005a4e:	481e      	ldr	r0, [pc, #120]	@ (8005ac8 <__pow5mult+0xb0>)
 8005a50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a54:	f000 fbea 	bl	800622c <__assert_func>
 8005a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a5c:	6004      	str	r4, [r0, #0]
 8005a5e:	60c4      	str	r4, [r0, #12]
 8005a60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a68:	b94c      	cbnz	r4, 8005a7e <__pow5mult+0x66>
 8005a6a:	f240 2171 	movw	r1, #625	@ 0x271
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f7ff ff12 	bl	8005898 <__i2b>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	6003      	str	r3, [r0, #0]
 8005a7e:	f04f 0900 	mov.w	r9, #0
 8005a82:	07eb      	lsls	r3, r5, #31
 8005a84:	d50a      	bpl.n	8005a9c <__pow5mult+0x84>
 8005a86:	4631      	mov	r1, r6
 8005a88:	4622      	mov	r2, r4
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ff1a 	bl	80058c4 <__multiply>
 8005a90:	4631      	mov	r1, r6
 8005a92:	4680      	mov	r8, r0
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7ff fe4b 	bl	8005730 <_Bfree>
 8005a9a:	4646      	mov	r6, r8
 8005a9c:	106d      	asrs	r5, r5, #1
 8005a9e:	d00b      	beq.n	8005ab8 <__pow5mult+0xa0>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	b938      	cbnz	r0, 8005ab4 <__pow5mult+0x9c>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff0b 	bl	80058c4 <__multiply>
 8005aae:	6020      	str	r0, [r4, #0]
 8005ab0:	f8c0 9000 	str.w	r9, [r0]
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	e7e4      	b.n	8005a82 <__pow5mult+0x6a>
 8005ab8:	4630      	mov	r0, r6
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	bf00      	nop
 8005ac0:	080078c0 	.word	0x080078c0
 8005ac4:	080077e5 	.word	0x080077e5
 8005ac8:	08007865 	.word	0x08007865

08005acc <__lshift>:
 8005acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6849      	ldr	r1, [r1, #4]
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	4607      	mov	r7, r0
 8005ade:	4691      	mov	r9, r2
 8005ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ae4:	f108 0601 	add.w	r6, r8, #1
 8005ae8:	42b3      	cmp	r3, r6
 8005aea:	db0b      	blt.n	8005b04 <__lshift+0x38>
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff fddf 	bl	80056b0 <_Balloc>
 8005af2:	4605      	mov	r5, r0
 8005af4:	b948      	cbnz	r0, 8005b0a <__lshift+0x3e>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b28      	ldr	r3, [pc, #160]	@ (8005b9c <__lshift+0xd0>)
 8005afa:	4829      	ldr	r0, [pc, #164]	@ (8005ba0 <__lshift+0xd4>)
 8005afc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b00:	f000 fb94 	bl	800622c <__assert_func>
 8005b04:	3101      	adds	r1, #1
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	e7ee      	b.n	8005ae8 <__lshift+0x1c>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f100 0114 	add.w	r1, r0, #20
 8005b10:	f100 0210 	add.w	r2, r0, #16
 8005b14:	4618      	mov	r0, r3
 8005b16:	4553      	cmp	r3, sl
 8005b18:	db33      	blt.n	8005b82 <__lshift+0xb6>
 8005b1a:	6920      	ldr	r0, [r4, #16]
 8005b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b20:	f104 0314 	add.w	r3, r4, #20
 8005b24:	f019 091f 	ands.w	r9, r9, #31
 8005b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b30:	d02b      	beq.n	8005b8a <__lshift+0xbe>
 8005b32:	f1c9 0e20 	rsb	lr, r9, #32
 8005b36:	468a      	mov	sl, r1
 8005b38:	2200      	movs	r2, #0
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b40:	4310      	orrs	r0, r2
 8005b42:	f84a 0b04 	str.w	r0, [sl], #4
 8005b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b4a:	459c      	cmp	ip, r3
 8005b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b50:	d8f3      	bhi.n	8005b3a <__lshift+0x6e>
 8005b52:	ebac 0304 	sub.w	r3, ip, r4
 8005b56:	3b15      	subs	r3, #21
 8005b58:	f023 0303 	bic.w	r3, r3, #3
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	f104 0015 	add.w	r0, r4, #21
 8005b62:	4584      	cmp	ip, r0
 8005b64:	bf38      	it	cc
 8005b66:	2304      	movcc	r3, #4
 8005b68:	50ca      	str	r2, [r1, r3]
 8005b6a:	b10a      	cbz	r2, 8005b70 <__lshift+0xa4>
 8005b6c:	f108 0602 	add.w	r6, r8, #2
 8005b70:	3e01      	subs	r6, #1
 8005b72:	4638      	mov	r0, r7
 8005b74:	612e      	str	r6, [r5, #16]
 8005b76:	4621      	mov	r1, r4
 8005b78:	f7ff fdda 	bl	8005730 <_Bfree>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b86:	3301      	adds	r3, #1
 8005b88:	e7c5      	b.n	8005b16 <__lshift+0x4a>
 8005b8a:	3904      	subs	r1, #4
 8005b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b94:	459c      	cmp	ip, r3
 8005b96:	d8f9      	bhi.n	8005b8c <__lshift+0xc0>
 8005b98:	e7ea      	b.n	8005b70 <__lshift+0xa4>
 8005b9a:	bf00      	nop
 8005b9c:	08007854 	.word	0x08007854
 8005ba0:	08007865 	.word	0x08007865

08005ba4 <__mcmp>:
 8005ba4:	690a      	ldr	r2, [r1, #16]
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6900      	ldr	r0, [r0, #16]
 8005baa:	1a80      	subs	r0, r0, r2
 8005bac:	b530      	push	{r4, r5, lr}
 8005bae:	d10e      	bne.n	8005bce <__mcmp+0x2a>
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	3114      	adds	r1, #20
 8005bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bc4:	4295      	cmp	r5, r2
 8005bc6:	d003      	beq.n	8005bd0 <__mcmp+0x2c>
 8005bc8:	d205      	bcs.n	8005bd6 <__mcmp+0x32>
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d3f3      	bcc.n	8005bbc <__mcmp+0x18>
 8005bd4:	e7fb      	b.n	8005bce <__mcmp+0x2a>
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	e7f9      	b.n	8005bce <__mcmp+0x2a>
	...

08005bdc <__mdiff>:
 8005bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	4689      	mov	r9, r1
 8005be2:	4606      	mov	r6, r0
 8005be4:	4611      	mov	r1, r2
 8005be6:	4648      	mov	r0, r9
 8005be8:	4614      	mov	r4, r2
 8005bea:	f7ff ffdb 	bl	8005ba4 <__mcmp>
 8005bee:	1e05      	subs	r5, r0, #0
 8005bf0:	d112      	bne.n	8005c18 <__mdiff+0x3c>
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f7ff fd5b 	bl	80056b0 <_Balloc>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	b928      	cbnz	r0, 8005c0a <__mdiff+0x2e>
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8005cfc <__mdiff+0x120>)
 8005c00:	f240 2137 	movw	r1, #567	@ 0x237
 8005c04:	483e      	ldr	r0, [pc, #248]	@ (8005d00 <__mdiff+0x124>)
 8005c06:	f000 fb11 	bl	800622c <__assert_func>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c10:	4610      	mov	r0, r2
 8005c12:	b003      	add	sp, #12
 8005c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c18:	bfbc      	itt	lt
 8005c1a:	464b      	movlt	r3, r9
 8005c1c:	46a1      	movlt	r9, r4
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c24:	bfba      	itte	lt
 8005c26:	461c      	movlt	r4, r3
 8005c28:	2501      	movlt	r5, #1
 8005c2a:	2500      	movge	r5, #0
 8005c2c:	f7ff fd40 	bl	80056b0 <_Balloc>
 8005c30:	4602      	mov	r2, r0
 8005c32:	b918      	cbnz	r0, 8005c3c <__mdiff+0x60>
 8005c34:	4b31      	ldr	r3, [pc, #196]	@ (8005cfc <__mdiff+0x120>)
 8005c36:	f240 2145 	movw	r1, #581	@ 0x245
 8005c3a:	e7e3      	b.n	8005c04 <__mdiff+0x28>
 8005c3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c40:	6926      	ldr	r6, [r4, #16]
 8005c42:	60c5      	str	r5, [r0, #12]
 8005c44:	f109 0310 	add.w	r3, r9, #16
 8005c48:	f109 0514 	add.w	r5, r9, #20
 8005c4c:	f104 0e14 	add.w	lr, r4, #20
 8005c50:	f100 0b14 	add.w	fp, r0, #20
 8005c54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	46d9      	mov	r9, fp
 8005c60:	f04f 0c00 	mov.w	ip, #0
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	fa1f f38a 	uxth.w	r3, sl
 8005c74:	4619      	mov	r1, r3
 8005c76:	b283      	uxth	r3, r0
 8005c78:	1acb      	subs	r3, r1, r3
 8005c7a:	0c00      	lsrs	r0, r0, #16
 8005c7c:	4463      	add	r3, ip
 8005c7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c8c:	4576      	cmp	r6, lr
 8005c8e:	f849 3b04 	str.w	r3, [r9], #4
 8005c92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c96:	d8e5      	bhi.n	8005c64 <__mdiff+0x88>
 8005c98:	1b33      	subs	r3, r6, r4
 8005c9a:	3b15      	subs	r3, #21
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	3415      	adds	r4, #21
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	bf38      	it	cc
 8005ca8:	2304      	movcc	r3, #4
 8005caa:	441d      	add	r5, r3
 8005cac:	445b      	add	r3, fp
 8005cae:	461e      	mov	r6, r3
 8005cb0:	462c      	mov	r4, r5
 8005cb2:	4544      	cmp	r4, r8
 8005cb4:	d30e      	bcc.n	8005cd4 <__mdiff+0xf8>
 8005cb6:	f108 0103 	add.w	r1, r8, #3
 8005cba:	1b49      	subs	r1, r1, r5
 8005cbc:	f021 0103 	bic.w	r1, r1, #3
 8005cc0:	3d03      	subs	r5, #3
 8005cc2:	45a8      	cmp	r8, r5
 8005cc4:	bf38      	it	cc
 8005cc6:	2100      	movcc	r1, #0
 8005cc8:	440b      	add	r3, r1
 8005cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cce:	b191      	cbz	r1, 8005cf6 <__mdiff+0x11a>
 8005cd0:	6117      	str	r7, [r2, #16]
 8005cd2:	e79d      	b.n	8005c10 <__mdiff+0x34>
 8005cd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cd8:	46e6      	mov	lr, ip
 8005cda:	0c08      	lsrs	r0, r1, #16
 8005cdc:	fa1c fc81 	uxtah	ip, ip, r1
 8005ce0:	4471      	add	r1, lr
 8005ce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ce6:	b289      	uxth	r1, r1
 8005ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cec:	f846 1b04 	str.w	r1, [r6], #4
 8005cf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cf4:	e7dd      	b.n	8005cb2 <__mdiff+0xd6>
 8005cf6:	3f01      	subs	r7, #1
 8005cf8:	e7e7      	b.n	8005cca <__mdiff+0xee>
 8005cfa:	bf00      	nop
 8005cfc:	08007854 	.word	0x08007854
 8005d00:	08007865 	.word	0x08007865

08005d04 <__d2b>:
 8005d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	460f      	mov	r7, r1
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	ec59 8b10 	vmov	r8, r9, d0
 8005d10:	4616      	mov	r6, r2
 8005d12:	f7ff fccd 	bl	80056b0 <_Balloc>
 8005d16:	4604      	mov	r4, r0
 8005d18:	b930      	cbnz	r0, 8005d28 <__d2b+0x24>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	4b23      	ldr	r3, [pc, #140]	@ (8005dac <__d2b+0xa8>)
 8005d1e:	4824      	ldr	r0, [pc, #144]	@ (8005db0 <__d2b+0xac>)
 8005d20:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d24:	f000 fa82 	bl	800622c <__assert_func>
 8005d28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d30:	b10d      	cbz	r5, 8005d36 <__d2b+0x32>
 8005d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	f1b8 0300 	subs.w	r3, r8, #0
 8005d3c:	d023      	beq.n	8005d86 <__d2b+0x82>
 8005d3e:	4668      	mov	r0, sp
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f7ff fd7c 	bl	800583e <__lo0bits>
 8005d46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d4a:	b1d0      	cbz	r0, 8005d82 <__d2b+0x7e>
 8005d4c:	f1c0 0320 	rsb	r3, r0, #32
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	430b      	orrs	r3, r1
 8005d56:	40c2      	lsrs	r2, r0
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	9b01      	ldr	r3, [sp, #4]
 8005d5e:	61a3      	str	r3, [r4, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2201      	moveq	r2, #1
 8005d66:	2202      	movne	r2, #2
 8005d68:	6122      	str	r2, [r4, #16]
 8005d6a:	b1a5      	cbz	r5, 8005d96 <__d2b+0x92>
 8005d6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d70:	4405      	add	r5, r0
 8005d72:	603d      	str	r5, [r7, #0]
 8005d74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d78:	6030      	str	r0, [r6, #0]
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	b003      	add	sp, #12
 8005d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d82:	6161      	str	r1, [r4, #20]
 8005d84:	e7ea      	b.n	8005d5c <__d2b+0x58>
 8005d86:	a801      	add	r0, sp, #4
 8005d88:	f7ff fd59 	bl	800583e <__lo0bits>
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	3020      	adds	r0, #32
 8005d92:	2201      	movs	r2, #1
 8005d94:	e7e8      	b.n	8005d68 <__d2b+0x64>
 8005d96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005d9e:	6038      	str	r0, [r7, #0]
 8005da0:	6918      	ldr	r0, [r3, #16]
 8005da2:	f7ff fd2d 	bl	8005800 <__hi0bits>
 8005da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005daa:	e7e5      	b.n	8005d78 <__d2b+0x74>
 8005dac:	08007854 	.word	0x08007854
 8005db0:	08007865 	.word	0x08007865

08005db4 <__ssputs_r>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	688e      	ldr	r6, [r1, #8]
 8005dba:	461f      	mov	r7, r3
 8005dbc:	42be      	cmp	r6, r7
 8005dbe:	680b      	ldr	r3, [r1, #0]
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4690      	mov	r8, r2
 8005dc6:	d82d      	bhi.n	8005e24 <__ssputs_r+0x70>
 8005dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dd0:	d026      	beq.n	8005e20 <__ssputs_r+0x6c>
 8005dd2:	6965      	ldr	r5, [r4, #20]
 8005dd4:	6909      	ldr	r1, [r1, #16]
 8005dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dda:	eba3 0901 	sub.w	r9, r3, r1
 8005dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005de2:	1c7b      	adds	r3, r7, #1
 8005de4:	444b      	add	r3, r9
 8005de6:	106d      	asrs	r5, r5, #1
 8005de8:	429d      	cmp	r5, r3
 8005dea:	bf38      	it	cc
 8005dec:	461d      	movcc	r5, r3
 8005dee:	0553      	lsls	r3, r2, #21
 8005df0:	d527      	bpl.n	8005e42 <__ssputs_r+0x8e>
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7ff fbd0 	bl	8005598 <_malloc_r>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	b360      	cbz	r0, 8005e56 <__ssputs_r+0xa2>
 8005dfc:	6921      	ldr	r1, [r4, #16]
 8005dfe:	464a      	mov	r2, r9
 8005e00:	f000 fa06 	bl	8006210 <memcpy>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	6126      	str	r6, [r4, #16]
 8005e12:	6165      	str	r5, [r4, #20]
 8005e14:	444e      	add	r6, r9
 8005e16:	eba5 0509 	sub.w	r5, r5, r9
 8005e1a:	6026      	str	r6, [r4, #0]
 8005e1c:	60a5      	str	r5, [r4, #8]
 8005e1e:	463e      	mov	r6, r7
 8005e20:	42be      	cmp	r6, r7
 8005e22:	d900      	bls.n	8005e26 <__ssputs_r+0x72>
 8005e24:	463e      	mov	r6, r7
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	4632      	mov	r2, r6
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	f000 f9c6 	bl	80061bc <memmove>
 8005e30:	68a3      	ldr	r3, [r4, #8]
 8005e32:	1b9b      	subs	r3, r3, r6
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	4433      	add	r3, r6
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	462a      	mov	r2, r5
 8005e44:	f000 fa36 	bl	80062b4 <_realloc_r>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d1e0      	bne.n	8005e10 <__ssputs_r+0x5c>
 8005e4e:	6921      	ldr	r1, [r4, #16]
 8005e50:	4650      	mov	r0, sl
 8005e52:	f7ff fb2d 	bl	80054b0 <_free_r>
 8005e56:	230c      	movs	r3, #12
 8005e58:	f8ca 3000 	str.w	r3, [sl]
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	e7e9      	b.n	8005e3e <__ssputs_r+0x8a>
	...

08005e6c <_svfiprintf_r>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4698      	mov	r8, r3
 8005e72:	898b      	ldrh	r3, [r1, #12]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	b09d      	sub	sp, #116	@ 0x74
 8005e78:	4607      	mov	r7, r0
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	d510      	bpl.n	8005ea2 <_svfiprintf_r+0x36>
 8005e80:	690b      	ldr	r3, [r1, #16]
 8005e82:	b973      	cbnz	r3, 8005ea2 <_svfiprintf_r+0x36>
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	f7ff fb87 	bl	8005598 <_malloc_r>
 8005e8a:	6028      	str	r0, [r5, #0]
 8005e8c:	6128      	str	r0, [r5, #16]
 8005e8e:	b930      	cbnz	r0, 8005e9e <_svfiprintf_r+0x32>
 8005e90:	230c      	movs	r3, #12
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b01d      	add	sp, #116	@ 0x74
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	2340      	movs	r3, #64	@ 0x40
 8005ea0:	616b      	str	r3, [r5, #20]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea6:	2320      	movs	r3, #32
 8005ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb0:	2330      	movs	r3, #48	@ 0x30
 8005eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006050 <_svfiprintf_r+0x1e4>
 8005eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eba:	f04f 0901 	mov.w	r9, #1
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	469a      	mov	sl, r3
 8005ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec6:	b10a      	cbz	r2, 8005ecc <_svfiprintf_r+0x60>
 8005ec8:	2a25      	cmp	r2, #37	@ 0x25
 8005eca:	d1f9      	bne.n	8005ec0 <_svfiprintf_r+0x54>
 8005ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed0:	d00b      	beq.n	8005eea <_svfiprintf_r+0x7e>
 8005ed2:	465b      	mov	r3, fp
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff ff6b 	bl	8005db4 <__ssputs_r>
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f000 80a7 	beq.w	8006032 <_svfiprintf_r+0x1c6>
 8005ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee6:	445a      	add	r2, fp
 8005ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eea:	f89a 3000 	ldrb.w	r3, [sl]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 809f 	beq.w	8006032 <_svfiprintf_r+0x1c6>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8005efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005efe:	f10a 0a01 	add.w	sl, sl, #1
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	9307      	str	r3, [sp, #28]
 8005f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f0c:	4654      	mov	r4, sl
 8005f0e:	2205      	movs	r2, #5
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	484e      	ldr	r0, [pc, #312]	@ (8006050 <_svfiprintf_r+0x1e4>)
 8005f16:	f7fa f95b 	bl	80001d0 <memchr>
 8005f1a:	9a04      	ldr	r2, [sp, #16]
 8005f1c:	b9d8      	cbnz	r0, 8005f56 <_svfiprintf_r+0xea>
 8005f1e:	06d0      	lsls	r0, r2, #27
 8005f20:	bf44      	itt	mi
 8005f22:	2320      	movmi	r3, #32
 8005f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f28:	0711      	lsls	r1, r2, #28
 8005f2a:	bf44      	itt	mi
 8005f2c:	232b      	movmi	r3, #43	@ 0x2b
 8005f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f32:	f89a 3000 	ldrb.w	r3, [sl]
 8005f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f38:	d015      	beq.n	8005f66 <_svfiprintf_r+0xfa>
 8005f3a:	9a07      	ldr	r2, [sp, #28]
 8005f3c:	4654      	mov	r4, sl
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f04f 0c0a 	mov.w	ip, #10
 8005f44:	4621      	mov	r1, r4
 8005f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f4a:	3b30      	subs	r3, #48	@ 0x30
 8005f4c:	2b09      	cmp	r3, #9
 8005f4e:	d94b      	bls.n	8005fe8 <_svfiprintf_r+0x17c>
 8005f50:	b1b0      	cbz	r0, 8005f80 <_svfiprintf_r+0x114>
 8005f52:	9207      	str	r2, [sp, #28]
 8005f54:	e014      	b.n	8005f80 <_svfiprintf_r+0x114>
 8005f56:	eba0 0308 	sub.w	r3, r0, r8
 8005f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	46a2      	mov	sl, r4
 8005f64:	e7d2      	b.n	8005f0c <_svfiprintf_r+0xa0>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	1d19      	adds	r1, r3, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	9103      	str	r1, [sp, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfbb      	ittet	lt
 8005f72:	425b      	neglt	r3, r3
 8005f74:	f042 0202 	orrlt.w	r2, r2, #2
 8005f78:	9307      	strge	r3, [sp, #28]
 8005f7a:	9307      	strlt	r3, [sp, #28]
 8005f7c:	bfb8      	it	lt
 8005f7e:	9204      	strlt	r2, [sp, #16]
 8005f80:	7823      	ldrb	r3, [r4, #0]
 8005f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f84:	d10a      	bne.n	8005f9c <_svfiprintf_r+0x130>
 8005f86:	7863      	ldrb	r3, [r4, #1]
 8005f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f8a:	d132      	bne.n	8005ff2 <_svfiprintf_r+0x186>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	1d1a      	adds	r2, r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	9203      	str	r2, [sp, #12]
 8005f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f98:	3402      	adds	r4, #2
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006060 <_svfiprintf_r+0x1f4>
 8005fa0:	7821      	ldrb	r1, [r4, #0]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	f7fa f913 	bl	80001d0 <memchr>
 8005faa:	b138      	cbz	r0, 8005fbc <_svfiprintf_r+0x150>
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	eba0 000a 	sub.w	r0, r0, sl
 8005fb2:	2240      	movs	r2, #64	@ 0x40
 8005fb4:	4082      	lsls	r2, r0
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	3401      	adds	r4, #1
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc0:	4824      	ldr	r0, [pc, #144]	@ (8006054 <_svfiprintf_r+0x1e8>)
 8005fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fc6:	2206      	movs	r2, #6
 8005fc8:	f7fa f902 	bl	80001d0 <memchr>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d036      	beq.n	800603e <_svfiprintf_r+0x1d2>
 8005fd0:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <_svfiprintf_r+0x1ec>)
 8005fd2:	bb1b      	cbnz	r3, 800601c <_svfiprintf_r+0x1b0>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	3307      	adds	r3, #7
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	3308      	adds	r3, #8
 8005fde:	9303      	str	r3, [sp, #12]
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	4433      	add	r3, r6
 8005fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe6:	e76a      	b.n	8005ebe <_svfiprintf_r+0x52>
 8005fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fec:	460c      	mov	r4, r1
 8005fee:	2001      	movs	r0, #1
 8005ff0:	e7a8      	b.n	8005f44 <_svfiprintf_r+0xd8>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	9305      	str	r3, [sp, #20]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f04f 0c0a 	mov.w	ip, #10
 8005ffe:	4620      	mov	r0, r4
 8006000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006004:	3a30      	subs	r2, #48	@ 0x30
 8006006:	2a09      	cmp	r2, #9
 8006008:	d903      	bls.n	8006012 <_svfiprintf_r+0x1a6>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0c6      	beq.n	8005f9c <_svfiprintf_r+0x130>
 800600e:	9105      	str	r1, [sp, #20]
 8006010:	e7c4      	b.n	8005f9c <_svfiprintf_r+0x130>
 8006012:	fb0c 2101 	mla	r1, ip, r1, r2
 8006016:	4604      	mov	r4, r0
 8006018:	2301      	movs	r3, #1
 800601a:	e7f0      	b.n	8005ffe <_svfiprintf_r+0x192>
 800601c:	ab03      	add	r3, sp, #12
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	462a      	mov	r2, r5
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <_svfiprintf_r+0x1f0>)
 8006024:	a904      	add	r1, sp, #16
 8006026:	4638      	mov	r0, r7
 8006028:	f7fd fe98 	bl	8003d5c <_printf_float>
 800602c:	1c42      	adds	r2, r0, #1
 800602e:	4606      	mov	r6, r0
 8006030:	d1d6      	bne.n	8005fe0 <_svfiprintf_r+0x174>
 8006032:	89ab      	ldrh	r3, [r5, #12]
 8006034:	065b      	lsls	r3, r3, #25
 8006036:	f53f af2d 	bmi.w	8005e94 <_svfiprintf_r+0x28>
 800603a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800603c:	e72c      	b.n	8005e98 <_svfiprintf_r+0x2c>
 800603e:	ab03      	add	r3, sp, #12
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	462a      	mov	r2, r5
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <_svfiprintf_r+0x1f0>)
 8006046:	a904      	add	r1, sp, #16
 8006048:	4638      	mov	r0, r7
 800604a:	f7fe f91f 	bl	800428c <_printf_i>
 800604e:	e7ed      	b.n	800602c <_svfiprintf_r+0x1c0>
 8006050:	080079c0 	.word	0x080079c0
 8006054:	080079ca 	.word	0x080079ca
 8006058:	08003d5d 	.word	0x08003d5d
 800605c:	08005db5 	.word	0x08005db5
 8006060:	080079c6 	.word	0x080079c6

08006064 <__sflush_r>:
 8006064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	0716      	lsls	r6, r2, #28
 800606e:	4605      	mov	r5, r0
 8006070:	460c      	mov	r4, r1
 8006072:	d454      	bmi.n	800611e <__sflush_r+0xba>
 8006074:	684b      	ldr	r3, [r1, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc02      	bgt.n	8006080 <__sflush_r+0x1c>
 800607a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd48      	ble.n	8006112 <__sflush_r+0xae>
 8006080:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006082:	2e00      	cmp	r6, #0
 8006084:	d045      	beq.n	8006112 <__sflush_r+0xae>
 8006086:	2300      	movs	r3, #0
 8006088:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800608c:	682f      	ldr	r7, [r5, #0]
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	d030      	beq.n	80060f6 <__sflush_r+0x92>
 8006094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	0759      	lsls	r1, r3, #29
 800609a:	d505      	bpl.n	80060a8 <__sflush_r+0x44>
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060a2:	b10b      	cbz	r3, 80060a8 <__sflush_r+0x44>
 80060a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060ac:	6a21      	ldr	r1, [r4, #32]
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b0      	blx	r6
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	d106      	bne.n	80060c6 <__sflush_r+0x62>
 80060b8:	6829      	ldr	r1, [r5, #0]
 80060ba:	291d      	cmp	r1, #29
 80060bc:	d82b      	bhi.n	8006116 <__sflush_r+0xb2>
 80060be:	4a2a      	ldr	r2, [pc, #168]	@ (8006168 <__sflush_r+0x104>)
 80060c0:	410a      	asrs	r2, r1
 80060c2:	07d6      	lsls	r6, r2, #31
 80060c4:	d427      	bmi.n	8006116 <__sflush_r+0xb2>
 80060c6:	2200      	movs	r2, #0
 80060c8:	6062      	str	r2, [r4, #4]
 80060ca:	04d9      	lsls	r1, r3, #19
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	6022      	str	r2, [r4, #0]
 80060d0:	d504      	bpl.n	80060dc <__sflush_r+0x78>
 80060d2:	1c42      	adds	r2, r0, #1
 80060d4:	d101      	bne.n	80060da <__sflush_r+0x76>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	b903      	cbnz	r3, 80060dc <__sflush_r+0x78>
 80060da:	6560      	str	r0, [r4, #84]	@ 0x54
 80060dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060de:	602f      	str	r7, [r5, #0]
 80060e0:	b1b9      	cbz	r1, 8006112 <__sflush_r+0xae>
 80060e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d002      	beq.n	80060f0 <__sflush_r+0x8c>
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff f9e0 	bl	80054b0 <_free_r>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80060f4:	e00d      	b.n	8006112 <__sflush_r+0xae>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b0      	blx	r6
 80060fc:	4602      	mov	r2, r0
 80060fe:	1c50      	adds	r0, r2, #1
 8006100:	d1c9      	bne.n	8006096 <__sflush_r+0x32>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c6      	beq.n	8006096 <__sflush_r+0x32>
 8006108:	2b1d      	cmp	r3, #29
 800610a:	d001      	beq.n	8006110 <__sflush_r+0xac>
 800610c:	2b16      	cmp	r3, #22
 800610e:	d11e      	bne.n	800614e <__sflush_r+0xea>
 8006110:	602f      	str	r7, [r5, #0]
 8006112:	2000      	movs	r0, #0
 8006114:	e022      	b.n	800615c <__sflush_r+0xf8>
 8006116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800611a:	b21b      	sxth	r3, r3
 800611c:	e01b      	b.n	8006156 <__sflush_r+0xf2>
 800611e:	690f      	ldr	r7, [r1, #16]
 8006120:	2f00      	cmp	r7, #0
 8006122:	d0f6      	beq.n	8006112 <__sflush_r+0xae>
 8006124:	0793      	lsls	r3, r2, #30
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	bf08      	it	eq
 800612a:	694b      	ldreq	r3, [r1, #20]
 800612c:	600f      	str	r7, [r1, #0]
 800612e:	bf18      	it	ne
 8006130:	2300      	movne	r3, #0
 8006132:	eba6 0807 	sub.w	r8, r6, r7
 8006136:	608b      	str	r3, [r1, #8]
 8006138:	f1b8 0f00 	cmp.w	r8, #0
 800613c:	dde9      	ble.n	8006112 <__sflush_r+0xae>
 800613e:	6a21      	ldr	r1, [r4, #32]
 8006140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006142:	4643      	mov	r3, r8
 8006144:	463a      	mov	r2, r7
 8006146:	4628      	mov	r0, r5
 8006148:	47b0      	blx	r6
 800614a:	2800      	cmp	r0, #0
 800614c:	dc08      	bgt.n	8006160 <__sflush_r+0xfc>
 800614e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006160:	4407      	add	r7, r0
 8006162:	eba8 0800 	sub.w	r8, r8, r0
 8006166:	e7e7      	b.n	8006138 <__sflush_r+0xd4>
 8006168:	dfbffffe 	.word	0xdfbffffe

0800616c <_fflush_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b913      	cbnz	r3, 800617c <_fflush_r+0x10>
 8006176:	2500      	movs	r5, #0
 8006178:	4628      	mov	r0, r5
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	b118      	cbz	r0, 8006186 <_fflush_r+0x1a>
 800617e:	6a03      	ldr	r3, [r0, #32]
 8006180:	b90b      	cbnz	r3, 8006186 <_fflush_r+0x1a>
 8006182:	f7fe fa2f 	bl	80045e4 <__sinit>
 8006186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f3      	beq.n	8006176 <_fflush_r+0xa>
 800618e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006190:	07d0      	lsls	r0, r2, #31
 8006192:	d404      	bmi.n	800619e <_fflush_r+0x32>
 8006194:	0599      	lsls	r1, r3, #22
 8006196:	d402      	bmi.n	800619e <_fflush_r+0x32>
 8006198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800619a:	f7fe fb3a 	bl	8004812 <__retarget_lock_acquire_recursive>
 800619e:	4628      	mov	r0, r5
 80061a0:	4621      	mov	r1, r4
 80061a2:	f7ff ff5f 	bl	8006064 <__sflush_r>
 80061a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061a8:	07da      	lsls	r2, r3, #31
 80061aa:	4605      	mov	r5, r0
 80061ac:	d4e4      	bmi.n	8006178 <_fflush_r+0xc>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	059b      	lsls	r3, r3, #22
 80061b2:	d4e1      	bmi.n	8006178 <_fflush_r+0xc>
 80061b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061b6:	f7fe fb2d 	bl	8004814 <__retarget_lock_release_recursive>
 80061ba:	e7dd      	b.n	8006178 <_fflush_r+0xc>

080061bc <memmove>:
 80061bc:	4288      	cmp	r0, r1
 80061be:	b510      	push	{r4, lr}
 80061c0:	eb01 0402 	add.w	r4, r1, r2
 80061c4:	d902      	bls.n	80061cc <memmove+0x10>
 80061c6:	4284      	cmp	r4, r0
 80061c8:	4623      	mov	r3, r4
 80061ca:	d807      	bhi.n	80061dc <memmove+0x20>
 80061cc:	1e43      	subs	r3, r0, #1
 80061ce:	42a1      	cmp	r1, r4
 80061d0:	d008      	beq.n	80061e4 <memmove+0x28>
 80061d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061da:	e7f8      	b.n	80061ce <memmove+0x12>
 80061dc:	4402      	add	r2, r0
 80061de:	4601      	mov	r1, r0
 80061e0:	428a      	cmp	r2, r1
 80061e2:	d100      	bne.n	80061e6 <memmove+0x2a>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ee:	e7f7      	b.n	80061e0 <memmove+0x24>

080061f0 <_sbrk_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	@ (800620c <_sbrk_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fc ff16 	bl	800302c <_sbrk>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_sbrk_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_sbrk_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	200006c8 	.word	0x200006c8

08006210 <memcpy>:
 8006210:	440a      	add	r2, r1
 8006212:	4291      	cmp	r1, r2
 8006214:	f100 33ff 	add.w	r3, r0, #4294967295
 8006218:	d100      	bne.n	800621c <memcpy+0xc>
 800621a:	4770      	bx	lr
 800621c:	b510      	push	{r4, lr}
 800621e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006226:	4291      	cmp	r1, r2
 8006228:	d1f9      	bne.n	800621e <memcpy+0xe>
 800622a:	bd10      	pop	{r4, pc}

0800622c <__assert_func>:
 800622c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800622e:	4614      	mov	r4, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <__assert_func+0x2c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4605      	mov	r5, r0
 8006238:	68d8      	ldr	r0, [r3, #12]
 800623a:	b954      	cbnz	r4, 8006252 <__assert_func+0x26>
 800623c:	4b07      	ldr	r3, [pc, #28]	@ (800625c <__assert_func+0x30>)
 800623e:	461c      	mov	r4, r3
 8006240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006244:	9100      	str	r1, [sp, #0]
 8006246:	462b      	mov	r3, r5
 8006248:	4905      	ldr	r1, [pc, #20]	@ (8006260 <__assert_func+0x34>)
 800624a:	f000 f86f 	bl	800632c <fiprintf>
 800624e:	f000 f87f 	bl	8006350 <abort>
 8006252:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <__assert_func+0x38>)
 8006254:	e7f4      	b.n	8006240 <__assert_func+0x14>
 8006256:	bf00      	nop
 8006258:	20000034 	.word	0x20000034
 800625c:	08007a16 	.word	0x08007a16
 8006260:	080079e8 	.word	0x080079e8
 8006264:	080079db 	.word	0x080079db

08006268 <_calloc_r>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	fba1 5402 	umull	r5, r4, r1, r2
 800626e:	b93c      	cbnz	r4, 8006280 <_calloc_r+0x18>
 8006270:	4629      	mov	r1, r5
 8006272:	f7ff f991 	bl	8005598 <_malloc_r>
 8006276:	4606      	mov	r6, r0
 8006278:	b928      	cbnz	r0, 8006286 <_calloc_r+0x1e>
 800627a:	2600      	movs	r6, #0
 800627c:	4630      	mov	r0, r6
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	220c      	movs	r2, #12
 8006282:	6002      	str	r2, [r0, #0]
 8006284:	e7f9      	b.n	800627a <_calloc_r+0x12>
 8006286:	462a      	mov	r2, r5
 8006288:	4621      	mov	r1, r4
 800628a:	f7fe fa44 	bl	8004716 <memset>
 800628e:	e7f5      	b.n	800627c <_calloc_r+0x14>

08006290 <__ascii_mbtowc>:
 8006290:	b082      	sub	sp, #8
 8006292:	b901      	cbnz	r1, 8006296 <__ascii_mbtowc+0x6>
 8006294:	a901      	add	r1, sp, #4
 8006296:	b142      	cbz	r2, 80062aa <__ascii_mbtowc+0x1a>
 8006298:	b14b      	cbz	r3, 80062ae <__ascii_mbtowc+0x1e>
 800629a:	7813      	ldrb	r3, [r2, #0]
 800629c:	600b      	str	r3, [r1, #0]
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	1e10      	subs	r0, r2, #0
 80062a2:	bf18      	it	ne
 80062a4:	2001      	movne	r0, #1
 80062a6:	b002      	add	sp, #8
 80062a8:	4770      	bx	lr
 80062aa:	4610      	mov	r0, r2
 80062ac:	e7fb      	b.n	80062a6 <__ascii_mbtowc+0x16>
 80062ae:	f06f 0001 	mvn.w	r0, #1
 80062b2:	e7f8      	b.n	80062a6 <__ascii_mbtowc+0x16>

080062b4 <_realloc_r>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	4680      	mov	r8, r0
 80062ba:	4615      	mov	r5, r2
 80062bc:	460c      	mov	r4, r1
 80062be:	b921      	cbnz	r1, 80062ca <_realloc_r+0x16>
 80062c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4611      	mov	r1, r2
 80062c6:	f7ff b967 	b.w	8005598 <_malloc_r>
 80062ca:	b92a      	cbnz	r2, 80062d8 <_realloc_r+0x24>
 80062cc:	f7ff f8f0 	bl	80054b0 <_free_r>
 80062d0:	2400      	movs	r4, #0
 80062d2:	4620      	mov	r0, r4
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	f000 f841 	bl	800635e <_malloc_usable_size_r>
 80062dc:	4285      	cmp	r5, r0
 80062de:	4606      	mov	r6, r0
 80062e0:	d802      	bhi.n	80062e8 <_realloc_r+0x34>
 80062e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062e6:	d8f4      	bhi.n	80062d2 <_realloc_r+0x1e>
 80062e8:	4629      	mov	r1, r5
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7ff f954 	bl	8005598 <_malloc_r>
 80062f0:	4607      	mov	r7, r0
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0ec      	beq.n	80062d0 <_realloc_r+0x1c>
 80062f6:	42b5      	cmp	r5, r6
 80062f8:	462a      	mov	r2, r5
 80062fa:	4621      	mov	r1, r4
 80062fc:	bf28      	it	cs
 80062fe:	4632      	movcs	r2, r6
 8006300:	f7ff ff86 	bl	8006210 <memcpy>
 8006304:	4621      	mov	r1, r4
 8006306:	4640      	mov	r0, r8
 8006308:	f7ff f8d2 	bl	80054b0 <_free_r>
 800630c:	463c      	mov	r4, r7
 800630e:	e7e0      	b.n	80062d2 <_realloc_r+0x1e>

08006310 <__ascii_wctomb>:
 8006310:	4603      	mov	r3, r0
 8006312:	4608      	mov	r0, r1
 8006314:	b141      	cbz	r1, 8006328 <__ascii_wctomb+0x18>
 8006316:	2aff      	cmp	r2, #255	@ 0xff
 8006318:	d904      	bls.n	8006324 <__ascii_wctomb+0x14>
 800631a:	228a      	movs	r2, #138	@ 0x8a
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	4770      	bx	lr
 8006324:	700a      	strb	r2, [r1, #0]
 8006326:	2001      	movs	r0, #1
 8006328:	4770      	bx	lr
	...

0800632c <fiprintf>:
 800632c:	b40e      	push	{r1, r2, r3}
 800632e:	b503      	push	{r0, r1, lr}
 8006330:	4601      	mov	r1, r0
 8006332:	ab03      	add	r3, sp, #12
 8006334:	4805      	ldr	r0, [pc, #20]	@ (800634c <fiprintf+0x20>)
 8006336:	f853 2b04 	ldr.w	r2, [r3], #4
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	f000 f83f 	bl	80063c0 <_vfiprintf_r>
 8006342:	b002      	add	sp, #8
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	20000034 	.word	0x20000034

08006350 <abort>:
 8006350:	b508      	push	{r3, lr}
 8006352:	2006      	movs	r0, #6
 8006354:	f000 fa08 	bl	8006768 <raise>
 8006358:	2001      	movs	r0, #1
 800635a:	f7fc fdee 	bl	8002f3a <_exit>

0800635e <_malloc_usable_size_r>:
 800635e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006362:	1f18      	subs	r0, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfbc      	itt	lt
 8006368:	580b      	ldrlt	r3, [r1, r0]
 800636a:	18c0      	addlt	r0, r0, r3
 800636c:	4770      	bx	lr

0800636e <__sfputc_r>:
 800636e:	6893      	ldr	r3, [r2, #8]
 8006370:	3b01      	subs	r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	b410      	push	{r4}
 8006376:	6093      	str	r3, [r2, #8]
 8006378:	da08      	bge.n	800638c <__sfputc_r+0x1e>
 800637a:	6994      	ldr	r4, [r2, #24]
 800637c:	42a3      	cmp	r3, r4
 800637e:	db01      	blt.n	8006384 <__sfputc_r+0x16>
 8006380:	290a      	cmp	r1, #10
 8006382:	d103      	bne.n	800638c <__sfputc_r+0x1e>
 8006384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006388:	f000 b932 	b.w	80065f0 <__swbuf_r>
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	1c58      	adds	r0, r3, #1
 8006390:	6010      	str	r0, [r2, #0]
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	4608      	mov	r0, r1
 8006396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800639a:	4770      	bx	lr

0800639c <__sfputs_r>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	4614      	mov	r4, r2
 80063a4:	18d5      	adds	r5, r2, r3
 80063a6:	42ac      	cmp	r4, r5
 80063a8:	d101      	bne.n	80063ae <__sfputs_r+0x12>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e007      	b.n	80063be <__sfputs_r+0x22>
 80063ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b2:	463a      	mov	r2, r7
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ffda 	bl	800636e <__sfputc_r>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	d1f3      	bne.n	80063a6 <__sfputs_r+0xa>
 80063be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063c0 <_vfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	460d      	mov	r5, r1
 80063c6:	b09d      	sub	sp, #116	@ 0x74
 80063c8:	4614      	mov	r4, r2
 80063ca:	4698      	mov	r8, r3
 80063cc:	4606      	mov	r6, r0
 80063ce:	b118      	cbz	r0, 80063d8 <_vfiprintf_r+0x18>
 80063d0:	6a03      	ldr	r3, [r0, #32]
 80063d2:	b90b      	cbnz	r3, 80063d8 <_vfiprintf_r+0x18>
 80063d4:	f7fe f906 	bl	80045e4 <__sinit>
 80063d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063da:	07d9      	lsls	r1, r3, #31
 80063dc:	d405      	bmi.n	80063ea <_vfiprintf_r+0x2a>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	059a      	lsls	r2, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_vfiprintf_r+0x2a>
 80063e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063e6:	f7fe fa14 	bl	8004812 <__retarget_lock_acquire_recursive>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	071b      	lsls	r3, r3, #28
 80063ee:	d501      	bpl.n	80063f4 <_vfiprintf_r+0x34>
 80063f0:	692b      	ldr	r3, [r5, #16]
 80063f2:	b99b      	cbnz	r3, 800641c <_vfiprintf_r+0x5c>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 f938 	bl	800666c <__swsetup_r>
 80063fc:	b170      	cbz	r0, 800641c <_vfiprintf_r+0x5c>
 80063fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006400:	07dc      	lsls	r4, r3, #31
 8006402:	d504      	bpl.n	800640e <_vfiprintf_r+0x4e>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	b01d      	add	sp, #116	@ 0x74
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	0598      	lsls	r0, r3, #22
 8006412:	d4f7      	bmi.n	8006404 <_vfiprintf_r+0x44>
 8006414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006416:	f7fe f9fd 	bl	8004814 <__retarget_lock_release_recursive>
 800641a:	e7f3      	b.n	8006404 <_vfiprintf_r+0x44>
 800641c:	2300      	movs	r3, #0
 800641e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006420:	2320      	movs	r3, #32
 8006422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006426:	f8cd 800c 	str.w	r8, [sp, #12]
 800642a:	2330      	movs	r3, #48	@ 0x30
 800642c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065dc <_vfiprintf_r+0x21c>
 8006430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006434:	f04f 0901 	mov.w	r9, #1
 8006438:	4623      	mov	r3, r4
 800643a:	469a      	mov	sl, r3
 800643c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006440:	b10a      	cbz	r2, 8006446 <_vfiprintf_r+0x86>
 8006442:	2a25      	cmp	r2, #37	@ 0x25
 8006444:	d1f9      	bne.n	800643a <_vfiprintf_r+0x7a>
 8006446:	ebba 0b04 	subs.w	fp, sl, r4
 800644a:	d00b      	beq.n	8006464 <_vfiprintf_r+0xa4>
 800644c:	465b      	mov	r3, fp
 800644e:	4622      	mov	r2, r4
 8006450:	4629      	mov	r1, r5
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ffa2 	bl	800639c <__sfputs_r>
 8006458:	3001      	adds	r0, #1
 800645a:	f000 80a7 	beq.w	80065ac <_vfiprintf_r+0x1ec>
 800645e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006460:	445a      	add	r2, fp
 8006462:	9209      	str	r2, [sp, #36]	@ 0x24
 8006464:	f89a 3000 	ldrb.w	r3, [sl]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 809f 	beq.w	80065ac <_vfiprintf_r+0x1ec>
 800646e:	2300      	movs	r3, #0
 8006470:	f04f 32ff 	mov.w	r2, #4294967295
 8006474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006478:	f10a 0a01 	add.w	sl, sl, #1
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006484:	931a      	str	r3, [sp, #104]	@ 0x68
 8006486:	4654      	mov	r4, sl
 8006488:	2205      	movs	r2, #5
 800648a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648e:	4853      	ldr	r0, [pc, #332]	@ (80065dc <_vfiprintf_r+0x21c>)
 8006490:	f7f9 fe9e 	bl	80001d0 <memchr>
 8006494:	9a04      	ldr	r2, [sp, #16]
 8006496:	b9d8      	cbnz	r0, 80064d0 <_vfiprintf_r+0x110>
 8006498:	06d1      	lsls	r1, r2, #27
 800649a:	bf44      	itt	mi
 800649c:	2320      	movmi	r3, #32
 800649e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064a2:	0713      	lsls	r3, r2, #28
 80064a4:	bf44      	itt	mi
 80064a6:	232b      	movmi	r3, #43	@ 0x2b
 80064a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ac:	f89a 3000 	ldrb.w	r3, [sl]
 80064b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064b2:	d015      	beq.n	80064e0 <_vfiprintf_r+0x120>
 80064b4:	9a07      	ldr	r2, [sp, #28]
 80064b6:	4654      	mov	r4, sl
 80064b8:	2000      	movs	r0, #0
 80064ba:	f04f 0c0a 	mov.w	ip, #10
 80064be:	4621      	mov	r1, r4
 80064c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c4:	3b30      	subs	r3, #48	@ 0x30
 80064c6:	2b09      	cmp	r3, #9
 80064c8:	d94b      	bls.n	8006562 <_vfiprintf_r+0x1a2>
 80064ca:	b1b0      	cbz	r0, 80064fa <_vfiprintf_r+0x13a>
 80064cc:	9207      	str	r2, [sp, #28]
 80064ce:	e014      	b.n	80064fa <_vfiprintf_r+0x13a>
 80064d0:	eba0 0308 	sub.w	r3, r0, r8
 80064d4:	fa09 f303 	lsl.w	r3, r9, r3
 80064d8:	4313      	orrs	r3, r2
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	46a2      	mov	sl, r4
 80064de:	e7d2      	b.n	8006486 <_vfiprintf_r+0xc6>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	1d19      	adds	r1, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	9103      	str	r1, [sp, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bfbb      	ittet	lt
 80064ec:	425b      	neglt	r3, r3
 80064ee:	f042 0202 	orrlt.w	r2, r2, #2
 80064f2:	9307      	strge	r3, [sp, #28]
 80064f4:	9307      	strlt	r3, [sp, #28]
 80064f6:	bfb8      	it	lt
 80064f8:	9204      	strlt	r2, [sp, #16]
 80064fa:	7823      	ldrb	r3, [r4, #0]
 80064fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80064fe:	d10a      	bne.n	8006516 <_vfiprintf_r+0x156>
 8006500:	7863      	ldrb	r3, [r4, #1]
 8006502:	2b2a      	cmp	r3, #42	@ 0x2a
 8006504:	d132      	bne.n	800656c <_vfiprintf_r+0x1ac>
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9203      	str	r2, [sp, #12]
 800650e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006512:	3402      	adds	r4, #2
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065ec <_vfiprintf_r+0x22c>
 800651a:	7821      	ldrb	r1, [r4, #0]
 800651c:	2203      	movs	r2, #3
 800651e:	4650      	mov	r0, sl
 8006520:	f7f9 fe56 	bl	80001d0 <memchr>
 8006524:	b138      	cbz	r0, 8006536 <_vfiprintf_r+0x176>
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	eba0 000a 	sub.w	r0, r0, sl
 800652c:	2240      	movs	r2, #64	@ 0x40
 800652e:	4082      	lsls	r2, r0
 8006530:	4313      	orrs	r3, r2
 8006532:	3401      	adds	r4, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653a:	4829      	ldr	r0, [pc, #164]	@ (80065e0 <_vfiprintf_r+0x220>)
 800653c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006540:	2206      	movs	r2, #6
 8006542:	f7f9 fe45 	bl	80001d0 <memchr>
 8006546:	2800      	cmp	r0, #0
 8006548:	d03f      	beq.n	80065ca <_vfiprintf_r+0x20a>
 800654a:	4b26      	ldr	r3, [pc, #152]	@ (80065e4 <_vfiprintf_r+0x224>)
 800654c:	bb1b      	cbnz	r3, 8006596 <_vfiprintf_r+0x1d6>
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	3308      	adds	r3, #8
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655c:	443b      	add	r3, r7
 800655e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006560:	e76a      	b.n	8006438 <_vfiprintf_r+0x78>
 8006562:	fb0c 3202 	mla	r2, ip, r2, r3
 8006566:	460c      	mov	r4, r1
 8006568:	2001      	movs	r0, #1
 800656a:	e7a8      	b.n	80064be <_vfiprintf_r+0xfe>
 800656c:	2300      	movs	r3, #0
 800656e:	3401      	adds	r4, #1
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0c0a 	mov.w	ip, #10
 8006578:	4620      	mov	r0, r4
 800657a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800657e:	3a30      	subs	r2, #48	@ 0x30
 8006580:	2a09      	cmp	r2, #9
 8006582:	d903      	bls.n	800658c <_vfiprintf_r+0x1cc>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0c6      	beq.n	8006516 <_vfiprintf_r+0x156>
 8006588:	9105      	str	r1, [sp, #20]
 800658a:	e7c4      	b.n	8006516 <_vfiprintf_r+0x156>
 800658c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006590:	4604      	mov	r4, r0
 8006592:	2301      	movs	r3, #1
 8006594:	e7f0      	b.n	8006578 <_vfiprintf_r+0x1b8>
 8006596:	ab03      	add	r3, sp, #12
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	462a      	mov	r2, r5
 800659c:	4b12      	ldr	r3, [pc, #72]	@ (80065e8 <_vfiprintf_r+0x228>)
 800659e:	a904      	add	r1, sp, #16
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7fd fbdb 	bl	8003d5c <_printf_float>
 80065a6:	4607      	mov	r7, r0
 80065a8:	1c78      	adds	r0, r7, #1
 80065aa:	d1d6      	bne.n	800655a <_vfiprintf_r+0x19a>
 80065ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ae:	07d9      	lsls	r1, r3, #31
 80065b0:	d405      	bmi.n	80065be <_vfiprintf_r+0x1fe>
 80065b2:	89ab      	ldrh	r3, [r5, #12]
 80065b4:	059a      	lsls	r2, r3, #22
 80065b6:	d402      	bmi.n	80065be <_vfiprintf_r+0x1fe>
 80065b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ba:	f7fe f92b 	bl	8004814 <__retarget_lock_release_recursive>
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	065b      	lsls	r3, r3, #25
 80065c2:	f53f af1f 	bmi.w	8006404 <_vfiprintf_r+0x44>
 80065c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065c8:	e71e      	b.n	8006408 <_vfiprintf_r+0x48>
 80065ca:	ab03      	add	r3, sp, #12
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	462a      	mov	r2, r5
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <_vfiprintf_r+0x228>)
 80065d2:	a904      	add	r1, sp, #16
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7fd fe59 	bl	800428c <_printf_i>
 80065da:	e7e4      	b.n	80065a6 <_vfiprintf_r+0x1e6>
 80065dc:	080079c0 	.word	0x080079c0
 80065e0:	080079ca 	.word	0x080079ca
 80065e4:	08003d5d 	.word	0x08003d5d
 80065e8:	0800639d 	.word	0x0800639d
 80065ec:	080079c6 	.word	0x080079c6

080065f0 <__swbuf_r>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	460e      	mov	r6, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	4605      	mov	r5, r0
 80065f8:	b118      	cbz	r0, 8006602 <__swbuf_r+0x12>
 80065fa:	6a03      	ldr	r3, [r0, #32]
 80065fc:	b90b      	cbnz	r3, 8006602 <__swbuf_r+0x12>
 80065fe:	f7fd fff1 	bl	80045e4 <__sinit>
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	071a      	lsls	r2, r3, #28
 800660a:	d501      	bpl.n	8006610 <__swbuf_r+0x20>
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	b943      	cbnz	r3, 8006622 <__swbuf_r+0x32>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f82a 	bl	800666c <__swsetup_r>
 8006618:	b118      	cbz	r0, 8006622 <__swbuf_r+0x32>
 800661a:	f04f 37ff 	mov.w	r7, #4294967295
 800661e:	4638      	mov	r0, r7
 8006620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	6922      	ldr	r2, [r4, #16]
 8006626:	1a98      	subs	r0, r3, r2
 8006628:	6963      	ldr	r3, [r4, #20]
 800662a:	b2f6      	uxtb	r6, r6
 800662c:	4283      	cmp	r3, r0
 800662e:	4637      	mov	r7, r6
 8006630:	dc05      	bgt.n	800663e <__swbuf_r+0x4e>
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f7ff fd99 	bl	800616c <_fflush_r>
 800663a:	2800      	cmp	r0, #0
 800663c:	d1ed      	bne.n	800661a <__swbuf_r+0x2a>
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60a3      	str	r3, [r4, #8]
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	701e      	strb	r6, [r3, #0]
 800664c:	6962      	ldr	r2, [r4, #20]
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	429a      	cmp	r2, r3
 8006652:	d004      	beq.n	800665e <__swbuf_r+0x6e>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	07db      	lsls	r3, r3, #31
 8006658:	d5e1      	bpl.n	800661e <__swbuf_r+0x2e>
 800665a:	2e0a      	cmp	r6, #10
 800665c:	d1df      	bne.n	800661e <__swbuf_r+0x2e>
 800665e:	4621      	mov	r1, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff fd83 	bl	800616c <_fflush_r>
 8006666:	2800      	cmp	r0, #0
 8006668:	d0d9      	beq.n	800661e <__swbuf_r+0x2e>
 800666a:	e7d6      	b.n	800661a <__swbuf_r+0x2a>

0800666c <__swsetup_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <__swsetup_r+0xa8>)
 8006670:	4605      	mov	r5, r0
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	460c      	mov	r4, r1
 8006676:	b118      	cbz	r0, 8006680 <__swsetup_r+0x14>
 8006678:	6a03      	ldr	r3, [r0, #32]
 800667a:	b90b      	cbnz	r3, 8006680 <__swsetup_r+0x14>
 800667c:	f7fd ffb2 	bl	80045e4 <__sinit>
 8006680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006684:	0719      	lsls	r1, r3, #28
 8006686:	d422      	bmi.n	80066ce <__swsetup_r+0x62>
 8006688:	06da      	lsls	r2, r3, #27
 800668a:	d407      	bmi.n	800669c <__swsetup_r+0x30>
 800668c:	2209      	movs	r2, #9
 800668e:	602a      	str	r2, [r5, #0]
 8006690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	e033      	b.n	8006704 <__swsetup_r+0x98>
 800669c:	0758      	lsls	r0, r3, #29
 800669e:	d512      	bpl.n	80066c6 <__swsetup_r+0x5a>
 80066a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066a2:	b141      	cbz	r1, 80066b6 <__swsetup_r+0x4a>
 80066a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__swsetup_r+0x46>
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7fe feff 	bl	80054b0 <_free_r>
 80066b2:	2300      	movs	r3, #0
 80066b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	b94b      	cbnz	r3, 80066e6 <__swsetup_r+0x7a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066dc:	d003      	beq.n	80066e6 <__swsetup_r+0x7a>
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f883 	bl	80067ec <__smakebuf_r>
 80066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ea:	f013 0201 	ands.w	r2, r3, #1
 80066ee:	d00a      	beq.n	8006706 <__swsetup_r+0x9a>
 80066f0:	2200      	movs	r2, #0
 80066f2:	60a2      	str	r2, [r4, #8]
 80066f4:	6962      	ldr	r2, [r4, #20]
 80066f6:	4252      	negs	r2, r2
 80066f8:	61a2      	str	r2, [r4, #24]
 80066fa:	6922      	ldr	r2, [r4, #16]
 80066fc:	b942      	cbnz	r2, 8006710 <__swsetup_r+0xa4>
 80066fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006702:	d1c5      	bne.n	8006690 <__swsetup_r+0x24>
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	0799      	lsls	r1, r3, #30
 8006708:	bf58      	it	pl
 800670a:	6962      	ldrpl	r2, [r4, #20]
 800670c:	60a2      	str	r2, [r4, #8]
 800670e:	e7f4      	b.n	80066fa <__swsetup_r+0x8e>
 8006710:	2000      	movs	r0, #0
 8006712:	e7f7      	b.n	8006704 <__swsetup_r+0x98>
 8006714:	20000034 	.word	0x20000034

08006718 <_raise_r>:
 8006718:	291f      	cmp	r1, #31
 800671a:	b538      	push	{r3, r4, r5, lr}
 800671c:	4605      	mov	r5, r0
 800671e:	460c      	mov	r4, r1
 8006720:	d904      	bls.n	800672c <_raise_r+0x14>
 8006722:	2316      	movs	r3, #22
 8006724:	6003      	str	r3, [r0, #0]
 8006726:	f04f 30ff 	mov.w	r0, #4294967295
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800672e:	b112      	cbz	r2, 8006736 <_raise_r+0x1e>
 8006730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006734:	b94b      	cbnz	r3, 800674a <_raise_r+0x32>
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f830 	bl	800679c <_getpid_r>
 800673c:	4622      	mov	r2, r4
 800673e:	4601      	mov	r1, r0
 8006740:	4628      	mov	r0, r5
 8006742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006746:	f000 b817 	b.w	8006778 <_kill_r>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d00a      	beq.n	8006764 <_raise_r+0x4c>
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	d103      	bne.n	800675a <_raise_r+0x42>
 8006752:	2316      	movs	r3, #22
 8006754:	6003      	str	r3, [r0, #0]
 8006756:	2001      	movs	r0, #1
 8006758:	e7e7      	b.n	800672a <_raise_r+0x12>
 800675a:	2100      	movs	r1, #0
 800675c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006760:	4620      	mov	r0, r4
 8006762:	4798      	blx	r3
 8006764:	2000      	movs	r0, #0
 8006766:	e7e0      	b.n	800672a <_raise_r+0x12>

08006768 <raise>:
 8006768:	4b02      	ldr	r3, [pc, #8]	@ (8006774 <raise+0xc>)
 800676a:	4601      	mov	r1, r0
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	f7ff bfd3 	b.w	8006718 <_raise_r>
 8006772:	bf00      	nop
 8006774:	20000034 	.word	0x20000034

08006778 <_kill_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d07      	ldr	r5, [pc, #28]	@ (8006798 <_kill_r+0x20>)
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	4611      	mov	r1, r2
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	f7fc fbc8 	bl	8002f1a <_kill>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d102      	bne.n	8006794 <_kill_r+0x1c>
 800678e:	682b      	ldr	r3, [r5, #0]
 8006790:	b103      	cbz	r3, 8006794 <_kill_r+0x1c>
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	200006c8 	.word	0x200006c8

0800679c <_getpid_r>:
 800679c:	f7fc bbb5 	b.w	8002f0a <_getpid>

080067a0 <__swhatbuf_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	460c      	mov	r4, r1
 80067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a8:	2900      	cmp	r1, #0
 80067aa:	b096      	sub	sp, #88	@ 0x58
 80067ac:	4615      	mov	r5, r2
 80067ae:	461e      	mov	r6, r3
 80067b0:	da0d      	bge.n	80067ce <__swhatbuf_r+0x2e>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067b8:	f04f 0100 	mov.w	r1, #0
 80067bc:	bf14      	ite	ne
 80067be:	2340      	movne	r3, #64	@ 0x40
 80067c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067c4:	2000      	movs	r0, #0
 80067c6:	6031      	str	r1, [r6, #0]
 80067c8:	602b      	str	r3, [r5, #0]
 80067ca:	b016      	add	sp, #88	@ 0x58
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	466a      	mov	r2, sp
 80067d0:	f000 f848 	bl	8006864 <_fstat_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	dbec      	blt.n	80067b2 <__swhatbuf_r+0x12>
 80067d8:	9901      	ldr	r1, [sp, #4]
 80067da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067e2:	4259      	negs	r1, r3
 80067e4:	4159      	adcs	r1, r3
 80067e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ea:	e7eb      	b.n	80067c4 <__swhatbuf_r+0x24>

080067ec <__smakebuf_r>:
 80067ec:	898b      	ldrh	r3, [r1, #12]
 80067ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f0:	079d      	lsls	r5, r3, #30
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	d507      	bpl.n	8006808 <__smakebuf_r+0x1c>
 80067f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2301      	movs	r3, #1
 8006802:	6163      	str	r3, [r4, #20]
 8006804:	b003      	add	sp, #12
 8006806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006808:	ab01      	add	r3, sp, #4
 800680a:	466a      	mov	r2, sp
 800680c:	f7ff ffc8 	bl	80067a0 <__swhatbuf_r>
 8006810:	9f00      	ldr	r7, [sp, #0]
 8006812:	4605      	mov	r5, r0
 8006814:	4639      	mov	r1, r7
 8006816:	4630      	mov	r0, r6
 8006818:	f7fe febe 	bl	8005598 <_malloc_r>
 800681c:	b948      	cbnz	r0, 8006832 <__smakebuf_r+0x46>
 800681e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006822:	059a      	lsls	r2, r3, #22
 8006824:	d4ee      	bmi.n	8006804 <__smakebuf_r+0x18>
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	e7e2      	b.n	80067f8 <__smakebuf_r+0xc>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	6020      	str	r0, [r4, #0]
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006842:	b15b      	cbz	r3, 800685c <__smakebuf_r+0x70>
 8006844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006848:	4630      	mov	r0, r6
 800684a:	f000 f81d 	bl	8006888 <_isatty_r>
 800684e:	b128      	cbz	r0, 800685c <__smakebuf_r+0x70>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	431d      	orrs	r5, r3
 8006860:	81a5      	strh	r5, [r4, #12]
 8006862:	e7cf      	b.n	8006804 <__smakebuf_r+0x18>

08006864 <_fstat_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	@ (8006884 <_fstat_r+0x20>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	4611      	mov	r1, r2
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	f7fc fbb2 	bl	8002fda <_fstat>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d102      	bne.n	8006880 <_fstat_r+0x1c>
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	b103      	cbz	r3, 8006880 <_fstat_r+0x1c>
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	bd38      	pop	{r3, r4, r5, pc}
 8006882:	bf00      	nop
 8006884:	200006c8 	.word	0x200006c8

08006888 <_isatty_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d06      	ldr	r5, [pc, #24]	@ (80068a4 <_isatty_r+0x1c>)
 800688c:	2300      	movs	r3, #0
 800688e:	4604      	mov	r4, r0
 8006890:	4608      	mov	r0, r1
 8006892:	602b      	str	r3, [r5, #0]
 8006894:	f7fc fbb1 	bl	8002ffa <_isatty>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_isatty_r+0x1a>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_isatty_r+0x1a>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	200006c8 	.word	0x200006c8

080068a8 <log10>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	ed2d 8b02 	vpush	{d8}
 80068ae:	ec55 4b10 	vmov	r4, r5, d0
 80068b2:	f000 f949 	bl	8006b48 <__ieee754_log10>
 80068b6:	4622      	mov	r2, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	eeb0 8a40 	vmov.f32	s16, s0
 80068c2:	eef0 8a60 	vmov.f32	s17, s1
 80068c6:	f7fa f931 	bl	8000b2c <__aeabi_dcmpun>
 80068ca:	b998      	cbnz	r0, 80068f4 <log10+0x4c>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	4620      	mov	r0, r4
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7fa f90c 	bl	8000af0 <__aeabi_dcmple>
 80068d8:	b160      	cbz	r0, 80068f4 <log10+0x4c>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e6:	b160      	cbz	r0, 8006902 <log10+0x5a>
 80068e8:	f7fd ff68 	bl	80047bc <__errno>
 80068ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006918 <log10+0x70>
 80068f0:	2322      	movs	r3, #34	@ 0x22
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	eeb0 0a48 	vmov.f32	s0, s16
 80068f8:	eef0 0a68 	vmov.f32	s1, s17
 80068fc:	ecbd 8b02 	vpop	{d8}
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	f7fd ff5b 	bl	80047bc <__errno>
 8006906:	ecbd 8b02 	vpop	{d8}
 800690a:	2321      	movs	r3, #33	@ 0x21
 800690c:	6003      	str	r3, [r0, #0]
 800690e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006912:	4803      	ldr	r0, [pc, #12]	@ (8006920 <log10+0x78>)
 8006914:	f000 b834 	b.w	8006980 <nan>
 8006918:	00000000 	.word	0x00000000
 800691c:	fff00000 	.word	0xfff00000
 8006920:	08007a16 	.word	0x08007a16

08006924 <sqrt>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	ed2d 8b02 	vpush	{d8}
 800692a:	ec55 4b10 	vmov	r4, r5, d0
 800692e:	f000 f82f 	bl	8006990 <__ieee754_sqrt>
 8006932:	4622      	mov	r2, r4
 8006934:	462b      	mov	r3, r5
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	eeb0 8a40 	vmov.f32	s16, s0
 800693e:	eef0 8a60 	vmov.f32	s17, s1
 8006942:	f7fa f8f3 	bl	8000b2c <__aeabi_dcmpun>
 8006946:	b990      	cbnz	r0, 800696e <sqrt+0x4a>
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7fa f8c4 	bl	8000adc <__aeabi_dcmplt>
 8006954:	b158      	cbz	r0, 800696e <sqrt+0x4a>
 8006956:	f7fd ff31 	bl	80047bc <__errno>
 800695a:	2321      	movs	r3, #33	@ 0x21
 800695c:	6003      	str	r3, [r0, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7f9 ff71 	bl	800084c <__aeabi_ddiv>
 800696a:	ec41 0b18 	vmov	d8, r0, r1
 800696e:	eeb0 0a48 	vmov.f32	s0, s16
 8006972:	eef0 0a68 	vmov.f32	s1, s17
 8006976:	ecbd 8b02 	vpop	{d8}
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	0000      	movs	r0, r0
	...

08006980 <nan>:
 8006980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006988 <nan+0x8>
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	00000000 	.word	0x00000000
 800698c:	7ff80000 	.word	0x7ff80000

08006990 <__ieee754_sqrt>:
 8006990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	4a68      	ldr	r2, [pc, #416]	@ (8006b38 <__ieee754_sqrt+0x1a8>)
 8006996:	ec55 4b10 	vmov	r4, r5, d0
 800699a:	43aa      	bics	r2, r5
 800699c:	462b      	mov	r3, r5
 800699e:	4621      	mov	r1, r4
 80069a0:	d110      	bne.n	80069c4 <__ieee754_sqrt+0x34>
 80069a2:	4622      	mov	r2, r4
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4620      	mov	r0, r4
 80069b2:	4629      	mov	r1, r5
 80069b4:	f7f9 fc6a 	bl	800028c <__adddf3>
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	ec45 4b10 	vmov	d0, r4, r5
 80069c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	dc0e      	bgt.n	80069e6 <__ieee754_sqrt+0x56>
 80069c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80069cc:	4322      	orrs	r2, r4
 80069ce:	d0f5      	beq.n	80069bc <__ieee754_sqrt+0x2c>
 80069d0:	b19d      	cbz	r5, 80069fa <__ieee754_sqrt+0x6a>
 80069d2:	4622      	mov	r2, r4
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 fc56 	bl	8000288 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	f7f9 ff34 	bl	800084c <__aeabi_ddiv>
 80069e4:	e7e8      	b.n	80069b8 <__ieee754_sqrt+0x28>
 80069e6:	152a      	asrs	r2, r5, #20
 80069e8:	d115      	bne.n	8006a16 <__ieee754_sqrt+0x86>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e009      	b.n	8006a02 <__ieee754_sqrt+0x72>
 80069ee:	0acb      	lsrs	r3, r1, #11
 80069f0:	3a15      	subs	r2, #21
 80069f2:	0549      	lsls	r1, r1, #21
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0fa      	beq.n	80069ee <__ieee754_sqrt+0x5e>
 80069f8:	e7f7      	b.n	80069ea <__ieee754_sqrt+0x5a>
 80069fa:	462a      	mov	r2, r5
 80069fc:	e7fa      	b.n	80069f4 <__ieee754_sqrt+0x64>
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	3001      	adds	r0, #1
 8006a02:	02dc      	lsls	r4, r3, #11
 8006a04:	d5fb      	bpl.n	80069fe <__ieee754_sqrt+0x6e>
 8006a06:	1e44      	subs	r4, r0, #1
 8006a08:	1b12      	subs	r2, r2, r4
 8006a0a:	f1c0 0420 	rsb	r4, r0, #32
 8006a0e:	fa21 f404 	lsr.w	r4, r1, r4
 8006a12:	4323      	orrs	r3, r4
 8006a14:	4081      	lsls	r1, r0
 8006a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a22:	07d2      	lsls	r2, r2, #31
 8006a24:	bf5c      	itt	pl
 8006a26:	005b      	lslpl	r3, r3, #1
 8006a28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006a2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a30:	bf58      	it	pl
 8006a32:	0049      	lslpl	r1, r1, #1
 8006a34:	2600      	movs	r6, #0
 8006a36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006a3a:	106d      	asrs	r5, r5, #1
 8006a3c:	0049      	lsls	r1, r1, #1
 8006a3e:	2016      	movs	r0, #22
 8006a40:	4632      	mov	r2, r6
 8006a42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006a46:	1917      	adds	r7, r2, r4
 8006a48:	429f      	cmp	r7, r3
 8006a4a:	bfde      	ittt	le
 8006a4c:	193a      	addle	r2, r7, r4
 8006a4e:	1bdb      	suble	r3, r3, r7
 8006a50:	1936      	addle	r6, r6, r4
 8006a52:	0fcf      	lsrs	r7, r1, #31
 8006a54:	3801      	subs	r0, #1
 8006a56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006a5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006a5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006a62:	d1f0      	bne.n	8006a46 <__ieee754_sqrt+0xb6>
 8006a64:	4604      	mov	r4, r0
 8006a66:	2720      	movs	r7, #32
 8006a68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	eb00 0e0c 	add.w	lr, r0, ip
 8006a72:	db02      	blt.n	8006a7a <__ieee754_sqrt+0xea>
 8006a74:	d113      	bne.n	8006a9e <__ieee754_sqrt+0x10e>
 8006a76:	458e      	cmp	lr, r1
 8006a78:	d811      	bhi.n	8006a9e <__ieee754_sqrt+0x10e>
 8006a7a:	f1be 0f00 	cmp.w	lr, #0
 8006a7e:	eb0e 000c 	add.w	r0, lr, ip
 8006a82:	da42      	bge.n	8006b0a <__ieee754_sqrt+0x17a>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	db40      	blt.n	8006b0a <__ieee754_sqrt+0x17a>
 8006a88:	f102 0801 	add.w	r8, r2, #1
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	458e      	cmp	lr, r1
 8006a90:	bf88      	it	hi
 8006a92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a96:	eba1 010e 	sub.w	r1, r1, lr
 8006a9a:	4464      	add	r4, ip
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006aa2:	3f01      	subs	r7, #1
 8006aa4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006aa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006aac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006ab0:	d1dc      	bne.n	8006a6c <__ieee754_sqrt+0xdc>
 8006ab2:	4319      	orrs	r1, r3
 8006ab4:	d01b      	beq.n	8006aee <__ieee754_sqrt+0x15e>
 8006ab6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006b3c <__ieee754_sqrt+0x1ac>
 8006aba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006b40 <__ieee754_sqrt+0x1b0>
 8006abe:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ac2:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7fa f80b 	bl	8000af0 <__aeabi_dcmple>
 8006ada:	b140      	cbz	r0, 8006aee <__ieee754_sqrt+0x15e>
 8006adc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006ae0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ae4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ae8:	d111      	bne.n	8006b0e <__ieee754_sqrt+0x17e>
 8006aea:	3601      	adds	r6, #1
 8006aec:	463c      	mov	r4, r7
 8006aee:	1072      	asrs	r2, r6, #1
 8006af0:	0863      	lsrs	r3, r4, #1
 8006af2:	07f1      	lsls	r1, r6, #31
 8006af4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006af8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006afc:	bf48      	it	mi
 8006afe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006b02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006b06:	4618      	mov	r0, r3
 8006b08:	e756      	b.n	80069b8 <__ieee754_sqrt+0x28>
 8006b0a:	4690      	mov	r8, r2
 8006b0c:	e7be      	b.n	8006a8c <__ieee754_sqrt+0xfc>
 8006b0e:	f7f9 fbbd 	bl	800028c <__adddf3>
 8006b12:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 ffdd 	bl	8000adc <__aeabi_dcmplt>
 8006b22:	b120      	cbz	r0, 8006b2e <__ieee754_sqrt+0x19e>
 8006b24:	1ca0      	adds	r0, r4, #2
 8006b26:	bf08      	it	eq
 8006b28:	3601      	addeq	r6, #1
 8006b2a:	3402      	adds	r4, #2
 8006b2c:	e7df      	b.n	8006aee <__ieee754_sqrt+0x15e>
 8006b2e:	1c63      	adds	r3, r4, #1
 8006b30:	f023 0401 	bic.w	r4, r3, #1
 8006b34:	e7db      	b.n	8006aee <__ieee754_sqrt+0x15e>
 8006b36:	bf00      	nop
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	200001f8 	.word	0x200001f8
 8006b40:	200001f0 	.word	0x200001f0
 8006b44:	00000000 	.word	0x00000000

08006b48 <__ieee754_log10>:
 8006b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	ec55 4b10 	vmov	r4, r5, d0
 8006b50:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8006b54:	ed2d 8b02 	vpush	{d8}
 8006b58:	462b      	mov	r3, r5
 8006b5a:	da2e      	bge.n	8006bba <__ieee754_log10+0x72>
 8006b5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006b60:	4322      	orrs	r2, r4
 8006b62:	d10b      	bne.n	8006b7c <__ieee754_log10+0x34>
 8006b64:	493a      	ldr	r1, [pc, #232]	@ (8006c50 <__ieee754_log10+0x108>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f7f9 fe6e 	bl	800084c <__aeabi_ddiv>
 8006b70:	ecbd 8b02 	vpop	{d8}
 8006b74:	ec41 0b10 	vmov	d0, r0, r1
 8006b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	da07      	bge.n	8006b90 <__ieee754_log10+0x48>
 8006b80:	4622      	mov	r2, r4
 8006b82:	4620      	mov	r0, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	f7f9 fb7f 	bl	8000288 <__aeabi_dsub>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e7ed      	b.n	8006b6c <__ieee754_log10+0x24>
 8006b90:	4b30      	ldr	r3, [pc, #192]	@ (8006c54 <__ieee754_log10+0x10c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fd2e 	bl	80005f8 <__aeabi_dmul>
 8006b9c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	492c      	ldr	r1, [pc, #176]	@ (8006c58 <__ieee754_log10+0x110>)
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	dd08      	ble.n	8006bbe <__ieee754_log10+0x76>
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb6a 	bl	800028c <__adddf3>
 8006bb8:	e7da      	b.n	8006b70 <__ieee754_log10+0x28>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	e7f3      	b.n	8006ba6 <__ieee754_log10+0x5e>
 8006bbe:	1518      	asrs	r0, r3, #20
 8006bc0:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8006bc4:	4410      	add	r0, r2
 8006bc6:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8006bca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006bce:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8006bd2:	f7f9 fca7 	bl	8000524 <__aeabi_i2d>
 8006bd6:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8006bda:	3303      	adds	r3, #3
 8006bdc:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8006be0:	a315      	add	r3, pc, #84	@ (adr r3, 8006c38 <__ieee754_log10+0xf0>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	ec45 4b18 	vmov	d8, r4, r5
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	f7f9 fd03 	bl	80005f8 <__aeabi_dmul>
 8006bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf6:	eef0 0a68 	vmov.f32	s1, s17
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	f000 f82f 	bl	8006c60 <__ieee754_log>
 8006c02:	a30f      	add	r3, pc, #60	@ (adr r3, 8006c40 <__ieee754_log10+0xf8>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	ec51 0b10 	vmov	r0, r1, d0
 8006c0c:	f7f9 fcf4 	bl	80005f8 <__aeabi_dmul>
 8006c10:	4622      	mov	r2, r4
 8006c12:	462b      	mov	r3, r5
 8006c14:	f7f9 fb3a 	bl	800028c <__adddf3>
 8006c18:	a30b      	add	r3, pc, #44	@ (adr r3, 8006c48 <__ieee754_log10+0x100>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	4604      	mov	r4, r0
 8006c20:	460d      	mov	r5, r1
 8006c22:	4630      	mov	r0, r6
 8006c24:	4639      	mov	r1, r7
 8006c26:	f7f9 fce7 	bl	80005f8 <__aeabi_dmul>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	e7bf      	b.n	8006bb4 <__ieee754_log10+0x6c>
 8006c34:	f3af 8000 	nop.w
 8006c38:	11f12b36 	.word	0x11f12b36
 8006c3c:	3d59fef3 	.word	0x3d59fef3
 8006c40:	1526e50e 	.word	0x1526e50e
 8006c44:	3fdbcb7b 	.word	0x3fdbcb7b
 8006c48:	509f6000 	.word	0x509f6000
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	c3500000 	.word	0xc3500000
 8006c54:	43500000 	.word	0x43500000
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	00000000 	.word	0x00000000

08006c60 <__ieee754_log>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	ec51 0b10 	vmov	r0, r1, d0
 8006c68:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006c6c:	b087      	sub	sp, #28
 8006c6e:	460d      	mov	r5, r1
 8006c70:	da26      	bge.n	8006cc0 <__ieee754_log+0x60>
 8006c72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c76:	4303      	orrs	r3, r0
 8006c78:	4602      	mov	r2, r0
 8006c7a:	d10a      	bne.n	8006c92 <__ieee754_log+0x32>
 8006c7c:	49ce      	ldr	r1, [pc, #824]	@ (8006fb8 <__ieee754_log+0x358>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7f9 fde2 	bl	800084c <__aeabi_ddiv>
 8006c88:	ec41 0b10 	vmov	d0, r0, r1
 8006c8c:	b007      	add	sp, #28
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	2900      	cmp	r1, #0
 8006c94:	da05      	bge.n	8006ca2 <__ieee754_log+0x42>
 8006c96:	460b      	mov	r3, r1
 8006c98:	f7f9 faf6 	bl	8000288 <__aeabi_dsub>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e7f0      	b.n	8006c84 <__ieee754_log+0x24>
 8006ca2:	4bc6      	ldr	r3, [pc, #792]	@ (8006fbc <__ieee754_log+0x35c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f7f9 fca7 	bl	80005f8 <__aeabi_dmul>
 8006caa:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8006cae:	460d      	mov	r5, r1
 8006cb0:	4ac3      	ldr	r2, [pc, #780]	@ (8006fc0 <__ieee754_log+0x360>)
 8006cb2:	4295      	cmp	r5, r2
 8006cb4:	dd06      	ble.n	8006cc4 <__ieee754_log+0x64>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	f7f9 fae7 	bl	800028c <__adddf3>
 8006cbe:	e7e3      	b.n	8006c88 <__ieee754_log+0x28>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e7f5      	b.n	8006cb0 <__ieee754_log+0x50>
 8006cc4:	152c      	asrs	r4, r5, #20
 8006cc6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8006cca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cce:	441c      	add	r4, r3
 8006cd0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8006cd4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8006cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cdc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8006ce0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8006ce4:	ea42 0105 	orr.w	r1, r2, r5
 8006ce8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006cec:	2200      	movs	r2, #0
 8006cee:	4bb5      	ldr	r3, [pc, #724]	@ (8006fc4 <__ieee754_log+0x364>)
 8006cf0:	f7f9 faca 	bl	8000288 <__aeabi_dsub>
 8006cf4:	1cab      	adds	r3, r5, #2
 8006cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	4682      	mov	sl, r0
 8006cfe:	468b      	mov	fp, r1
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	dc53      	bgt.n	8006dae <__ieee754_log+0x14e>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f7f9 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d0c:	b1d0      	cbz	r0, 8006d44 <__ieee754_log+0xe4>
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	f000 8120 	beq.w	8006f54 <__ieee754_log+0x2f4>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7f9 fc05 	bl	8000524 <__aeabi_i2d>
 8006d1a:	a391      	add	r3, pc, #580	@ (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	4606      	mov	r6, r0
 8006d22:	460f      	mov	r7, r1
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	a38f      	add	r3, pc, #572	@ (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	e7ba      	b.n	8006cba <__ieee754_log+0x5a>
 8006d44:	a38a      	add	r3, pc, #552	@ (adr r3, 8006f70 <__ieee754_log+0x310>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	f7f9 fc53 	bl	80005f8 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	2000      	movs	r0, #0
 8006d58:	499b      	ldr	r1, [pc, #620]	@ (8006fc8 <__ieee754_log+0x368>)
 8006d5a:	f7f9 fa95 	bl	8000288 <__aeabi_dsub>
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4606      	mov	r6, r0
 8006d62:	460f      	mov	r7, r1
 8006d64:	465b      	mov	r3, fp
 8006d66:	4650      	mov	r0, sl
 8006d68:	4659      	mov	r1, fp
 8006d6a:	f7f9 fc45 	bl	80005f8 <__aeabi_dmul>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fc3f 	bl	80005f8 <__aeabi_dmul>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	b914      	cbnz	r4, 8006d86 <__ieee754_log+0x126>
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	e0a0      	b.n	8006ec8 <__ieee754_log+0x268>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7f9 fbcc 	bl	8000524 <__aeabi_i2d>
 8006d8c:	a374      	add	r3, pc, #464	@ (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	f7f9 fc2f 	bl	80005f8 <__aeabi_dmul>
 8006d9a:	a373      	add	r3, pc, #460	@ (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fc26 	bl	80005f8 <__aeabi_dmul>
 8006dac:	e0a5      	b.n	8006efa <__ieee754_log+0x29a>
 8006dae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006db2:	f7f9 fa6b 	bl	800028c <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	f7f9 fd45 	bl	800084c <__aeabi_ddiv>
 8006dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7f9 fbac 	bl	8000524 <__aeabi_i2d>
 8006dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006de4:	f7f9 fc08 	bl	80005f8 <__aeabi_dmul>
 8006de8:	a363      	add	r3, pc, #396	@ (adr r3, 8006f78 <__ieee754_log+0x318>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	f7f9 fc01 	bl	80005f8 <__aeabi_dmul>
 8006df6:	a362      	add	r3, pc, #392	@ (adr r3, 8006f80 <__ieee754_log+0x320>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa46 	bl	800028c <__adddf3>
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	f7f9 fbf8 	bl	80005f8 <__aeabi_dmul>
 8006e08:	a35f      	add	r3, pc, #380	@ (adr r3, 8006f88 <__ieee754_log+0x328>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa3d 	bl	800028c <__adddf3>
 8006e12:	4642      	mov	r2, r8
 8006e14:	464b      	mov	r3, r9
 8006e16:	f7f9 fbef 	bl	80005f8 <__aeabi_dmul>
 8006e1a:	a35d      	add	r3, pc, #372	@ (adr r3, 8006f90 <__ieee754_log+0x330>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 fa34 	bl	800028c <__adddf3>
 8006e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	a35a      	add	r3, pc, #360	@ (adr r3, 8006f98 <__ieee754_log+0x338>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f7f9 fbdd 	bl	80005f8 <__aeabi_dmul>
 8006e3e:	a358      	add	r3, pc, #352	@ (adr r3, 8006fa0 <__ieee754_log+0x340>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	4642      	mov	r2, r8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	f7f9 fbd4 	bl	80005f8 <__aeabi_dmul>
 8006e50:	a355      	add	r3, pc, #340	@ (adr r3, 8006fa8 <__ieee754_log+0x348>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fa19 	bl	800028c <__adddf3>
 8006e5a:	4642      	mov	r2, r8
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	f7f9 fbcb 	bl	80005f8 <__aeabi_dmul>
 8006e62:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e72:	f7f9 fa0b 	bl	800028c <__adddf3>
 8006e76:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006e7a:	3551      	adds	r5, #81	@ 0x51
 8006e7c:	4335      	orrs	r5, r6
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4680      	mov	r8, r0
 8006e82:	4689      	mov	r9, r1
 8006e84:	dd48      	ble.n	8006f18 <__ieee754_log+0x2b8>
 8006e86:	4b50      	ldr	r3, [pc, #320]	@ (8006fc8 <__ieee754_log+0x368>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	f7f9 fbb3 	bl	80005f8 <__aeabi_dmul>
 8006e92:	4652      	mov	r2, sl
 8006e94:	465b      	mov	r3, fp
 8006e96:	f7f9 fbaf 	bl	80005f8 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	460f      	mov	r7, r1
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 f9f1 	bl	800028c <__adddf3>
 8006eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	4689      	mov	r9, r1
 8006eb6:	b964      	cbnz	r4, 8006ed2 <__ieee754_log+0x272>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 f9e2 	bl	8000288 <__aeabi_dsub>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4659      	mov	r1, fp
 8006ecc:	f7f9 f9dc 	bl	8000288 <__aeabi_dsub>
 8006ed0:	e6da      	b.n	8006c88 <__ieee754_log+0x28>
 8006ed2:	a323      	add	r3, pc, #140	@ (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006edc:	f7f9 fb8c 	bl	80005f8 <__aeabi_dmul>
 8006ee0:	a321      	add	r3, pc, #132	@ (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 f9c1 	bl	8000288 <__aeabi_dsub>
 8006f06:	4652      	mov	r2, sl
 8006f08:	465b      	mov	r3, fp
 8006f0a:	f7f9 f9bd 	bl	8000288 <__aeabi_dsub>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	e7d9      	b.n	8006ecc <__ieee754_log+0x26c>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f7f9 f9b2 	bl	8000288 <__aeabi_dsub>
 8006f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f28:	f7f9 fb66 	bl	80005f8 <__aeabi_dmul>
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	460f      	mov	r7, r1
 8006f30:	2c00      	cmp	r4, #0
 8006f32:	f43f af25 	beq.w	8006d80 <__ieee754_log+0x120>
 8006f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f40:	f7f9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8006f44:	a308      	add	r3, pc, #32	@ (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f52:	e729      	b.n	8006da8 <__ieee754_log+0x148>
 8006f54:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8006fb0 <__ieee754_log+0x350>
 8006f58:	e698      	b.n	8006c8c <__ieee754_log+0x2c>
 8006f5a:	bf00      	nop
 8006f5c:	f3af 8000 	nop.w
 8006f60:	fee00000 	.word	0xfee00000
 8006f64:	3fe62e42 	.word	0x3fe62e42
 8006f68:	35793c76 	.word	0x35793c76
 8006f6c:	3dea39ef 	.word	0x3dea39ef
 8006f70:	55555555 	.word	0x55555555
 8006f74:	3fd55555 	.word	0x3fd55555
 8006f78:	df3e5244 	.word	0xdf3e5244
 8006f7c:	3fc2f112 	.word	0x3fc2f112
 8006f80:	96cb03de 	.word	0x96cb03de
 8006f84:	3fc74664 	.word	0x3fc74664
 8006f88:	94229359 	.word	0x94229359
 8006f8c:	3fd24924 	.word	0x3fd24924
 8006f90:	55555593 	.word	0x55555593
 8006f94:	3fe55555 	.word	0x3fe55555
 8006f98:	d078c69f 	.word	0xd078c69f
 8006f9c:	3fc39a09 	.word	0x3fc39a09
 8006fa0:	1d8e78af 	.word	0x1d8e78af
 8006fa4:	3fcc71c5 	.word	0x3fcc71c5
 8006fa8:	9997fa04 	.word	0x9997fa04
 8006fac:	3fd99999 	.word	0x3fd99999
	...
 8006fb8:	c3500000 	.word	0xc3500000
 8006fbc:	43500000 	.word	0x43500000
 8006fc0:	7fefffff 	.word	0x7fefffff
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	3fe00000 	.word	0x3fe00000

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
