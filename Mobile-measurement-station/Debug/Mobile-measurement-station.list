
Mobile-measurement-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002fd8  08002fd8  00003fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  00005008  2**0
                  CONTENTS
  4 .ARM          00000000  08003004  08003004  00005008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003004  08003004  00005008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003008  08003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  0800300c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000008  08003014  00005008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08003014  00005040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a98  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001429  00000000  00000000  0000bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0000cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005dd  00000000  00000000  0000d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9d8  00000000  00000000  0000dcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062b8  00000000  00000000  0002d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5095  00000000  00000000  00033965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e89fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000210c  00000000  00000000  000e8a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000eab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002fc0 	.word	0x08002fc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002fc0 	.word	0x08002fc0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007f0:	4907      	ldr	r1, [pc, #28]	@ (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4013      	ands	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ffe3 	bl	80007e4 <LL_AHB2_GRP1_EnableClock>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
         );
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff8e 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <LL_RCC_MSI_Enable+0x1c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <LL_RCC_MSI_Enable+0x1c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_RCC_MSI_IsReady+0x20>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d101      	bne.n	80009bc <LL_RCC_MSI_IsReady+0x14>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <LL_RCC_MSI_IsReady+0x16>
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000

080009cc <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <LL_RCC_MSI_SetRange+0x24>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <LL_RCC_MSI_SetRange+0x24>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	4904      	ldr	r1, [pc, #16]	@ (8000a3c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	604b      	str	r3, [r1, #4]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0203 	bic.w	r2, r3, #3
 8000a50:	4904      	ldr	r1, [pc, #16]	@ (8000a64 <LL_RCC_SetSysClkSource+0x24>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000

08000a68 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <LL_RCC_GetSysClkSource+0x18>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a94:	4904      	ldr	r1, [pc, #16]	@ (8000aa8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000

08000aac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000abc:	4904      	ldr	r1, [pc, #16]	@ (8000ad0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	608b      	str	r3, [r1, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000ae4:	4904      	ldr	r1, [pc, #16]	@ (8000af8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	608b      	str	r3, [r1, #8]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000

08000afc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000

08000b2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000

08000b5c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 0207 	bic.w	r2, r3, #7
 8000b6c:	4904      	ldr	r1, [pc, #16]	@ (8000b80 <LL_FLASH_SetLatency+0x24>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	600b      	str	r3, [r1, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40022000 	.word	0x40022000

08000b84 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <LL_FLASH_GetLatency+0x18>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000bb0:	4904      	ldr	r1, [pc, #16]	@ (8000bc4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd8:	d101      	bne.n	8000bde <LL_PWR_IsActiveFlag_VOS+0x16>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40007000 	.word	0x40007000

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff98 	bl	8000b2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000bfc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000c00:	f7ff ff7c 	bl	8000afc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f7ff fe0d 	bl	8000824 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000c0a:	f7ff fe2f 	bl	800086c <__NVIC_GetPriorityGrouping>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2200      	movs	r2, #0
 8000c12:	210f      	movs	r1, #15
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe61 	bl	80008dc <NVIC_EncodePriority>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c22:	f7ff fe31 	bl	8000888 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f843 	bl	8000cb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(4000);
 8000c2a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c2e:	f7ff fe89 	bl	8000944 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f7ff fdef 	bl	8000814 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c36:	f001 fde7 	bl	8002808 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000c3a:	f001 f8ef 	bl	8001e1c <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  MX_TIM3_Init();
 8000c3e:	f001 fe43 	bl	80028c8 <MX_TIM3_Init>
  PWM_GPIO_init();
 8000c42:	f001 fe9d 	bl	8002980 <PWM_GPIO_init>
  init_ControlerButtons();
 8000c46:	f000 fea3 	bl	8001990 <init_ControlerButtons>

  nRF24_InitGPIO();
 8000c4a:	f000 fbcb 	bl	80013e4 <nRF24_InitGPIO>
  nRF24_Init(nRF24_RECEIVER);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 fbec 	bl	800142c <nRF24_Init>
    nRF24_SetRXAddress(0, (uint8_t *)"Odb",nRF24_RECEIVER);
 8000c54:	2201      	movs	r2, #1
 8000c56:	4914      	ldr	r1, [pc, #80]	@ (8000ca8 <main+0xb8>)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fd41 	bl	80016e0 <nRF24_SetRXAddress>
    nRF24_SetTXAddress((uint8_t *)"Nad",nRF24_RECEIVER);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4812      	ldr	r0, [pc, #72]	@ (8000cac <main+0xbc>)
 8000c62:	f000 fc61 	bl	8001528 <nRF24_SetTXAddress>
    nRF24_RX_Mode(nRF24_RECEIVER);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fcf4 	bl	8001654 <nRF24_RX_Mode>
  /*  uint8_t stat1 = nRF24_ReadStatus(nRF24_TRANSMITER);*/
    uint8_t stat2 = nRF24_ReadStatus(nRF24_RECEIVER);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fb77 	bl	8001360 <nRF24_ReadStatus>
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint8_t input = 128;
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	71bb      	strb	r3, [r7, #6]
  	  uint8_t output = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	717b      	strb	r3, [r7, #5]
  	  uint8_t size = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	713b      	strb	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(nRF24_RXAvailible(nRF24_RECEIVER))
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fd8e 	bl	80017a4 <nRF24_RXAvailible>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <main+0xaa>
	  	  	  {
	  	  	  		  nRF24_ReadRXPaylaod(&output, &size, nRF24_RECEIVER);
 8000c8e:	1d39      	adds	r1, r7, #4
 8000c90:	1d7b      	adds	r3, r7, #5
 8000c92:	2201      	movs	r2, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fd5e 	bl	8001756 <nRF24_ReadRXPaylaod>
	  	  	  }
	  if (output == 128){
 8000c9a:	797b      	ldrb	r3, [r7, #5]
 8000c9c:	2b80      	cmp	r3, #128	@ 0x80
 8000c9e:	d1f0      	bne.n	8000c82 <main+0x92>
		  Robot_Drive_Forward();
 8000ca0:	f001 fec8 	bl	8002a34 <Robot_Drive_Forward>
	  if(nRF24_RXAvailible(nRF24_RECEIVER))
 8000ca4:	e7ed      	b.n	8000c82 <main+0x92>
 8000ca6:	bf00      	nop
 8000ca8:	08002fd8 	.word	0x08002fd8
 8000cac:	08002fdc 	.word	0x08002fdc

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff51 	bl	8000b5c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ff62 	bl	8000b84 <LL_FLASH_GetLatency>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1fa      	bne.n	8000cbc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000cc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cca:	f7ff ff69 	bl	8000ba0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ff7a 	bl	8000bc8 <LL_PWR_IsActiveFlag_VOS>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1fa      	bne.n	8000cd0 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8000cda:	f7ff fe55 	bl	8000988 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000cde:	bf00      	nop
 8000ce0:	f7ff fe62 	bl	80009a8 <LL_RCC_MSI_IsReady>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1fa      	bne.n	8000ce0 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000cea:	f7ff fe6f 	bl	80009cc <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000cee:	2060      	movs	r0, #96	@ 0x60
 8000cf0:	f7ff fe7c 	bl	80009ec <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fe8d 	bl	8000a14 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fea0 	bl	8000a40 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000d00:	bf00      	nop
 8000d02:	f7ff feb1 	bl	8000a68 <LL_RCC_GetSysClkSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1fa      	bne.n	8000d02 <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff feb9 	bl	8000a84 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff feca 	bl	8000aac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fedb 	bl	8000ad4 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000d1e:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <SystemClock_Config+0x80>)
 8000d20:	f002 f89e 	bl	8002e60 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <SystemClock_Config+0x80>)
 8000d26:	f002 f8d1 	bl	8002ecc <LL_SetSystemCoreClock>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	003d0900 	.word	0x003d0900

08000d34 <SysTick_Handler>:
	        // Just wait
	    }
}

void SysTick_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	    Tick++; // Increase system timer
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Handler+0x18>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <SysTick_Handler+0x18>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000024 	.word	0x20000024

08000d50 <LL_AHB2_GRP1_EnableClock>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d5c:	4907      	ldr	r1, [pc, #28]	@ (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	619a      	str	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <nRF24_Delay>:

static uint8_t addr_p0_backup[NRF24_ADDR_SIZE];
static uint8_t nrf24_rx_flag;

void nRF24_Delay(uint8_t time)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(time);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 f859 	bl	8002e7c <LL_mDelay>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <nRF24_ReadRegister>:
static uint8_t nRF24_ReadRegister(uint8_t reg,uint8_t device)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	4613      	mov	r3, r2
 8000de0:	71bb      	strb	r3, [r7, #6]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	71fb      	strb	r3, [r7, #7]

	if(device == 0)
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <nRF24_ReadRegister+0x20>
		spi_cs_set_low();
 8000dec:	f001 f97c 	bl	80020e8 <spi_cs_set_low>
 8000df0:	e004      	b.n	8000dfc <nRF24_ReadRegister+0x2a>
	else if(device == 1)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d101      	bne.n	8000dfc <nRF24_ReadRegister+0x2a>
		spi_cs2_set_low();
 8000df8:	f001 f98e 	bl	8002118 <spi_cs2_set_low>

	spi_write_data(&reg, 1);
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 f995 	bl	8002130 <spi_write_data>
	spi_read_data(&result, 1);
 8000e06:	f107 030f 	add.w	r3, r7, #15
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f9db 	bl	80021c8 <spi_read_data>
	if(device == 0)
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <nRF24_ReadRegister+0x4c>
		spi_cs_set_high();
 8000e18:	f001 f95a 	bl	80020d0 <spi_cs_set_high>
 8000e1c:	e004      	b.n	8000e28 <nRF24_ReadRegister+0x56>
	else if(device == 1)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <nRF24_ReadRegister+0x56>
		spi_cs2_set_high();
 8000e24:	f001 f96c 	bl	8002100 <spi_cs2_set_high>

	return result;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len,uint8_t device)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	460b      	mov	r3, r1
 8000e44:	71bb      	strb	r3, [r7, #6]
 8000e46:	4613      	mov	r3, r2
 8000e48:	717b      	strb	r3, [r7, #5]

	if(device == 0)
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <nRF24_ReadRegisters+0x24>
		spi_cs_set_low();
 8000e50:	f001 f94a 	bl	80020e8 <spi_cs_set_low>
 8000e54:	e004      	b.n	8000e60 <nRF24_ReadRegisters+0x2e>
	else if(device == 1)
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <nRF24_ReadRegisters+0x2e>
		spi_cs2_set_low();
 8000e5c:	f001 f95c 	bl	8002118 <spi_cs2_set_low>
	reg = NRF24_CMD_R_REGISTER | reg;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	71fb      	strb	r3, [r7, #7]
	spi_write_data(&reg, 1);
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 f961 	bl	8002130 <spi_write_data>
	spi_read_data(ret, len);
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	4619      	mov	r1, r3
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f001 f9a8 	bl	80021c8 <spi_read_data>
	if(device == 0)
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <nRF24_ReadRegisters+0x52>
		spi_cs_set_high();
 8000e7e:	f001 f927 	bl	80020d0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 8000e82:	e004      	b.n	8000e8e <nRF24_ReadRegisters+0x5c>
	else if(device == 1)
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d101      	bne.n	8000e8e <nRF24_ReadRegisters+0x5c>
		spi_cs2_set_high();
 8000e8a:	f001 f939 	bl	8002100 <spi_cs2_set_high>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val,uint8_t device)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	71bb      	strb	r3, [r7, #6]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	717b      	strb	r3, [r7, #5]

	if(device == 0)
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <nRF24_WriteRegister+0x1e>
		spi_cs_set_low();
 8000eae:	f001 f91b 	bl	80020e8 <spi_cs_set_low>
 8000eb2:	e004      	b.n	8000ebe <nRF24_WriteRegister+0x28>
	else if(device == 1)
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <nRF24_WriteRegister+0x28>
		spi_cs2_set_low();
 8000eba:	f001 f92d 	bl	8002118 <spi_cs2_set_low>
	uint8_t tmp[2];
	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	737b      	strb	r3, [r7, #13]
	spi_write_data(tmp, 2);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f92c 	bl	8002130 <spi_write_data>
	if(device == 0)
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <nRF24_WriteRegister+0x4e>
		spi_cs_set_high();
 8000ede:	f001 f8f7 	bl	80020d0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 8000ee2:	e004      	b.n	8000eee <nRF24_WriteRegister+0x58>
	else if(device == 1)
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <nRF24_WriteRegister+0x58>
		spi_cs2_set_high();
 8000eea:	f001 f909 	bl	8002100 <spi_cs2_set_high>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len,uint8_t device)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]

	reg = NRF24_CMD_W_REGISTER | reg;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	71fb      	strb	r3, [r7, #7]

	if(device == 0)
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <nRF24_WriteRegisters+0x2e>
		spi_cs_set_low();
 8000f1e:	f001 f8e3 	bl	80020e8 <spi_cs_set_low>
 8000f22:	e004      	b.n	8000f2e <nRF24_WriteRegisters+0x38>
	else if(device == 1)
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <nRF24_WriteRegisters+0x38>
		spi_cs2_set_low();
 8000f2a:	f001 f8f5 	bl	8002118 <spi_cs2_set_low>
	spi_write_data(&reg, 1);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f8fc 	bl	8002130 <spi_write_data>
	spi_write_data(val, len);
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f001 f8f7 	bl	8002130 <spi_write_data>
	if(device == 0)
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <nRF24_WriteRegisters+0x58>
		spi_cs_set_high();
 8000f48:	f001 f8c2 	bl	80020d0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 8000f4c:	e004      	b.n	8000f58 <nRF24_WriteRegisters+0x62>
	else if(device == 1)
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d101      	bne.n	8000f58 <nRF24_WriteRegisters+0x62>
		spi_cs2_set_high();
 8000f54:	f001 f8d4 	bl	8002100 <spi_cs2_set_high>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev,uint8_t device)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP,device);
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	4619      	mov	r1, r3
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff ff2c 	bl	8000dd2 <nRF24_ReadRegister>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b25a      	sxtb	r2, r3
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup,device);
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2006      	movs	r0, #6
 8000f9e:	f7ff ff7a 	bl	8000e96 <nRF24_WriteRegister>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr,uint8_t device)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	71bb      	strb	r3, [r7, #6]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP,device);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2006      	movs	r0, #6
 8000fc0:	f7ff ff07 	bl	8000dd2 <nRF24_ReadRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000fce:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d104      	bne.n	8000fe0 <nRF24_SetDataRate+0x36>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e006      	b.n	8000fee <nRF24_SetDataRate+0x44>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d103      	bne.n	8000fee <nRF24_SetDataRate+0x44>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup,device);
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2006      	movs	r0, #6
 8000ff6:	f7ff ff4e 	bl	8000e96 <nRF24_WriteRegister>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff,uint8_t device)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	460a      	mov	r2, r1
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	4613      	mov	r3, r2
 8001010:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f9c4 	bl	80013a2 <nRF24_ReadConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <nRF24_EnableCRC+0x2c>
		config |= (1<<NRF24_EN_CRC);
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e003      	b.n	8001036 <nRF24_EnableCRC+0x34>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f023 0308 	bic.w	r3, r3, #8
 8001034:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 8001036:	79ba      	ldrb	r2, [r7, #6]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f9bf 	bl	80013c0 <nRF24_WriteConfig>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <nRF24_SetCRCLength>:
void nRF24_SetCRCLength(uint8_t crcl,uint8_t device)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	460a      	mov	r2, r1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	4613      	mov	r3, r2
 8001058:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9a0 	bl	80013a2 <nRF24_ReadConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <nRF24_SetCRCLength+0x2c>
		config |= (1<<NRF24_CRCO);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e003      	b.n	800107e <nRF24_SetCRCLength+0x34>
	else
		config &= ~(1<<NRF24_CRCO);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f99b 	bl	80013c0 <nRF24_WriteConfig>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <nRF24_SetRetries>:
void nRF24_SetRetries(uint8_t ard, uint8_t arc,uint8_t device)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	460b      	mov	r3, r1
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	4613      	mov	r3, r2
 80010a2:	717b      	strb	r3, [r7, #5]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)),device);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	797a      	ldrb	r2, [r7, #5]
 80010bc:	4619      	mov	r1, r3
 80010be:	2004      	movs	r0, #4
 80010c0:	f7ff fee9 	bl	8000e96 <nRF24_WriteRegister>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size,uint8_t device)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	460b      	mov	r3, r1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	4613      	mov	r3, r2
 80010dc:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d901      	bls.n	80010e8 <nRF24_SetPayloadSize+0x1c>
		pipe = 5; // Block too high pipe number
 80010e4:	2305      	movs	r3, #5
 80010e6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F),device);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3311      	adds	r3, #17
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	797a      	ldrb	r2, [r7, #5]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fecc 	bl	8000e96 <nRF24_WriteRegister>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <nRF24_SetRFChannel>:
void nRF24_SetRFChannel(uint8_t channel,uint8_t device)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	460a      	mov	r2, r1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	4613      	mov	r3, r2
 8001114:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F),device);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800111c:	b2db      	uxtb	r3, r3
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	4619      	mov	r1, r3
 8001122:	2005      	movs	r0, #5
 8001124:	f7ff feb7 	bl	8000e96 <nRF24_WriteRegister>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <nRF24_EnablePipe>:
void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff,uint8_t device)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	460b      	mov	r3, r1
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	4613      	mov	r3, r2
 8001140:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d901      	bls.n	800114c <nRF24_EnablePipe+0x1c>
		pipe = 5; // Block too high pipe number
 8001148:	2305      	movs	r3, #5
 800114a:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR,device);
 800114c:	797b      	ldrb	r3, [r7, #5]
 800114e:	4619      	mov	r1, r3
 8001150:	2002      	movs	r0, #2
 8001152:	f7ff fe3e 	bl	8000dd2 <nRF24_ReadRegister>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10a      	bne.n	8001176 <nRF24_EnablePipe+0x46>
		enable_pipe |= (1<<pipe);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2201      	movs	r2, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	b25a      	sxtb	r2, r3
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4313      	orrs	r3, r2
 8001170:	b25b      	sxtb	r3, r3
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e00b      	b.n	800118e <nRF24_EnablePipe+0x5e>
	else
		enable_pipe &= ~(1<<pipe);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2201      	movs	r2, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4013      	ands	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe,device);
 800118e:	797a      	ldrb	r2, [r7, #5]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	4619      	mov	r1, r3
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fe7e 	bl	8000e96 <nRF24_WriteRegister>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <nRF24_AutoACK>:
void nRF24_AutoACK(uint8_t pipe, uint8_t onoff,uint8_t device)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	460b      	mov	r3, r1
 80011ae:	71bb      	strb	r3, [r7, #6]
 80011b0:	4613      	mov	r3, r2
 80011b2:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d901      	bls.n	80011be <nRF24_AutoACK+0x1c>
		pipe = 5; // Block too high pipe number
 80011ba:	2305      	movs	r3, #5
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA,device);
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	4619      	mov	r1, r3
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fe05 	bl	8000dd2 <nRF24_ReadRegister>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10a      	bne.n	80011e8 <nRF24_AutoACK+0x46>
		enaa |= (1<<pipe);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e00b      	b.n	8001200 <nRF24_AutoACK+0x5e>
	else
		enaa &= ~(1<<pipe);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2201      	movs	r2, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4013      	ands	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa,device);
 8001200:	797a      	ldrb	r2, [r7, #5]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4619      	mov	r1, r3
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe45 	bl	8000e96 <nRF24_WriteRegister>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size,uint8_t device)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
	if(size > 5)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d901      	bls.n	800122e <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 800122a:	2305      	movs	r3, #5
 800122c:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d801      	bhi.n	8001238 <nRF24_SetAddressWidth+0x24>
		size = 3; // Minimum are 3 bytes
 8001234:	2303      	movs	r3, #3
 8001236:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03),device);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	3b02      	subs	r3, #2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	79ba      	ldrb	r2, [r7, #6]
 8001246:	4619      	mov	r1, r3
 8001248:	2003      	movs	r0, #3
 800124a:	f7ff fe24 	bl	8000e96 <nRF24_WriteRegister>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <nRF24_EnableRXDataReadyIRQ>:
void nRF24_EnableRXDataReadyIRQ(uint8_t onoff,uint8_t device)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	460a      	mov	r2, r1
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	4613      	mov	r3, r2
 8001264:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f89a 	bl	80013a2 <nRF24_ReadConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <nRF24_EnableRXDataReadyIRQ+0x2c>
		config |= (1<<NRF24_RX_DR);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e003      	b.n	800128a <nRF24_EnableRXDataReadyIRQ+0x34>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001288:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 800128a:	79ba      	ldrb	r2, [r7, #6]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f895 	bl	80013c0 <nRF24_WriteConfig>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff,uint8_t device)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	460a      	mov	r2, r1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	4613      	mov	r3, r2
 80012ac:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f876 	bl	80013a2 <nRF24_ReadConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <nRF24_EnableTXDataSentIRQ+0x2c>
		config |= (1<<NRF24_TX_DS);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e003      	b.n	80012d2 <nRF24_EnableTXDataSentIRQ+0x34>
	else
		config &= ~(1<<NRF24_TX_DS);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f023 0320 	bic.w	r3, r3, #32
 80012d0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f871 	bl	80013c0 <nRF24_WriteConfig>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff,uint8_t device)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	460a      	mov	r2, r1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	4613      	mov	r3, r2
 80012f4:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f852 	bl	80013a2 <nRF24_ReadConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d104      	bne.n	8001312 <nRF24_EnableMaxRetransmitIRQ+0x2c>
		config |= (1<<NRF24_MAX_RT);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e003      	b.n	800131a <nRF24_EnableMaxRetransmitIRQ+0x34>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	f023 0310 	bic.w	r3, r3, #16
 8001318:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f84d 	bl	80013c0 <nRF24_WriteConfig>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <nRF24_ClearInterrupts>:
void nRF24_ClearInterrupts(uint8_t device)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nRF24_ReadStatus(device);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f810 	bl	8001360 <nRF24_ReadStatus>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800134a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteStatus(status,device);
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f813 	bl	800137e <nRF24_WriteStatus>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <nRF24_ReadStatus>:
uint8_t nRF24_ReadStatus(uint8_t device)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	return (nRF24_ReadRegister(NRF24_STATUS,device));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4619      	mov	r1, r3
 800136e:	2007      	movs	r0, #7
 8001370:	f7ff fd2f 	bl	8000dd2 <nRF24_ReadRegister>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <nRF24_WriteStatus>:
void nRF24_WriteStatus(uint8_t st,uint8_t device)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	460a      	mov	r2, r1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	4613      	mov	r3, r2
 800138c:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_STATUS, st,device);
 800138e:	79ba      	ldrb	r2, [r7, #6]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4619      	mov	r1, r3
 8001394:	2007      	movs	r0, #7
 8001396:	f7ff fd7e 	bl	8000e96 <nRF24_WriteRegister>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <nRF24_ReadConfig>:
uint8_t nRF24_ReadConfig(uint8_t device)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
	return (nRF24_ReadRegister(NRF24_CONFIG,device));
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd0e 	bl	8000dd2 <nRF24_ReadRegister>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <nRF24_WriteConfig>:
void nRF24_WriteConfig(uint8_t conf,uint8_t device)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_CONFIG, conf,device);
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fd5d 	bl	8000e96 <nRF24_WriteRegister>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <nRF24_InitGPIO>:
    }
    return result;
}

void nRF24_InitGPIO()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fca8 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
	  /** Configuration
	  PB1   ------> CE
	  PB2   ------> CE2
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001400:	2306      	movs	r3, #6
 8001402:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <nRF24_InitGPIO+0x44>)
 800141a:	f001 fc99 	bl	8002d50 <LL_GPIO_Init>


}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	48000400 	.word	0x48000400

0800142c <nRF24_Init>:

void nRF24_Init(uint8_t device)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	if(device == 1)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d104      	bne.n	8001446 <nRF24_Init+0x1a>
		NRF24_CE_LOW;
 800143c:	2102      	movs	r1, #2
 800143e:	4839      	ldr	r0, [pc, #228]	@ (8001524 <nRF24_Init+0xf8>)
 8001440:	f7ff fcac 	bl	8000d9c <LL_GPIO_ResetOutputPin>
 8001444:	e006      	b.n	8001454 <nRF24_Init+0x28>
	else if(device == 0)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <nRF24_Init+0x28>
		NRF24_CE2_LOW;
 800144c:	2104      	movs	r1, #4
 800144e:	4835      	ldr	r0, [pc, #212]	@ (8001524 <nRF24_Init+0xf8>)
 8001450:	f7ff fca4 	bl	8000d9c <LL_GPIO_ResetOutputPin>

	if(device == 0)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <nRF24_Init+0x34>
		spi_cs_set_high();
 800145a:	f000 fe39 	bl	80020d0 <spi_cs_set_high>
 800145e:	e004      	b.n	800146a <nRF24_Init+0x3e>
	else if(device == 1)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <nRF24_Init+0x3e>
		spi_cs2_set_high();
 8001466:	f000 fe4b 	bl	8002100 <spi_cs2_set_high>
	nRF24_Delay(5);// delay
 800146a:	2005      	movs	r0, #5
 800146c:	f7ff fca4 	bl	8000db8 <nRF24_Delay>

	// config things
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM,device); // Radio power
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	4619      	mov	r1, r3
 8001474:	2003      	movs	r0, #3
 8001476:	f7ff fd73 	bl	8000f60 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS,device); // Data Rate
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4619      	mov	r1, r3
 800147e:	2002      	movs	r0, #2
 8001480:	f7ff fd93 	bl	8000faa <nRF24_SetDataRate>
	nRF24_EnableCRC(1,device); // Enable CRC
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4619      	mov	r1, r3
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fdba 	bl	8001002 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B,device); // CRC Length 1 byte
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4619      	mov	r1, r3
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fdd9 	bl	800104a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07,device); // 1000us, 7 times Auto Retransmission (ART)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	461a      	mov	r2, r3
 800149c:	2107      	movs	r1, #7
 800149e:	2004      	movs	r0, #4
 80014a0:	f7ff fdf7 	bl	8001092 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE,device) | (1<<NRF24_EN_DPL),device); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F,device); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0,device); // Disable dynamic payloads for all pipes
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2100      	movs	r1, #0
 80014aa:	201c      	movs	r0, #28
 80014ac:	f7ff fcf3 	bl	8000e96 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE,device); // Set 32 bytes payload for pipe 0
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2101      	movs	r1, #1
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fe08 	bl	80010cc <nRF24_SetPayloadSize>
#endif

	nRF24_SetRFChannel(10,device); // Set RF channel for transmission (frequency)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4619      	mov	r1, r3
 80014c0:	200a      	movs	r0, #10
 80014c2:	f7ff fe20 	bl	8001106 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1,device); // Enable pipe 0
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	461a      	mov	r2, r3
 80014ca:	2101      	movs	r1, #1
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fe2f 	bl	8001130 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1,device); // Enable auto ACK for pipe 0
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	461a      	mov	r2, r3
 80014d6:	2101      	movs	r1, #1
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fe62 	bl	80011a2 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE,device); // Set address size for correct system
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4619      	mov	r1, r3
 80014e2:	2003      	movs	r0, #3
 80014e4:	f7ff fe96 	bl	8001214 <nRF24_SetAddressWidth>

	nRF24_Delay(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fc65 	bl	8000db8 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(1,device);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4619      	mov	r1, r3
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff feaf 	bl	8001256 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0,device);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4619      	mov	r1, r3
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fece 	bl	800129e <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0,device);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4619      	mov	r1, r3
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff feed 	bl	80012e6 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fc53 	bl	8000db8 <nRF24_Delay>

	nRF24_ClearInterrupts(device);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff0a 	bl	800132e <nRF24_ClearInterrupts>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	48000400 	.word	0x48000400

08001528 <nRF24_SetTXAddress>:

	return NRF24_TRANSMITTED_PACKET;
}

void nRF24_SetTXAddress(uint8_t* address,uint8_t device)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE,device); // Backup P0 address
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f107 010c 	add.w	r1, r7, #12
 800153a:	2203      	movs	r2, #3
 800153c:	200a      	movs	r0, #10
 800153e:	f7ff fc78 	bl	8000e32 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e00c      	b.n	8001562 <nRF24_SetTXAddress+0x3a>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f1c3 0302 	rsb	r3, r3, #2
 8001550:	3210      	adds	r2, #16
 8001552:	443a      	add	r2, r7
 8001554:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001558:	4a16      	ldr	r2, [pc, #88]	@ (80015b4 <nRF24_SetTXAddress+0x8c>)
 800155a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	3301      	adds	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d9ef      	bls.n	8001548 <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e00d      	b.n	800158a <nRF24_SetTXAddress+0x62>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	441a      	add	r2, r3
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f1c3 0302 	rsb	r3, r3, #2
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	3310      	adds	r3, #16
 800157e:	443b      	add	r3, r7
 8001580:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d9ee      	bls.n	800156e <nRF24_SetTXAddress+0x46>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE,device); // Pipe 0 must be same for auto ACk
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f107 010c 	add.w	r1, r7, #12
 8001596:	2203      	movs	r2, #3
 8001598:	200a      	movs	r0, #10
 800159a:	f7ff fcac 	bl	8000ef6 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE,device);
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2203      	movs	r2, #3
 80015a6:	2010      	movs	r0, #16
 80015a8:	f7ff fca5 	bl	8000ef6 <nRF24_WriteRegisters>

}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000028 	.word	0x20000028

080015b8 <nRF24_FlushTX>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_FlushTX(uint8_t device)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80015c2:	23e1      	movs	r3, #225	@ 0xe1
 80015c4:	73fb      	strb	r3, [r7, #15]

	if(device == 0)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <nRF24_FlushTX+0x1a>
		spi_cs_set_low();
 80015cc:	f000 fd8c 	bl	80020e8 <spi_cs_set_low>
 80015d0:	e004      	b.n	80015dc <nRF24_FlushTX+0x24>
	else if(device == 1)
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <nRF24_FlushTX+0x24>
		spi_cs2_set_low();
 80015d8:	f000 fd9e 	bl	8002118 <spi_cs2_set_low>
	spi_write_data(&command, 1);
 80015dc:	f107 030f 	add.w	r3, r7, #15
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fda4 	bl	8002130 <spi_write_data>
	if(device == 0)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <nRF24_FlushTX+0x3c>
		spi_cs_set_high();
 80015ee:	f000 fd6f 	bl	80020d0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();
}
 80015f2:	e004      	b.n	80015fe <nRF24_FlushTX+0x46>
	else if(device == 1)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <nRF24_FlushTX+0x46>
		spi_cs2_set_high();
 80015fa:	f000 fd81 	bl	8002100 <spi_cs2_set_high>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <nRF24_FlushRX>:

// RX

void nRF24_FlushRX(uint8_t device)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
	if(device == 0)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <nRF24_FlushRX+0x16>
		spi_cs_set_low();
 8001616:	f000 fd67 	bl	80020e8 <spi_cs_set_low>
 800161a:	e004      	b.n	8001626 <nRF24_FlushRX+0x20>
	else if(device == 1)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <nRF24_FlushRX+0x20>
		spi_cs2_set_low();
 8001622:	f000 fd79 	bl	8002118 <spi_cs2_set_low>
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001626:	23e2      	movs	r3, #226	@ 0xe2
 8001628:	73fb      	strb	r3, [r7, #15]
	spi_write_data(&command, 1);
 800162a:	f107 030f 	add.w	r3, r7, #15
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd7d 	bl	8002130 <spi_write_data>
	if(device == 0)
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <nRF24_FlushRX+0x3c>
		spi_cs_set_high();
 800163c:	f000 fd48 	bl	80020d0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();
}
 8001640:	e004      	b.n	800164c <nRF24_FlushRX+0x46>
	else if(device == 1)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <nRF24_FlushRX+0x46>
		spi_cs2_set_high();
 8001648:	f000 fd5a 	bl	8002100 <spi_cs2_set_high>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <nRF24_RX_Mode>:


void nRF24_RX_Mode(uint8_t device)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig(device);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe9e 	bl	80013a2 <nRF24_ReadConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup,device);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	461a      	mov	r2, r3
 800166e:	491a      	ldr	r1, [pc, #104]	@ (80016d8 <nRF24_RX_Mode+0x84>)
 8001670:	2000      	movs	r0, #0
 8001672:	f000 f835 	bl	80016e0 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	73fb      	strb	r3, [r7, #15]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe97 	bl	80013c0 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT),device);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4619      	mov	r1, r3
 8001696:	2070      	movs	r0, #112	@ 0x70
 8001698:	f7ff fe71 	bl	800137e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX(device);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffb1 	bl	8001606 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX(device);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff86 	bl	80015b8 <nRF24_FlushTX>

	if(device == 1)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <nRF24_RX_Mode+0x68>
		NRF24_CE_HIGH;
 80016b2:	2102      	movs	r1, #2
 80016b4:	4809      	ldr	r0, [pc, #36]	@ (80016dc <nRF24_RX_Mode+0x88>)
 80016b6:	f7ff fb63 	bl	8000d80 <LL_GPIO_SetOutputPin>
 80016ba:	e006      	b.n	80016ca <nRF24_RX_Mode+0x76>
	else if(device == 0)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <nRF24_RX_Mode+0x76>
		NRF24_CE2_HIGH;
 80016c2:	2104      	movs	r1, #4
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <nRF24_RX_Mode+0x88>)
 80016c6:	f7ff fb5b 	bl	8000d80 <LL_GPIO_SetOutputPin>
	nRF24_Delay(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fb74 	bl	8000db8 <nRF24_Delay>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000028 	.word	0x20000028
 80016dc:	48000400 	.word	0x48000400

080016e0 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address,uint8_t device)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <nRF24_SetRXAddress+0x1c>
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11d      	bne.n	8001738 <nRF24_SetRXAddress+0x58>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e00d      	b.n	800171e <nRF24_SetRXAddress+0x3e>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	441a      	add	r2, r3
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	f1c3 0302 	rsb	r3, r3, #2
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	3310      	adds	r3, #16
 8001712:	443b      	add	r3, r7
 8001714:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	3301      	adds	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d9ee      	bls.n	8001702 <nRF24_SetRXAddress+0x22>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE,device);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	330a      	adds	r3, #10
 8001728:	b2d8      	uxtb	r0, r3
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	f107 010c 	add.w	r1, r7, #12
 8001730:	2203      	movs	r2, #3
 8001732:	f7ff fbe0 	bl	8000ef6 <nRF24_WriteRegisters>
	{
 8001736:	e00a      	b.n	800174e <nRF24_SetRXAddress+0x6e>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1],device);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	330a      	adds	r3, #10
 800173c:	b2d8      	uxtb	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	79ba      	ldrb	r2, [r7, #6]
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fba5 	bl	8000e96 <nRF24_WriteRegister>
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <nRF24_ReadRXPaylaod>:
	return NRF24_NO_RECEIVED_PACKET;
#endif
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size,uint8_t device)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	4613      	mov	r3, r2
 8001762:	71fb      	strb	r3, [r7, #7]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize(device);
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size,device);
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE,device);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2201      	movs	r2, #1
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	2061      	movs	r0, #97	@ 0x61
 800176c:	f7ff fb61 	bl	8000e32 <nRF24_ReadRegisters>
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR),device);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	461a      	mov	r2, r3
 8001774:	2101      	movs	r1, #1
 8001776:	2007      	movs	r0, #7
 8001778:	f7ff fb8d 	bl	8000e96 <nRF24_WriteRegister>
	if(nRF24_ReadStatus(device) & (1<<NRF24_TX_DS))
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fdee 	bl	8001360 <nRF24_ReadStatus>
 8001784:	4603      	mov	r3, r0
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <nRF24_ReadRXPaylaod+0x44>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS),device);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	461a      	mov	r2, r3
 8001792:	2120      	movs	r1, #32
 8001794:	2007      	movs	r0, #7
 8001796:	f7ff fb7e 	bl	8000e96 <nRF24_WriteRegister>
#endif
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <nRF24_RXAvailible>:

uint8_t nRF24_RXAvailible(uint8_t device)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nRF24_ReadStatus(device);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fdd5 	bl	8001360 <nRF24_ReadStatus>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <nRF24_RXAvailible+0x3e>
	{
		nrf24_rx_flag = 1;
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <nRF24_RXAvailible+0x48>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d0:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteStatus(status,device);
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fdd0 	bl	800137e <nRF24_WriteStatus>
		return 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <nRF24_RXAvailible+0x40>
	}
	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000002b 	.word	0x2000002b

080017f0 <LL_AHB2_GRP1_EnableClock>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40021000 	.word	0x40021000

08001820 <LL_GPIO_SetPinMode>:
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	@ 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001846:	2320      	movs	r3, #32
 8001848:	e003      	b.n	8001852 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2103      	movs	r1, #3
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	61fb      	str	r3, [r7, #28]
  return result;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001874:	2320      	movs	r3, #32
 8001876:	e003      	b.n	8001880 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	372c      	adds	r7, #44	@ 0x2c
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_GPIO_SetPinSpeed>:
{
 800189a:	b480      	push	{r7}
 800189c:	b08b      	sub	sp, #44	@ 0x2c
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	613b      	str	r3, [r7, #16]
  return result;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80018c0:	2320      	movs	r3, #32
 80018c2:	e003      	b.n	80018cc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2103      	movs	r1, #3
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	61fb      	str	r3, [r7, #28]
  return result;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e003      	b.n	80018fa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	372c      	adds	r7, #44	@ 0x2c
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_GPIO_SetPinPull>:
{
 8001914:	b480      	push	{r7}
 8001916:	b08b      	sub	sp, #44	@ 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	613b      	str	r3, [r7, #16]
  return result;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800193a:	2320      	movs	r3, #32
 800193c:	e003      	b.n	8001946 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2103      	movs	r1, #3
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	61fb      	str	r3, [r7, #28]
  return result;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001968:	2320      	movs	r3, #32
 800196a:	e003      	b.n	8001974 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	372c      	adds	r7, #44	@ 0x2c
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <init_ControlerButtons>:
 */
#include "main.h"
#include "radioControl.h"
#include "nRF24.h"

void init_ControlerButtons(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff ff2b 	bl	80017f0 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinPull(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_PULL_UP);
 800199a:	2201      	movs	r2, #1
 800199c:	2102      	movs	r1, #2
 800199e:	481e      	ldr	r0, [pc, #120]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019a0:	f7ff ffb8 	bl	8001914 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2102      	movs	r1, #2
 80019a8:	481b      	ldr	r0, [pc, #108]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019aa:	f7ff ff76 	bl	800189a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2102      	movs	r1, #2
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019b4:	f7ff ff34 	bl	8001820 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_PULL_UP);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2101      	movs	r1, #1
 80019bc:	4816      	ldr	r0, [pc, #88]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019be:	f7ff ffa9 	bl	8001914 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	4814      	ldr	r0, [pc, #80]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019c8:	f7ff ff67 	bl	800189a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2101      	movs	r1, #1
 80019d0:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019d2:	f7ff ff25 	bl	8001820 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_PULL_UP);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2110      	movs	r1, #16
 80019da:	480f      	ldr	r0, [pc, #60]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019dc:	f7ff ff9a 	bl	8001914 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2110      	movs	r1, #16
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019e6:	f7ff ff58 	bl	800189a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2110      	movs	r1, #16
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019f0:	f7ff ff16 	bl	8001820 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_PULL_UP);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2101      	movs	r1, #1
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <init_ControlerButtons+0x88>)
 80019fa:	f7ff ff8b 	bl	8001914 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2101      	movs	r1, #1
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <init_ControlerButtons+0x88>)
 8001a04:	f7ff ff49 	bl	800189a <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <init_ControlerButtons+0x88>)
 8001a0e:	f7ff ff07 	bl	8001820 <LL_GPIO_SetPinMode>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	48000800 	.word	0x48000800

08001a1c <LL_AHB2_GRP1_EnableClock>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4013      	ands	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_APB1_GRP1_EnableClock>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a58:	4907      	ldr	r1, [pc, #28]	@ (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4013      	ands	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_GPIO_SetOutputPin>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	619a      	str	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_GPIO_ResetOutputPin>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 7282 	bic.w	r2, r3, #260	@ 0x104
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 0210 	bic.w	r2, r3, #16
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0201 	bic.w	r2, r3, #1
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 0202 	bic.w	r2, r3, #2
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 4244 	bic.w	r2, r3, #50176	@ 0xc400
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_15BIT
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	605a      	str	r2, [r3, #4]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 0204 	bic.w	r2, r3, #4
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d101      	bne.n	8001cc0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b80      	cmp	r3, #128	@ 0x80
 8001ce0:	d101      	bne.n	8001ce6 <LL_SPI_IsActiveFlag_BSY+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_SPI_IsEnabledIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_IsEnabledIT_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da0:	2b40      	cmp	r3, #64	@ 0x40
 8001da2:	d101      	bne.n	8001da8 <LL_SPI_IsEnabledIT_RXNE+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_SPI_IsEnabledIT_RXNE+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	2b80      	cmp	r3, #128	@ 0x80
 8001dc8:	d101      	bne.n	8001dce <LL_SPI_IsEnabledIT_TXE+0x18>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_SPI_IsEnabledIT_TXE+0x1a>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	330c      	adds	r3, #12
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	330c      	adds	r3, #12
 8001e08:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <MX_SPI2_Init>:

static buffer_f rx_buffer = {0};
static buffer_f tx_buffer = {0};

void MX_SPI2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	463b      	mov	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	615a      	str	r2, [r3, #20]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7ff fdf2 	bl	8001a1c <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001e38:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4834      	ldr	r0, [pc, #208]	@ (8001f28 <MX_SPI2_Init+0x10c>)
 8001e58:	f000 ff7a 	bl	8002d50 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_11;
 8001e5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e60:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e62:	2301      	movs	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	482c      	ldr	r0, [pc, #176]	@ (8001f28 <MX_SPI2_Init+0x10c>)
 8001e78:	f000 ff6a 	bl	8002d50 <LL_GPIO_Init>

	spi_cs_set_high();
 8001e7c:	f000 f928 	bl	80020d0 <spi_cs_set_high>
	spi_cs2_set_high();
 8001e80:	f000 f93e 	bl	8002100 <spi_cs2_set_high>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001e84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e88:	f7ff fde0 	bl	8001a4c <LL_APB1_GRP1_EnableClock>

		LL_SPI_Disable(spi);
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe1f 	bl	8001ad4 <LL_SPI_Disable>
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe28 	bl	8001af4 <LL_SPI_SetMode>
		LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe94 	bl	8001bd8 <LL_SPI_SetTransferDirection>
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fe55 	bl	8001b66 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe3c 	bl	8001b40 <LL_SPI_SetClockPhase>
		LL_SPI_SetNSSMode(spi, LL_SPI_NSS_SOFT);
 8001ec8:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff feba 	bl	8001c4a <LL_SPI_SetNSSMode>
		LL_SPI_SetBaudRatePrescaler(spi, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2110      	movs	r1, #16
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fe55 	bl	8001b8c <LL_SPI_SetBaudRatePrescaler>
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fe62 	bl	8001bb2 <LL_SPI_SetTransferBitOrder>
		LL_SPI_SetDataWidth(spi, LL_SPI_DATAWIDTH_8BIT);
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe81 	bl	8001bfe <LL_SPI_SetDataWidth>
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe09 	bl	8001b1a <LL_SPI_SetStandard>
		LL_SPI_SetRxFIFOThreshold(spi, LL_SPI_RX_FIFO_TH_QUARTER);
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe87 	bl	8001c24 <LL_SPI_SetRxFIFOThreshold>
		LL_SPI_Enable(spi);
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <MX_SPI2_Init+0x110>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fdca 	bl	8001ab4 <LL_SPI_Enable>

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	20000000 	.word	0x20000000

08001f30 <SPI2_IRQHandler>:
	LL_SPI_EnableIT_RXNE(SPI2);
	LL_SPI_Enable(SPI2);
}

void SPI2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	if(LL_SPI_IsActiveFlag_TXE(SPI2) && LL_SPI_IsEnabledIT_TXE(SPI2))
 8001f34:	480e      	ldr	r0, [pc, #56]	@ (8001f70 <SPI2_IRQHandler+0x40>)
 8001f36:	f7ff feb7 	bl	8001ca8 <LL_SPI_IsActiveFlag_TXE>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <SPI2_IRQHandler+0x20>
 8001f40:	480b      	ldr	r0, [pc, #44]	@ (8001f70 <SPI2_IRQHandler+0x40>)
 8001f42:	f7ff ff38 	bl	8001db6 <LL_SPI_IsEnabledIT_TXE>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SPI2_IRQHandler+0x20>
	{
		spi_transmit_callback();
 8001f4c:	f000 f812 	bl	8001f74 <spi_transmit_callback>
	}
	if(LL_SPI_IsActiveFlag_RXNE(SPI2) && LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <SPI2_IRQHandler+0x40>)
 8001f52:	f7ff fe96 	bl	8001c82 <LL_SPI_IsActiveFlag_RXNE>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <SPI2_IRQHandler+0x3c>
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <SPI2_IRQHandler+0x40>)
 8001f5e:	f7ff ff17 	bl	8001d90 <LL_SPI_IsEnabledIT_RXNE>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SPI2_IRQHandler+0x3c>
	{
		spi_receive_callback();
 8001f68:	f000 f86c 	bl	8002044 <spi_receive_callback>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40003800 	.word	0x40003800

08001f74 <spi_transmit_callback>:

void spi_transmit_callback(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 8001f78:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d02e      	beq.n	8001fde <spi_transmit_callback+0x6a>
	{
		if(!LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001f80:	482e      	ldr	r0, [pc, #184]	@ (800203c <spi_transmit_callback+0xc8>)
 8001f82:	f7ff ff05 	bl	8001d90 <LL_SPI_IsEnabledIT_RXNE>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11f      	bne.n	8001fcc <spi_transmit_callback+0x58>
		{
			LL_SPI_TransmitData8(SPI2, *tx_buffer.data_ptr);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4829      	ldr	r0, [pc, #164]	@ (800203c <spi_transmit_callback+0xc8>)
 8001f96:	f7ff ff2f 	bl	8001df8 <LL_SPI_TransmitData8>

			//echo
			rx_buffer.data_ptr = tx_buffer.data_ptr;
 8001f9a:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	@ (8002040 <spi_transmit_callback+0xcc>)
 8001fa0:	6013      	str	r3, [r2, #0]
			rx_buffer.data_ptr++;
 8001fa2:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <spi_transmit_callback+0xcc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <spi_transmit_callback+0xcc>)
 8001faa:	6013      	str	r3, [r2, #0]
			rx_buffer.count--;
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <spi_transmit_callback+0xcc>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <spi_transmit_callback+0xcc>)
 8001fb4:	6053      	str	r3, [r2, #4]
			// end echo

			tx_buffer.data_ptr++;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fbe:	6013      	str	r3, [r2, #0]
			tx_buffer.count--;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fc8:	6053      	str	r3, [r2, #4]
 8001fca:	e008      	b.n	8001fde <spi_transmit_callback+0x6a>
		}
		else
		{
			LL_SPI_TransmitData8(SPI2, DUMMY_BYTE);
 8001fcc:	21ff      	movs	r1, #255	@ 0xff
 8001fce:	481b      	ldr	r0, [pc, #108]	@ (800203c <spi_transmit_callback+0xc8>)
 8001fd0:	f7ff ff12 	bl	8001df8 <LL_SPI_TransmitData8>
			tx_buffer.count--;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fdc:	6053      	str	r3, [r2, #4]
		}
	}
	if(tx_buffer.count <= 0 && !LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001fde:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <spi_transmit_callback+0xc4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d126      	bne.n	8002034 <spi_transmit_callback+0xc0>
 8001fe6:	4815      	ldr	r0, [pc, #84]	@ (800203c <spi_transmit_callback+0xc8>)
 8001fe8:	f7ff fed2 	bl	8001d90 <LL_SPI_IsEnabledIT_RXNE>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d120      	bne.n	8002034 <spi_transmit_callback+0xc0>
	{
		LL_SPI_DisableIT_TXE(SPI2);
 8001ff2:	4812      	ldr	r0, [pc, #72]	@ (800203c <spi_transmit_callback+0xc8>)
 8001ff4:	f7ff febc 	bl	8001d70 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY)
 8001ff8:	bf00      	nop
 8001ffa:	4810      	ldr	r0, [pc, #64]	@ (800203c <spi_transmit_callback+0xc8>)
 8001ffc:	f7ff fe88 	bl	8001d10 <LL_SPI_GetTxFIFOLevel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <spi_transmit_callback+0x86>
			;

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0)
 8002006:	bf00      	nop
 8002008:	480c      	ldr	r0, [pc, #48]	@ (800203c <spi_transmit_callback+0xc8>)
 800200a:	f7ff fe60 	bl	8001cce <LL_SPI_IsActiveFlag_BSY>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <spi_transmit_callback+0x94>
			;

		LL_SPI_Disable(SPI2);
 8002014:	4809      	ldr	r0, [pc, #36]	@ (800203c <spi_transmit_callback+0xc8>)
 8002016:	f7ff fd5d 	bl	8001ad4 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 800201a:	e002      	b.n	8002022 <spi_transmit_callback+0xae>
		{
			LL_SPI_ReceiveData8(SPI2);
 800201c:	4807      	ldr	r0, [pc, #28]	@ (800203c <spi_transmit_callback+0xc8>)
 800201e:	f7ff fedd 	bl	8001ddc <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8002022:	4806      	ldr	r0, [pc, #24]	@ (800203c <spi_transmit_callback+0xc8>)
 8002024:	f7ff fe66 	bl	8001cf4 <LL_SPI_GetRxFIFOLevel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f6      	bne.n	800201c <spi_transmit_callback+0xa8>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 800202e:	4803      	ldr	r0, [pc, #12]	@ (800203c <spi_transmit_callback+0xc8>)
 8002030:	f7ff fe7c 	bl	8001d2c <LL_SPI_ClearFlag_OVR>
	}
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000034 	.word	0x20000034
 800203c:	40003800 	.word	0x40003800
 8002040:	2000002c 	.word	0x2000002c

08002044 <spi_receive_callback>:

void spi_receive_callback(void)
{
 8002044:	b598      	push	{r3, r4, r7, lr}
 8002046:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <spi_receive_callback+0x84>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <spi_receive_callback+0x2e>
	{
		*rx_buffer.data_ptr = LL_SPI_ReceiveData8(SPI2);
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <spi_receive_callback+0x84>)
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	481d      	ldr	r0, [pc, #116]	@ (80020cc <spi_receive_callback+0x88>)
 8002056:	f7ff fec1 	bl	8001ddc <LL_SPI_ReceiveData8>
 800205a:	4603      	mov	r3, r0
 800205c:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 800205e:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <spi_receive_callback+0x84>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <spi_receive_callback+0x84>)
 8002066:	6013      	str	r3, [r2, #0]
		rx_buffer.count--;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <spi_receive_callback+0x84>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	3b01      	subs	r3, #1
 800206e:	4a16      	ldr	r2, [pc, #88]	@ (80020c8 <spi_receive_callback+0x84>)
 8002070:	6053      	str	r3, [r2, #4]
	}

	if(rx_buffer.count <= 0)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <spi_receive_callback+0x84>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d123      	bne.n	80020c2 <spi_receive_callback+0x7e>
	{
		LL_SPI_DisableIT_RXNE(SPI2);
 800207a:	4814      	ldr	r0, [pc, #80]	@ (80020cc <spi_receive_callback+0x88>)
 800207c:	f7ff fe68 	bl	8001d50 <LL_SPI_DisableIT_RXNE>
		LL_SPI_DisableIT_TXE(SPI2);
 8002080:	4812      	ldr	r0, [pc, #72]	@ (80020cc <spi_receive_callback+0x88>)
 8002082:	f7ff fe75 	bl	8001d70 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY);
 8002086:	bf00      	nop
 8002088:	4810      	ldr	r0, [pc, #64]	@ (80020cc <spi_receive_callback+0x88>)
 800208a:	f7ff fe41 	bl	8001d10 <LL_SPI_GetTxFIFOLevel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <spi_receive_callback+0x44>

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0);
 8002094:	bf00      	nop
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <spi_receive_callback+0x88>)
 8002098:	f7ff fe19 	bl	8001cce <LL_SPI_IsActiveFlag_BSY>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <spi_receive_callback+0x52>

		LL_SPI_Disable(SPI2);
 80020a2:	480a      	ldr	r0, [pc, #40]	@ (80020cc <spi_receive_callback+0x88>)
 80020a4:	f7ff fd16 	bl	8001ad4 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 80020a8:	e002      	b.n	80020b0 <spi_receive_callback+0x6c>
		{
			LL_SPI_ReceiveData8(SPI2);
 80020aa:	4808      	ldr	r0, [pc, #32]	@ (80020cc <spi_receive_callback+0x88>)
 80020ac:	f7ff fe96 	bl	8001ddc <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 80020b0:	4806      	ldr	r0, [pc, #24]	@ (80020cc <spi_receive_callback+0x88>)
 80020b2:	f7ff fe1f 	bl	8001cf4 <LL_SPI_GetRxFIFOLevel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f6      	bne.n	80020aa <spi_receive_callback+0x66>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 80020bc:	4803      	ldr	r0, [pc, #12]	@ (80020cc <spi_receive_callback+0x88>)
 80020be:	f7ff fe35 	bl	8001d2c <LL_SPI_ClearFlag_OVR>

	}
}
 80020c2:	bf00      	nop
 80020c4:	bd98      	pop	{r3, r4, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000002c 	.word	0x2000002c
 80020cc:	40003800 	.word	0x40003800

080020d0 <spi_cs_set_high>:

void spi_cs_set_high(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80020d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <spi_cs_set_high+0x14>)
 80020da:	f7ff fccf 	bl	8001a7c <LL_GPIO_SetOutputPin>
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	48000400 	.word	0x48000400

080020e8 <spi_cs_set_low>:

void spi_cs_set_low(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80020ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <spi_cs_set_low+0x14>)
 80020f2:	f7ff fcd1 	bl	8001a98 <LL_GPIO_ResetOutputPin>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	48000400 	.word	0x48000400

08002100 <spi_cs2_set_high>:

void spi_cs2_set_high(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8002104:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <spi_cs2_set_high+0x14>)
 800210a:	f7ff fcb7 	bl	8001a7c <LL_GPIO_SetOutputPin>
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	48000400 	.word	0x48000400

08002118 <spi_cs2_set_low>:

void spi_cs2_set_low(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 800211c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <spi_cs2_set_low+0x14>)
 8002122:	f7ff fcb9 	bl	8001a98 <LL_GPIO_ResetOutputPin>
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	48000400 	.word	0x48000400

08002130 <spi_write_data>:

void spi_write_data(uint8_t *data, uint32_t size)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]

	while(count < size)
 800213e:	e014      	b.n	800216a <spi_write_data+0x3a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 8002140:	bf00      	nop
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <spi_write_data+0x94>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fdae 	bl	8001ca8 <LL_SPI_IsActiveFlag_TXE>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f7      	beq.n	8002142 <spi_write_data+0x12>
			;

		LL_SPI_TransmitData8(spi, *(data+count));
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <spi_write_data+0x94>)
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	f7ff fe4a 	bl	8001df8 <LL_SPI_TransmitData8>

		count++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
	while(count < size)
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3e6      	bcc.n	8002140 <spi_write_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8002172:	bf00      	nop
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <spi_write_data+0x94>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fdc9 	bl	8001d10 <LL_SPI_GetTxFIFOLevel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f7      	bne.n	8002174 <spi_write_data+0x44>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8002184:	bf00      	nop
 8002186:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <spi_write_data+0x94>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fd9f 	bl	8001cce <LL_SPI_IsActiveFlag_BSY>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f7      	bne.n	8002186 <spi_write_data+0x56>
		;


	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8002196:	e004      	b.n	80021a2 <spi_write_data+0x72>
	{
		LL_SPI_ReceiveData8(spi);
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <spi_write_data+0x94>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fe1d 	bl	8001ddc <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <spi_write_data+0x94>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fda4 	bl	8001cf4 <LL_SPI_GetRxFIFOLevel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f2      	bne.n	8002198 <spi_write_data+0x68>
	}

	LL_SPI_ClearFlag_OVR(spi);
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <spi_write_data+0x94>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fdb8 	bl	8001d2c <LL_SPI_ClearFlag_OVR>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000000 	.word	0x20000000

080021c8 <spi_read_data>:

void spi_read_data(uint8_t *data, uint32_t size)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]

	while(count < size)
 80021d6:	e024      	b.n	8002222 <spi_read_data+0x5a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 80021d8:	bf00      	nop
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <spi_read_data+0xb4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fd62 	bl	8001ca8 <LL_SPI_IsActiveFlag_TXE>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f7      	beq.n	80021da <spi_read_data+0x12>
			;

		LL_SPI_TransmitData8(spi, DUMMY_BYTE);
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <spi_read_data+0xb4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	21ff      	movs	r1, #255	@ 0xff
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe01 	bl	8001df8 <LL_SPI_TransmitData8>

		while (!LL_SPI_IsActiveFlag_RXNE(spi))
 80021f6:	bf00      	nop
 80021f8:	4b20      	ldr	r3, [pc, #128]	@ (800227c <spi_read_data+0xb4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fd40 	bl	8001c82 <LL_SPI_IsActiveFlag_RXNE>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f7      	beq.n	80021f8 <spi_read_data+0x30>
			;

		*(data+count) = LL_SPI_ReceiveData8(spi);
 8002208:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <spi_read_data+0xb4>)
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	18d4      	adds	r4, r2, r3
 8002212:	4608      	mov	r0, r1
 8002214:	f7ff fde2 	bl	8001ddc <LL_SPI_ReceiveData8>
 8002218:	4603      	mov	r3, r0
 800221a:	7023      	strb	r3, [r4, #0]

		count++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3d6      	bcc.n	80021d8 <spi_read_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 800222a:	bf00      	nop
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <spi_read_data+0xb4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fd6d 	bl	8001d10 <LL_SPI_GetTxFIFOLevel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f7      	bne.n	800222c <spi_read_data+0x64>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 800223c:	bf00      	nop
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <spi_read_data+0xb4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fd43 	bl	8001cce <LL_SPI_IsActiveFlag_BSY>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f7      	bne.n	800223e <spi_read_data+0x76>
		;

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 800224e:	e004      	b.n	800225a <spi_read_data+0x92>
	{
		LL_SPI_ReceiveData8(spi);
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <spi_read_data+0xb4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fdc1 	bl	8001ddc <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <spi_read_data+0xb4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fd48 	bl	8001cf4 <LL_SPI_GetRxFIFOLevel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f2      	bne.n	8002250 <spi_read_data+0x88>
	}

	LL_SPI_ClearFlag_OVR(spi);
 800226a:	4b04      	ldr	r3, [pc, #16]	@ (800227c <spi_read_data+0xb4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fd5c 	bl	8001d2c <LL_SPI_ClearFlag_OVR>
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	20000000 	.word	0x20000000

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <NMI_Handler+0x4>

08002288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <MemManage_Handler+0x4>

08002298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <LL_AHB2_GRP1_EnableClock>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4313      	orrs	r3, r2
 800230a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800230e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000

08002328 <LL_APB1_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002332:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <LL_APB1_GRP1_EnableClock+0x2c>)
 800233e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000

08002358 <LL_APB2_GRP1_EnableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002362:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <LL_APB2_GRP1_EnableClock+0x2c>)
 800236e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000

08002388 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	621a      	str	r2, [r3, #32]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d028      	beq.n	800248c <LL_TIM_OC_SetMode+0x64>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d023      	beq.n	8002488 <LL_TIM_OC_SetMode+0x60>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d01e      	beq.n	8002484 <LL_TIM_OC_SetMode+0x5c>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d019      	beq.n	8002480 <LL_TIM_OC_SetMode+0x58>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002452:	d013      	beq.n	800247c <LL_TIM_OC_SetMode+0x54>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245a:	d00d      	beq.n	8002478 <LL_TIM_OC_SetMode+0x50>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002462:	d007      	beq.n	8002474 <LL_TIM_OC_SetMode+0x4c>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800246a:	d101      	bne.n	8002470 <LL_TIM_OC_SetMode+0x48>
 800246c:	2307      	movs	r3, #7
 800246e:	e00e      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002470:	2308      	movs	r3, #8
 8002472:	e00c      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002474:	2306      	movs	r3, #6
 8002476:	e00a      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002478:	2305      	movs	r3, #5
 800247a:	e008      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 800247c:	2304      	movs	r3, #4
 800247e:	e006      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002480:	2303      	movs	r3, #3
 8002482:	e004      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002484:	2302      	movs	r3, #2
 8002486:	e002      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_TIM_OC_SetMode+0x66>
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3318      	adds	r3, #24
 8002494:	4619      	mov	r1, r3
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <LL_TIM_OC_SetMode+0xac>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	440b      	add	r3, r1
 800249e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	490c      	ldr	r1, [pc, #48]	@ (80024d8 <LL_TIM_OC_SetMode+0xb0>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <LL_TIM_OC_SetMode+0xb4>)
 80024ae:	408b      	lsls	r3, r1
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <LL_TIM_OC_SetMode+0xb0>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	4619      	mov	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	408b      	lsls	r3, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	08002fe0 	.word	0x08002fe0
 80024d8:	08002fec 	.word	0x08002fec
 80024dc:	00010073 	.word	0x00010073

080024e0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d028      	beq.n	8002544 <LL_TIM_OC_SetPolarity+0x64>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d023      	beq.n	8002540 <LL_TIM_OC_SetPolarity+0x60>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d01e      	beq.n	800253c <LL_TIM_OC_SetPolarity+0x5c>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b40      	cmp	r3, #64	@ 0x40
 8002502:	d019      	beq.n	8002538 <LL_TIM_OC_SetPolarity+0x58>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250a:	d013      	beq.n	8002534 <LL_TIM_OC_SetPolarity+0x54>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002512:	d00d      	beq.n	8002530 <LL_TIM_OC_SetPolarity+0x50>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251a:	d007      	beq.n	800252c <LL_TIM_OC_SetPolarity+0x4c>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002522:	d101      	bne.n	8002528 <LL_TIM_OC_SetPolarity+0x48>
 8002524:	2307      	movs	r3, #7
 8002526:	e00e      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002528:	2308      	movs	r3, #8
 800252a:	e00c      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 800252c:	2306      	movs	r3, #6
 800252e:	e00a      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002530:	2305      	movs	r3, #5
 8002532:	e008      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002534:	2304      	movs	r3, #4
 8002536:	e006      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002538:	2303      	movs	r3, #3
 800253a:	e004      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 800253c:	2302      	movs	r3, #2
 800253e:	e002      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_TIM_OC_SetPolarity+0x66>
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	490b      	ldr	r1, [pc, #44]	@ (800257c <LL_TIM_OC_SetPolarity+0x9c>)
 8002550:	5ccb      	ldrb	r3, [r1, r3]
 8002552:	4619      	mov	r1, r3
 8002554:	2302      	movs	r3, #2
 8002556:	408b      	lsls	r3, r1
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	4907      	ldr	r1, [pc, #28]	@ (800257c <LL_TIM_OC_SetPolarity+0x9c>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	4619      	mov	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	408b      	lsls	r3, r1
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	08002ff8 	.word	0x08002ff8

08002580 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80025ae:	f023 0307 	bic.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f06f 0201 	mvn.w	r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	615a      	str	r2, [r3, #20]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_GPIO_SetPinMode>:
{
 8002602:	b480      	push	{r7}
 8002604:	b08b      	sub	sp, #44	@ 0x2c
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	613b      	str	r3, [r7, #16]
  return result;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2103      	movs	r1, #3
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
  return result;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	372c      	adds	r7, #44	@ 0x2c
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_GPIO_SetPinSpeed>:
{
 800267c:	b480      	push	{r7}
 800267e:	b08b      	sub	sp, #44	@ 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	613b      	str	r3, [r7, #16]
  return result;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2103      	movs	r1, #3
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	61fb      	str	r3, [r7, #28]
  return result;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	372c      	adds	r7, #44	@ 0x2c
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_GPIO_SetPinPull>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b08b      	sub	sp, #44	@ 0x2c
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	613b      	str	r3, [r7, #16]
  return result;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2103      	movs	r1, #3
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	61fb      	str	r3, [r7, #28]
  return result;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e003      	b.n	8002756 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	431a      	orrs	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	60da      	str	r2, [r3, #12]
}
 8002764:	bf00      	nop
 8002766:	372c      	adds	r7, #44	@ 0x2c
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_GPIO_SetAFPin_0_7>:
{
 8002770:	b480      	push	{r7}
 8002772:	b08b      	sub	sp, #44	@ 0x2c
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	613b      	str	r3, [r7, #16]
  return result;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	210f      	movs	r1, #15
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	401a      	ands	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	61fb      	str	r3, [r7, #28]
  return result;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e003      	b.n	80027d0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]
}
 80027de:	bf00      	nop
 80027e0:	372c      	adds	r7, #44	@ 0x2c
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_GPIO_ResetOutputPin>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <MX_TIM2_Init>:
  uint32_t pwm_duty;
/* USER CODE END 0 */

/* TIM2 init function */
  void MX_TIM2_Init(void)
  {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    /* Peripheral clock enable */
    LL_APB2_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff fda3 	bl	8002358 <LL_APB2_GRP1_EnableClock>

    LL_APB1_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff fd88 	bl	8002328 <LL_APB1_GRP1_EnableClock>
  LL_GPIO_SetPinPull(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_PULL_NO);
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002820:	f7ff ff69 	bl	80026f6 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8002824:	2200      	movs	r2, #0
 8002826:	2101      	movs	r1, #1
 8002828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800282c:	f7ff ff26 	bl	800267c <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_0_7(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_AF_1);
 8002830:	2201      	movs	r2, #1
 8002832:	2101      	movs	r1, #1
 8002834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002838:	f7ff ff9a 	bl	8002770 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_MODE_ALTERNATE);
 800283c:	2202      	movs	r2, #2
 800283e:	2101      	movs	r1, #1
 8002840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002844:	f7ff fedd 	bl	8002602 <LL_GPIO_SetPinMode>

    LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002848:	2100      	movs	r1, #0
 800284a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800284e:	f7ff fea5 	bl	800259c <LL_TIM_SetClockSource>
    LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);
 8002852:	2100      	movs	r1, #0
 8002854:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002858:	f7ff fda6 	bl	80023a8 <LL_TIM_SetCounterMode>
    LL_TIM_SetPrescaler(TIM2, 4000-1);
 800285c:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8002860:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002864:	f7ff fdb3 	bl	80023ce <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(TIM2, RANGE-1);
 8002868:	21f9      	movs	r1, #249	@ 0xf9
 800286a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800286e:	f7ff fdbc 	bl	80023ea <LL_TIM_SetAutoReload>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 8002872:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002876:	f7ff feb4 	bl	80025e2 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_ClearFlag_UPDATE(TIM2);
 800287a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800287e:	f7ff fea2 	bl	80025c6 <LL_TIM_ClearFlag_UPDATE>

    pwm_duty = 0;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <MX_TIM2_Init+0xbc>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    LL_TIM_OC_SetCompareCH1(TIM2, pwm_duty);
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_TIM2_Init+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002892:	f7ff fe75 	bl	8002580 <LL_TIM_OC_SetCompareCH1>

    LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8002896:	2260      	movs	r2, #96	@ 0x60
 8002898:	2101      	movs	r1, #1
 800289a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800289e:	f7ff fdc3 	bl	8002428 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80028aa:	f7ff fe19 	bl	80024e0 <LL_TIM_OC_SetPolarity>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80028ae:	2101      	movs	r1, #1
 80028b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80028b4:	f7ff fda7 	bl	8002406 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);
 80028b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80028bc:	f7ff fd64 	bl	8002388 <LL_TIM_EnableCounter>

  }
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000003c 	.word	0x2000003c

080028c8 <MX_TIM3_Init>:

/* USER CODE BEGIN 1 */

void MX_TIM3_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	 LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ce:	463b      	mov	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
 80028dc:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM2_Init 0 */

  /* Peripheral clock enable */
	 LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028de:	2002      	movs	r0, #2
 80028e0:	f7ff fd22 	bl	8002328 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7ff fd07 	bl	80022f8 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80028ea:	2340      	movs	r3, #64	@ 0x40
 80028ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028ee:	2302      	movs	r3, #2
 80028f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80028fe:	2302      	movs	r3, #2
 8002900:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	463b      	mov	r3, r7
 8002904:	4619      	mov	r1, r3
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f000 fa21 	bl	8002d50 <LL_GPIO_Init>

  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800290e:	2100      	movs	r1, #0
 8002910:	4819      	ldr	r0, [pc, #100]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002912:	f7ff fe43 	bl	800259c <LL_TIM_SetClockSource>
  LL_TIM_SetCounterMode(TIM3, LL_TIM_COUNTERMODE_UP);
 8002916:	2100      	movs	r1, #0
 8002918:	4817      	ldr	r0, [pc, #92]	@ (8002978 <MX_TIM3_Init+0xb0>)
 800291a:	f7ff fd45 	bl	80023a8 <LL_TIM_SetCounterMode>
  LL_TIM_SetPrescaler(TIM3, 4000-1);
 800291e:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8002922:	4815      	ldr	r0, [pc, #84]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002924:	f7ff fd53 	bl	80023ce <LL_TIM_SetPrescaler>
  LL_TIM_SetAutoReload(TIM3, RANGE-1);
 8002928:	21f9      	movs	r1, #249	@ 0xf9
 800292a:	4813      	ldr	r0, [pc, #76]	@ (8002978 <MX_TIM3_Init+0xb0>)
 800292c:	f7ff fd5d 	bl	80023ea <LL_TIM_SetAutoReload>
  LL_TIM_GenerateEvent_UPDATE(TIM3);
 8002930:	4811      	ldr	r0, [pc, #68]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002932:	f7ff fe56 	bl	80025e2 <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8002936:	4810      	ldr	r0, [pc, #64]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002938:	f7ff fe45 	bl	80025c6 <LL_TIM_ClearFlag_UPDATE>

  pwm_duty = 0;
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <MX_TIM3_Init+0xb4>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1(TIM3, pwm_duty);
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <MX_TIM3_Init+0xb4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	480b      	ldr	r0, [pc, #44]	@ (8002978 <MX_TIM3_Init+0xb0>)
 800294a:	f7ff fe19 	bl	8002580 <LL_TIM_OC_SetCompareCH1>

  LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800294e:	2260      	movs	r2, #96	@ 0x60
 8002950:	2101      	movs	r1, #1
 8002952:	4809      	ldr	r0, [pc, #36]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002954:	f7ff fd68 	bl	8002428 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8002958:	2200      	movs	r2, #0
 800295a:	2101      	movs	r1, #1
 800295c:	4806      	ldr	r0, [pc, #24]	@ (8002978 <MX_TIM3_Init+0xb0>)
 800295e:	f7ff fdbf 	bl	80024e0 <LL_TIM_OC_SetPolarity>

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002962:	2101      	movs	r1, #1
 8002964:	4804      	ldr	r0, [pc, #16]	@ (8002978 <MX_TIM3_Init+0xb0>)
 8002966:	f7ff fd4e 	bl	8002406 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800296a:	4803      	ldr	r0, [pc, #12]	@ (8002978 <MX_TIM3_Init+0xb0>)
 800296c:	f7ff fd0c 	bl	8002388 <LL_TIM_EnableCounter>

}
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40000400 	.word	0x40000400
 800297c:	2000003c 	.word	0x2000003c

08002980 <PWM_GPIO_init>:
void PWM_GPIO_init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	463b      	mov	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	615a      	str	r2, [r3, #20]


	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff fcae 	bl	80022f8 <LL_AHB2_GRP1_EnableClock>

	  GPIO_InitStruct.Pin = PWM_LOGIC2_Pin|PWM_LOGIC1_Pin;
 800299c:	2322      	movs	r3, #34	@ 0x22
 800299e:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029a0:	2301      	movs	r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(PWM_LOGIC2_Port, &GPIO_InitStruct);
 80029b0:	463b      	mov	r3, r7
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029b8:	f000 f9ca 	bl	8002d50 <LL_GPIO_Init>

}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	0000      	movs	r0, r0
	...

080029c8 <Generate_PWM>:

void Generate_PWM(uint8_t fulfillment,TIM_TypeDef *TIMx)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
	pwm_duty = (int) round(RANGE*fulfillment*0.01);
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	22fa      	movs	r2, #250	@ 0xfa
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fe6f 	bl	80006c0 <__aeabi_i2d>
 80029e2:	a312      	add	r3, pc, #72	@ (adr r3, 8002a2c <Generate_PWM+0x64>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fbee 	bl	80001c8 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	ec43 2b17 	vmov	d7, r2, r3
 80029f4:	eeb0 0a47 	vmov.f32	s0, s14
 80029f8:	eef0 0a67 	vmov.f32	s1, s15
 80029fc:	f000 fa9a 	bl	8002f34 <round>
 8002a00:	ec53 2b10 	vmov	r2, r3, d0
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fd fec4 	bl	8000794 <__aeabi_d2iz>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <Generate_PWM+0x60>)
 8002a12:	601a      	str	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIMx, pwm_duty);
 8002a14:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <Generate_PWM+0x60>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f7ff fdb0 	bl	8002580 <LL_TIM_OC_SetCompareCH1>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000003c 	.word	0x2000003c
 8002a2c:	47ae147b 	.word	0x47ae147b
 8002a30:	3f847ae1 	.word	0x3f847ae1

08002a34 <Robot_Drive_Forward>:

void Robot_Drive_Forward(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	Generate_PWM(80,TIM2);
 8002a38:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a3c:	2050      	movs	r0, #80	@ 0x50
 8002a3e:	f7ff ffc3 	bl	80029c8 <Generate_PWM>
	Generate_PWM(80,TIM3);
 8002a42:	4908      	ldr	r1, [pc, #32]	@ (8002a64 <Robot_Drive_Forward+0x30>)
 8002a44:	2050      	movs	r0, #80	@ 0x50
 8002a46:	f7ff ffbf 	bl	80029c8 <Generate_PWM>

	LL_GPIO_ResetOutputPin(PWM_LOGIC1_Pin, PWM_LOGIC1_Port);
 8002a4a:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8002a4e:	2002      	movs	r0, #2
 8002a50:	f7ff fecb 	bl	80027ea <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(PWM_LOGIC2_Pin, PWM_LOGIC2_Port);
 8002a54:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8002a58:	2020      	movs	r0, #32
 8002a5a:	f7ff fec6 	bl	80027ea <LL_GPIO_ResetOutputPin>
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40000400 	.word	0x40000400

08002a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a6c:	f7ff fc32 	bl	80022d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a70:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a72:	490d      	ldr	r1, [pc, #52]	@ (8002aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a74:	4a0d      	ldr	r2, [pc, #52]	@ (8002aac <LoopForever+0xe>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a88:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab4 <LoopForever+0x16>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f000 fa29 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a9a:	f7fe f8a9 	bl	8000bf0 <main>

08002a9e <LoopForever>:

LoopForever:
    b LoopForever
 8002a9e:	e7fe      	b.n	8002a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002aa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002aac:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8002ab0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002ab4:	20000040 	.word	0x20000040

08002ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC1_2_IRQHandler>

08002aba <LL_GPIO_SetPinMode>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b08b      	sub	sp, #44	@ 0x2c
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	613b      	str	r3, [r7, #16]
  return result;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2103      	movs	r1, #3
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	61fb      	str	r3, [r7, #28]
  return result;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	372c      	adds	r7, #44	@ 0x2c
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_GPIO_SetPinOutputType>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_GPIO_SetPinSpeed>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b08b      	sub	sp, #44	@ 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	613b      	str	r3, [r7, #16]
  return result;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	61fb      	str	r3, [r7, #28]
  return result;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	609a      	str	r2, [r3, #8]
}
 8002bd2:	bf00      	nop
 8002bd4:	372c      	adds	r7, #44	@ 0x2c
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_GPIO_SetPinPull>:
{
 8002bde:	b480      	push	{r7}
 8002be0:	b08b      	sub	sp, #44	@ 0x2c
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	613b      	str	r3, [r7, #16]
  return result;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2103      	movs	r1, #3
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	61fb      	str	r3, [r7, #28]
  return result;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002c32:	2320      	movs	r3, #32
 8002c34:	e003      	b.n	8002c3e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	60da      	str	r2, [r3, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	372c      	adds	r7, #44	@ 0x2c
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_GPIO_SetAFPin_0_7>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	@ 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	613b      	str	r3, [r7, #16]
  return result;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e003      	b.n	8002c8a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	401a      	ands	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	372c      	adds	r7, #44	@ 0x2c
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_GPIO_SetAFPin_8_15>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b08b      	sub	sp, #44	@ 0x2c
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	613b      	str	r3, [r7, #16]
  return result;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e003      	b.n	8002d06 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	210f      	movs	r1, #15
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d44:	bf00      	nop
 8002d46:	372c      	adds	r7, #44	@ 0x2c
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	60fb      	str	r3, [r7, #12]
  return result;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <LL_GPIO_Init+0x26>
    return 32U;
 8002d72:	2320      	movs	r3, #32
 8002d74:	e003      	b.n	8002d7e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d80:	e048      	b.n	8002e14 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03a      	beq.n	8002e0e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d003      	beq.n	8002da8 <LL_GPIO_Init+0x58>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d10e      	bne.n	8002dc6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	461a      	mov	r2, r3
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fed7 	bl	8002b64 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff feb7 	bl	8002b34 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	69b9      	ldr	r1, [r7, #24]
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff05 	bl	8002bde <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d111      	bne.n	8002e00 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2bff      	cmp	r3, #255	@ 0xff
 8002de0:	d807      	bhi.n	8002df2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	461a      	mov	r2, r3
 8002de8:	69b9      	ldr	r1, [r7, #24]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff34 	bl	8002c58 <LL_GPIO_SetAFPin_0_7>
 8002df0:	e006      	b.n	8002e00 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	461a      	mov	r2, r3
 8002df8:	69b9      	ldr	r1, [r7, #24]
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff69 	bl	8002cd2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	461a      	mov	r2, r3
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fe56 	bl	8002aba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1af      	bne.n	8002d82 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <LL_InitTick+0x30>)
 8002e40:	3b01      	subs	r3, #1
 8002e42:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <LL_InitTick+0x30>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <LL_InitTick+0x30>)
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002e68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ffdd 	bl	8002e2c <LL_InitTick>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <LL_mDelay+0x4c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e8e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d00c      	beq.n	8002eb2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002e9e:	e008      	b.n	8002eb2 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <LL_mDelay+0x4c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f3      	bne.n	8002ea0 <LL_mDelay+0x24>
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ed4:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <LL_SetSystemCoreClock+0x1c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000004 	.word	0x20000004

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4d0d      	ldr	r5, [pc, #52]	@ (8002f24 <__libc_init_array+0x38>)
 8002ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8002f28 <__libc_init_array+0x3c>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	4d0b      	ldr	r5, [pc, #44]	@ (8002f2c <__libc_init_array+0x40>)
 8002efe:	4c0c      	ldr	r4, [pc, #48]	@ (8002f30 <__libc_init_array+0x44>)
 8002f00:	f000 f85e 	bl	8002fc0 <_init>
 8002f04:	1b64      	subs	r4, r4, r5
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	2600      	movs	r6, #0
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08003004 	.word	0x08003004
 8002f28:	08003004 	.word	0x08003004
 8002f2c:	08003004 	.word	0x08003004
 8002f30:	08003008 	.word	0x08003008

08002f34 <round>:
 8002f34:	ec51 0b10 	vmov	r0, r1, d0
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8002f3e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8002f42:	2a13      	cmp	r2, #19
 8002f44:	460b      	mov	r3, r1
 8002f46:	4605      	mov	r5, r0
 8002f48:	dc1b      	bgt.n	8002f82 <round+0x4e>
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	da0b      	bge.n	8002f66 <round+0x32>
 8002f4e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8002f52:	3201      	adds	r2, #1
 8002f54:	bf04      	itt	eq
 8002f56:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8002f5a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	e015      	b.n	8002f92 <round+0x5e>
 8002f66:	4c15      	ldr	r4, [pc, #84]	@ (8002fbc <round+0x88>)
 8002f68:	4114      	asrs	r4, r2
 8002f6a:	ea04 0601 	and.w	r6, r4, r1
 8002f6e:	4306      	orrs	r6, r0
 8002f70:	d00f      	beq.n	8002f92 <round+0x5e>
 8002f72:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8002f76:	fa41 f202 	asr.w	r2, r1, r2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	ea23 0304 	bic.w	r3, r3, r4
 8002f80:	e7ed      	b.n	8002f5e <round+0x2a>
 8002f82:	2a33      	cmp	r2, #51	@ 0x33
 8002f84:	dd08      	ble.n	8002f98 <round+0x64>
 8002f86:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002f8a:	d102      	bne.n	8002f92 <round+0x5e>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f7fd fa4b 	bl	8000428 <__adddf3>
 8002f92:	ec41 0b10 	vmov	d0, r0, r1
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8002f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8002fa0:	40f4      	lsrs	r4, r6
 8002fa2:	4204      	tst	r4, r0
 8002fa4:	d0f5      	beq.n	8002f92 <round+0x5e>
 8002fa6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8002faa:	2201      	movs	r2, #1
 8002fac:	408a      	lsls	r2, r1
 8002fae:	1952      	adds	r2, r2, r5
 8002fb0:	bf28      	it	cs
 8002fb2:	3301      	addcs	r3, #1
 8002fb4:	ea22 0204 	bic.w	r2, r2, r4
 8002fb8:	e7d2      	b.n	8002f60 <round+0x2c>
 8002fba:	bf00      	nop
 8002fbc:	000fffff 	.word	0x000fffff

08002fc0 <_init>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr

08002fcc <_fini>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr
