
Mobile-measurement-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002420  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080025a8  080025a8  000035a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080025dc  080025dc  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025dc  080025dc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025e0  080025e0  000035e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080025e4  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000010  080025f4  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080025f4  00004058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c8c  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e2  00000000  00000000  0000accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000607  00000000  00000000  0000c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206b9  00000000  00000000  0000cfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068f5  00000000  00000000  0002d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5315  00000000  00000000  00033f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e92aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  000e92f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000eb34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002590 	.word	0x08002590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002590 	.word	0x08002590

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffe3 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <__NVIC_SetPriorityGrouping+0x44>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021e:	68ba      	ldr	r2, [r7, #8]
 8000220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000224:	4013      	ands	r3, r2
 8000226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800023a:	4a04      	ldr	r2, [pc, #16]	@ (800024c <__NVIC_SetPriorityGrouping+0x44>)
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	60d3      	str	r3, [r2, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__NVIC_GetPriorityGrouping+0x18>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	0a1b      	lsrs	r3, r3, #8
 800025a:	f003 0307 	and.w	r3, r3, #7
}
 800025e:	4618      	mov	r0, r3
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	db0a      	blt.n	8000296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	b2da      	uxtb	r2, r3
 8000284:	490c      	ldr	r1, [pc, #48]	@ (80002b8 <__NVIC_SetPriority+0x4c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	0112      	lsls	r2, r2, #4
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	440b      	add	r3, r1
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000294:	e00a      	b.n	80002ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4908      	ldr	r1, [pc, #32]	@ (80002bc <__NVIC_SetPriority+0x50>)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f003 030f 	and.w	r3, r3, #15
 80002a2:	3b04      	subs	r3, #4
 80002a4:	0112      	lsls	r2, r2, #4
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	440b      	add	r3, r1
 80002aa:	761a      	strb	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f003 0307 	and.w	r3, r3, #7
 80002d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	f1c3 0307 	rsb	r3, r3, #7
 80002da:	2b04      	cmp	r3, #4
 80002dc:	bf28      	it	cs
 80002de:	2304      	movcs	r3, #4
 80002e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	3304      	adds	r3, #4
 80002e6:	2b06      	cmp	r3, #6
 80002e8:	d902      	bls.n	80002f0 <NVIC_EncodePriority+0x30>
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3b03      	subs	r3, #3
 80002ee:	e000      	b.n	80002f2 <NVIC_EncodePriority+0x32>
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	f04f 32ff 	mov.w	r2, #4294967295
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	43da      	mvns	r2, r3
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	401a      	ands	r2, r3
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000308:	f04f 31ff 	mov.w	r1, #4294967295
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	43d9      	mvns	r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	4313      	orrs	r3, r2
         );
}
 800031a:	4618      	mov	r0, r3
 800031c:	3724      	adds	r7, #36	@ 0x24
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3b01      	subs	r3, #1
 8000334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000338:	d301      	bcc.n	800033e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033a:	2301      	movs	r3, #1
 800033c:	e00f      	b.n	800035e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033e:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <SysTick_Config+0x40>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3b01      	subs	r3, #1
 8000344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000346:	210f      	movs	r1, #15
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f7ff ff8e 	bl	800026c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <SysTick_Config+0x40>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000356:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <SysTick_Config+0x40>)
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010

0800036c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <LL_RCC_MSI_Enable+0x1c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <LL_RCC_MSI_Enable+0x1c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <LL_RCC_MSI_IsReady+0x20>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	2b02      	cmp	r3, #2
 800039a:	d101      	bne.n	80003a0 <LL_RCC_MSI_IsReady+0x14>
 800039c:	2301      	movs	r3, #1
 800039e:	e000      	b.n	80003a2 <LL_RCC_MSI_IsReady+0x16>
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <LL_RCC_MSI_SetRange+0x24>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003e0:	4904      	ldr	r1, [pc, #16]	@ (80003f4 <LL_RCC_MSI_SetRange+0x24>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	600b      	str	r3, [r1, #0]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000

080003f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800040e:	4313      	orrs	r3, r2
 8000410:	604b      	str	r3, [r1, #4]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <LL_RCC_SetSysClkSource+0x24>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	f023 0203 	bic.w	r2, r3, #3
 8000434:	4904      	ldr	r1, [pc, #16]	@ (8000448 <LL_RCC_SetSysClkSource+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	608b      	str	r3, [r1, #8]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000450:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <LL_RCC_GetSysClkSource+0x18>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 030c 	and.w	r3, r3, #12
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000478:	4904      	ldr	r1, [pc, #16]	@ (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80004a0:	4904      	ldr	r1, [pc, #16]	@ (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	608b      	str	r3, [r1, #8]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80004c8:	4904      	ldr	r1, [pc, #16]	@ (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	608b      	str	r3, [r1, #8]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004ec:	4907      	ldr	r1, [pc, #28]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000

08000510 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800051c:	4907      	ldr	r1, [pc, #28]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000526:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f023 0207 	bic.w	r2, r3, #7
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	600b      	str	r3, [r1, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40022000 	.word	0x40022000

08000568 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <LL_FLASH_GetLatency+0x18>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0307 	and.w	r3, r3, #7
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	600b      	str	r3, [r1, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40007000 	.word	0x40007000

080005ac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005bc:	d101      	bne.n	80005c2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40007000 	.word	0x40007000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff ff99 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005de:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80005e2:	f7ff ff7d 	bl	80004e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e6:	2003      	movs	r0, #3
 80005e8:	f7ff fe0e 	bl	8000208 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80005ec:	f7ff fe30 	bl	8000250 <__NVIC_GetPriorityGrouping>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2200      	movs	r2, #0
 80005f4:	210f      	movs	r1, #15
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe62 	bl	80002c0 <NVIC_EncodePriority>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f7ff fe32 	bl	800026c <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f836 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(4000);
 800060c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000610:	f7ff fe8a 	bl	8000328 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff fdf0 	bl	80001f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000618:	f001 fc76 	bl	8001f08 <MX_TIM2_Init>
  MX_SPI2_Init();
 800061c:	f000 ff98 	bl	8001550 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  MX_TIM3_Init();
 8000620:	f001 fcd2 	bl	8001fc8 <MX_TIM3_Init>
  PWM_GPIO_init();
 8000624:	f001 fd2c 	bl	8002080 <PWM_GPIO_init>
  init_ControlerButtons();
 8000628:	f000 fd4c 	bl	80010c4 <init_ControlerButtons>

  /* USER CODE END 2 */
  	 NRF24_init_GPIO();
 800062c:	f000 f962 	bl	80008f4 <NRF24_init_GPIO>
	NRF24_begin(GPIOB, LL_GPIO_PIN_1, LL_GPIO_PIN_15);
 8000630:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000634:	2102      	movs	r1, #2
 8000636:	480e      	ldr	r0, [pc, #56]	@ (8000670 <main+0x9c>)
 8000638:	f000 f980 	bl	800093c <NRF24_begin>
	printRadioSettings();
 800063c:	f000 fc6b 	bl	8000f16 <printRadioSettings>

	NRF24_setAutoAck(true);
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fb7f 	bl	8000d44 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8000646:	2034      	movs	r0, #52	@ 0x34
 8000648:	f000 fad7 	bl	8000bfa <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800064c:	2020      	movs	r0, #32
 800064e:	f000 fae9 	bl	8000c24 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <main+0xa0>)
 8000654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fa65 	bl	8000b28 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 800065e:	f000 fb27 	bl	8000cb0 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000662:	f000 faf7 	bl	8000c54 <NRF24_enableAckPayload>

	NRF24_startListening();
 8000666:	f000 fa39 	bl	8000adc <NRF24_startListening>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x96>
 800066e:	bf00      	nop
 8000670:	48000400 	.word	0x48000400
 8000674:	20000000 	.word	0x20000000

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff5f 	bl	8000540 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000682:	bf00      	nop
 8000684:	f7ff ff70 	bl	8000568 <LL_FLASH_GetLatency>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1fa      	bne.n	8000684 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800068e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000692:	f7ff ff77 	bl	8000584 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000696:	bf00      	nop
 8000698:	f7ff ff88 	bl	80005ac <LL_PWR_IsActiveFlag_VOS>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1fa      	bne.n	8000698 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 80006a2:	f7ff fe63 	bl	800036c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80006a6:	bf00      	nop
 80006a8:	f7ff fe70 	bl	800038c <LL_RCC_MSI_IsReady>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d1fa      	bne.n	80006a8 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 80006b2:	f7ff fe7d 	bl	80003b0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80006b6:	2060      	movs	r0, #96	@ 0x60
 80006b8:	f7ff fe8a 	bl	80003d0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fe9b 	bl	80003f8 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff feae 	bl	8000424 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80006c8:	bf00      	nop
 80006ca:	f7ff febf 	bl	800044c <LL_RCC_GetSysClkSource>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1fa      	bne.n	80006ca <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fec7 	bl	8000468 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff fed8 	bl	8000490 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fee9 	bl	80004b8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <SystemClock_Config+0x80>)
 80006e8:	f001 fee8 	bl	80024bc <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 80006ec:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <SystemClock_Config+0x80>)
 80006ee:	f001 ff1b 	bl	8002528 <LL_SetSystemCoreClock>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	003d0900 	.word	0x003d0900

080006fc <SysTick_Handler>:
	        // Just wait
	    }
}

void SysTick_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	    Tick++; // Increase system timer
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <SysTick_Handler+0x18>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a03      	ldr	r2, [pc, #12]	@ (8000714 <SysTick_Handler+0x18>)
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	2000002c 	.word	0x2000002c

08000718 <LL_AHB2_GRP1_EnableClock>:
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000724:	4907      	ldr	r1, [pc, #28]	@ (8000744 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800072e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000

08000748 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	619a      	str	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <NRF24_DelayMicroSeconds>:
extern  uint32_t Tick;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <NRF24_DelayMicroSeconds+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <NRF24_DelayMicroSeconds+0x40>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000784:	bf00      	nop
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	60fa      	str	r2, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1fa      	bne.n	8000786 <NRF24_DelayMicroSeconds+0x22>
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	165e9f81 	.word	0x165e9f81

080007a8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if(state) spi_cs2_set_high();
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <NRF24_csn+0x14>
 80007b6:	f001 f831 	bl	800181c <spi_cs2_set_high>
	else spi_cs2_set_low();
}
 80007ba:	e001      	b.n	80007c0 <NRF24_csn+0x18>
	else spi_cs2_set_low();
 80007bc:	f001 f83a 	bl	8001834 <spi_cs2_set_low>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if(state) LL_GPIO_SetOutputPin(nrf24_PORT, nrf24_CE_PIN);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <NRF24_ce+0x20>
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <NRF24_ce+0x38>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <NRF24_ce+0x3c>)
 80007dc:	8812      	ldrh	r2, [r2, #0]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ffb1 	bl	8000748 <LL_GPIO_SetOutputPin>
	else LL_GPIO_SetOutputPin(nrf24_PORT, nrf24_CE_PIN);
}
 80007e6:	e007      	b.n	80007f8 <NRF24_ce+0x30>
	else LL_GPIO_SetOutputPin(nrf24_PORT, nrf24_CE_PIN);
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <NRF24_ce+0x38>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <NRF24_ce+0x3c>)
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa8 	bl	8000748 <LL_GPIO_SetOutputPin>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000003c 	.word	0x2000003c
 8000804:	20000042 	.word	0x20000042

08000808 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ffc8 	bl	80007a8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	b2db      	uxtb	r3, r3
 8000820:	733b      	strb	r3, [r7, #12]
	spi_write_data(spiBuf,1);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f001 f80f 	bl	800184c <spi_write_data>
	//Receive data
	spi_read_data(&spiBuf[1], 1);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	3301      	adds	r3, #1
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f854 	bl	80018e4 <spi_read_data>
	retData = spiBuf[1];
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ffb1 	bl	80007a8 <NRF24_csn>
	return retData;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ffa1 	bl	80007a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	b2db      	uxtb	r3, r3
 800086e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	737b      	strb	r3, [r7, #13]
	spi_write_data(spiBuf, 2);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ffe6 	bl	800184c <spi_write_data>
	//Bring CSN high
	NRF24_csn(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ff91 	bl	80007a8 <NRF24_csn>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	6039      	str	r1, [r7, #0]
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	4613      	mov	r3, r2
 800089c:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff ff82 	bl	80007a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	733b      	strb	r3, [r7, #12]
	spi_write_data(spiBuf, 1);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 ffc9 	bl	800184c <spi_write_data>
	spi_write_data( (uint8_t*)buf, len);
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	4619      	mov	r1, r3
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f000 ffc4 	bl	800184c <spi_write_data>
	//Bring CSN high
	NRF24_csn(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff ff6f 	bl	80007a8 <NRF24_csn>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80008d6:	21ff      	movs	r1, #255	@ 0xff
 80008d8:	20e1      	movs	r0, #225	@ 0xe1
 80008da:	f7ff ffb9 	bl	8000850 <NRF24_write_register>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80008e6:	21ff      	movs	r1, #255	@ 0xff
 80008e8:	20e2      	movs	r0, #226	@ 0xe2
 80008ea:	f7ff ffb1 	bl	8000850 <NRF24_write_register>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <NRF24_init_GPIO>:
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
	return statReg;
}
void NRF24_init_GPIO(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff ff04 	bl	8000718 <LL_AHB2_GRP1_EnableClock>
	  /** Configuration
	  PB1   ------> CE
	  PB2   ------> CE2
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8000910:	2306      	movs	r3, #6
 8000912:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <NRF24_init_GPIO+0x44>)
 800092a:	f001 fd3f 	bl	80023ac <LL_GPIO_Init>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	48000400 	.word	0x48000400

0800093c <NRF24_begin>:
//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
 8000948:	4613      	mov	r3, r2
 800094a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800094c:	4a60      	ldr	r2, [pc, #384]	@ (8000ad0 <NRF24_begin+0x194>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000952:	4a60      	ldr	r2, [pc, #384]	@ (8000ad4 <NRF24_begin+0x198>)
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000958:	4a5f      	ldr	r2, [pc, #380]	@ (8000ad8 <NRF24_begin+0x19c>)
 800095a:	883b      	ldrh	r3, [r7, #0]
 800095c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff22 	bl	80007a8 <NRF24_csn>
	NRF24_ce(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff2f 	bl	80007c8 <NRF24_ce>
	//5 ms initial delay
	LL_mDelay(5);
 800096a:	2005      	movs	r0, #5
 800096c:	f001 fdb4 	bl	80024d8 <LL_mDelay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000970:	2108      	movs	r1, #8
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff6c 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000978:	213f      	movs	r1, #63	@ 0x3f
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff ff68 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000980:	2103      	movs	r1, #3
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff ff64 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000988:	2103      	movs	r1, #3
 800098a:	2003      	movs	r0, #3
 800098c:	f7ff ff60 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000990:	2103      	movs	r1, #3
 8000992:	2004      	movs	r0, #4
 8000994:	f7ff ff5c 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000998:	2102      	movs	r1, #2
 800099a:	2005      	movs	r0, #5
 800099c:	f7ff ff58 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80009a0:	210f      	movs	r1, #15
 80009a2:	2006      	movs	r0, #6
 80009a4:	f7ff ff54 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80009a8:	210e      	movs	r1, #14
 80009aa:	2007      	movs	r0, #7
 80009ac:	f7ff ff50 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2008      	movs	r0, #8
 80009b4:	f7ff ff4c 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2009      	movs	r0, #9
 80009bc:	f7ff ff48 	bl	8000850 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80009c0:	23e7      	movs	r3, #231	@ 0xe7
 80009c2:	733b      	strb	r3, [r7, #12]
 80009c4:	23e7      	movs	r3, #231	@ 0xe7
 80009c6:	72fb      	strb	r3, [r7, #11]
 80009c8:	23e7      	movs	r3, #231	@ 0xe7
 80009ca:	72bb      	strb	r3, [r7, #10]
 80009cc:	23e7      	movs	r3, #231	@ 0xe7
 80009ce:	727b      	strb	r3, [r7, #9]
 80009d0:	23e7      	movs	r3, #231	@ 0xe7
 80009d2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2205      	movs	r2, #5
 80009da:	4619      	mov	r1, r3
 80009dc:	200a      	movs	r0, #10
 80009de:	f7ff ff56 	bl	800088e <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80009e2:	23c2      	movs	r3, #194	@ 0xc2
 80009e4:	733b      	strb	r3, [r7, #12]
 80009e6:	23c2      	movs	r3, #194	@ 0xc2
 80009e8:	72fb      	strb	r3, [r7, #11]
 80009ea:	23c2      	movs	r3, #194	@ 0xc2
 80009ec:	72bb      	strb	r3, [r7, #10]
 80009ee:	23c2      	movs	r3, #194	@ 0xc2
 80009f0:	727b      	strb	r3, [r7, #9]
 80009f2:	23c2      	movs	r3, #194	@ 0xc2
 80009f4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2205      	movs	r2, #5
 80009fc:	4619      	mov	r1, r3
 80009fe:	200b      	movs	r0, #11
 8000a00:	f7ff ff45 	bl	800088e <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000a04:	21c3      	movs	r1, #195	@ 0xc3
 8000a06:	200c      	movs	r0, #12
 8000a08:	f7ff ff22 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000a0c:	21c4      	movs	r1, #196	@ 0xc4
 8000a0e:	200d      	movs	r0, #13
 8000a10:	f7ff ff1e 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000a14:	21c5      	movs	r1, #197	@ 0xc5
 8000a16:	200e      	movs	r0, #14
 8000a18:	f7ff ff1a 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000a1c:	21c6      	movs	r1, #198	@ 0xc6
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f7ff ff16 	bl	8000850 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a24:	23e7      	movs	r3, #231	@ 0xe7
 8000a26:	733b      	strb	r3, [r7, #12]
 8000a28:	23e7      	movs	r3, #231	@ 0xe7
 8000a2a:	72fb      	strb	r3, [r7, #11]
 8000a2c:	23e7      	movs	r3, #231	@ 0xe7
 8000a2e:	72bb      	strb	r3, [r7, #10]
 8000a30:	23e7      	movs	r3, #231	@ 0xe7
 8000a32:	727b      	strb	r3, [r7, #9]
 8000a34:	23e7      	movs	r3, #231	@ 0xe7
 8000a36:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	4619      	mov	r1, r3
 8000a40:	2010      	movs	r0, #16
 8000a42:	f7ff ff24 	bl	800088e <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2011      	movs	r0, #17
 8000a4a:	f7ff ff01 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2012      	movs	r0, #18
 8000a52:	f7ff fefd 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000a56:	2100      	movs	r1, #0
 8000a58:	2013      	movs	r0, #19
 8000a5a:	f7ff fef9 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2014      	movs	r0, #20
 8000a62:	f7ff fef5 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2015      	movs	r0, #21
 8000a6a:	f7ff fef1 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2016      	movs	r0, #22
 8000a72:	f7ff feed 	bl	8000850 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000a76:	f000 fa38 	bl	8000eea <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f7ff fee7 	bl	8000850 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	201d      	movs	r0, #29
 8000a86:	f7ff fee3 	bl	8000850 <NRF24_write_register>
	printRadioSettings();
 8000a8a:	f000 fa44 	bl	8000f16 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000a8e:	210f      	movs	r1, #15
 8000a90:	200f      	movs	r0, #15
 8000a92:	f000 f897 	bl	8000bc4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f969 	bl	8000d6e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f99f 	bl	8000de0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 f9e2 	bl	8000e6c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000aa8:	f000 f934 	bl	8000d14 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000aac:	2020      	movs	r0, #32
 8000aae:	f000 f8b9 	bl	8000c24 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000ab2:	f000 fa12 	bl	8000eda <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000ab6:	204c      	movs	r0, #76	@ 0x4c
 8000ab8:	f000 f89f 	bl	8000bfa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000abc:	f7ff ff09 	bl	80008d2 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ac0:	f7ff ff0f 	bl	80008e2 <NRF24_flush_rx>

	NRF24_powerDown();
 8000ac4:	f000 f9fa 	bl	8000ebc <NRF24_powerDown>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000003c 	.word	0x2000003c
 8000ad4:	20000040 	.word	0x20000040
 8000ad8:	20000042 	.word	0x20000042

08000adc <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fe91 	bl	8000808 <NRF24_read_register>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f043 0303 	orr.w	r3, r3, #3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fead 	bl	8000850 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <NRF24_startListening+0x48>)
 8000af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	d004      	beq.n	8000b0a <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000b00:	2205      	movs	r2, #5
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <NRF24_startListening+0x48>)
 8000b04:	200a      	movs	r0, #10
 8000b06:	f7ff fec2 	bl	800088e <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000b0a:	f7ff fee2 	bl	80008d2 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b0e:	f7ff fee8 	bl	80008e2 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fe58 	bl	80007c8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000b18:	2096      	movs	r0, #150	@ 0x96
 8000b1a:	f7ff fe23 	bl	8000764 <NRF24_DelayMicroSeconds>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000030 	.word	0x20000030

08000b28 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4601      	mov	r1, r0
 8000b30:	e9c7 2300 	strd	r2, r3, [r7]
 8000b34:	460b      	mov	r3, r1
 8000b36:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d104      	bne.n	8000b48 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b42:	491c      	ldr	r1, [pc, #112]	@ (8000bb4 <NRF24_openReadingPipe+0x8c>)
 8000b44:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d82d      	bhi.n	8000baa <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d808      	bhi.n	8000b66 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <NRF24_openReadingPipe+0x90>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	2205      	movs	r2, #5
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe95 	bl	800088e <NRF24_write_registerN>
 8000b64:	e007      	b.n	8000b76 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4a13      	ldr	r2, [pc, #76]	@ (8000bb8 <NRF24_openReadingPipe+0x90>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe8c 	bl	800088e <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <NRF24_openReadingPipe+0x94>)
 8000b7a:	5cd3      	ldrb	r3, [r2, r3]
 8000b7c:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <NRF24_openReadingPipe+0x98>)
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe64 	bl	8000850 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fe3d 	bl	8000808 <NRF24_read_register>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fe53 	bl	8000850 <NRF24_write_register>
	}

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000030 	.word	0x20000030
 8000bb8:	080025a8 	.word	0x080025a8
 8000bbc:	080025b0 	.word	0x080025b0
 8000bc0:	20000038 	.word	0x20000038

08000bc4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460a      	mov	r2, r1
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	b25a      	sxtb	r2, r3
 8000bda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	2004      	movs	r0, #4
 8000bee:	f7ff fe2f 	bl	8000850 <NRF24_write_register>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000c04:	237f      	movs	r3, #127	@ 0x7f
 8000c06:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	bf28      	it	cs
 8000c10:	4613      	movcs	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	2005      	movs	r0, #5
 8000c18:	f7ff fe1a 	bl	8000850 <NRF24_write_register>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4293      	cmp	r3, r2
 8000c38:	bf28      	it	cs
 8000c3a:	4613      	movcs	r3, r2
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <NRF24_setPayloadSize+0x2c>)
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000038 	.word	0x20000038

08000c54 <NRF24_enableAckPayload>:
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
}
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000c58:	201d      	movs	r0, #29
 8000c5a:	f7ff fdd5 	bl	8000808 <NRF24_read_register>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f043 0306 	orr.w	r3, r3, #6
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	201d      	movs	r0, #29
 8000c6a:	f7ff fdf1 	bl	8000850 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000c6e:	201d      	movs	r0, #29
 8000c70:	f7ff fdca 	bl	8000808 <NRF24_read_register>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10c      	bne.n	8000c94 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000c7a:	f000 f936 	bl	8000eea <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000c7e:	201d      	movs	r0, #29
 8000c80:	f7ff fdc2 	bl	8000808 <NRF24_read_register>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f043 0306 	orr.w	r3, r3, #6
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	201d      	movs	r0, #29
 8000c90:	f7ff fdde 	bl	8000850 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000c94:	201c      	movs	r0, #28
 8000c96:	f7ff fdb7 	bl	8000808 <NRF24_read_register>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f043 0303 	orr.w	r3, r3, #3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	201c      	movs	r0, #28
 8000ca6:	f7ff fdd3 	bl	8000850 <NRF24_write_register>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000cb4:	201d      	movs	r0, #29
 8000cb6:	f7ff fda7 	bl	8000808 <NRF24_read_register>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	201d      	movs	r0, #29
 8000cc6:	f7ff fdc3 	bl	8000850 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000cca:	201d      	movs	r0, #29
 8000ccc:	f7ff fd9c 	bl	8000808 <NRF24_read_register>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10c      	bne.n	8000cf0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000cd6:	f000 f908 	bl	8000eea <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000cda:	201d      	movs	r0, #29
 8000cdc:	f7ff fd94 	bl	8000808 <NRF24_read_register>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4619      	mov	r1, r3
 8000cea:	201d      	movs	r0, #29
 8000cec:	f7ff fdb0 	bl	8000850 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000cf0:	201c      	movs	r0, #28
 8000cf2:	f7ff fd89 	bl	8000808 <NRF24_read_register>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	201c      	movs	r0, #28
 8000d02:	f7ff fda5 	bl	8000850 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000d06:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <NRF24_enableDynamicPayloads+0x60>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000039 	.word	0x20000039

08000d14 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d18:	201d      	movs	r0, #29
 8000d1a:	f7ff fd75 	bl	8000808 <NRF24_read_register>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f023 0304 	bic.w	r3, r3, #4
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	201d      	movs	r0, #29
 8000d2a:	f7ff fd91 	bl	8000850 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	201c      	movs	r0, #28
 8000d32:	f7ff fd8d 	bl	8000850 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d36:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <NRF24_disableDynamicPayloads+0x2c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000039 	.word	0x20000039

08000d44 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000d54:	213f      	movs	r1, #63	@ 0x3f
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fd7a 	bl	8000850 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000d5c:	e003      	b.n	8000d66 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fd75 	bl	8000850 <NRF24_write_register>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000d78:	2006      	movs	r0, #6
 8000d7a:	f7ff fd45 	bl	8000808 <NRF24_read_register>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	f023 0306 	bic.w	r3, r3, #6
 8000d88:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d104      	bne.n	8000d9a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	f043 0306 	orr.w	r3, r3, #6
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e019      	b.n	8000dce <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d104      	bne.n	8000daa <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e011      	b.n	8000dce <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d104      	bne.n	8000dba <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e009      	b.n	8000dce <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d103      	bne.n	8000dce <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f043 0306 	orr.w	r3, r3, #6
 8000dcc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f7ff fd3c 	bl	8000850 <NRF24_write_register>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dee:	2006      	movs	r0, #6
 8000df0:	f7ff fd0a 	bl	8000808 <NRF24_read_register>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <NRF24_setDataRate+0x88>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000e04:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d107      	bne.n	8000e1c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <NRF24_setDataRate+0x88>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	73bb      	strb	r3, [r7, #14]
 8000e1a:	e00d      	b.n	8000e38 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d107      	bne.n	8000e32 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <NRF24_setDataRate+0x88>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	73bb      	strb	r3, [r7, #14]
 8000e30:	e002      	b.n	8000e38 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <NRF24_setDataRate+0x88>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f7ff fd07 	bl	8000850 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000e42:	2006      	movs	r0, #6
 8000e44:	f7ff fce0 	bl	8000808 <NRF24_read_register>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d102      	bne.n	8000e58 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e002      	b.n	8000e5e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <NRF24_setDataRate+0x88>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000003a 	.word	0x2000003a

08000e6c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fcc6 	bl	8000808 <NRF24_read_register>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f023 030c 	bic.w	r3, r3, #12
 8000e82:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00f      	beq.n	8000eaa <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d104      	bne.n	8000e9a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e007      	b.n	8000eaa <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4619      	mov	r1, r3
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fcce 	bl	8000850 <NRF24_write_register>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fca1 	bl	8000808 <NRF24_read_register>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f023 0302 	bic.w	r3, r3, #2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fcbd 	bl	8000850 <NRF24_write_register>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000ede:	2170      	movs	r1, #112	@ 0x70
 8000ee0:	2007      	movs	r0, #7
 8000ee2:	f7ff fcb5 	bl	8000850 <NRF24_write_register>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fc59 	bl	80007a8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ef6:	2350      	movs	r3, #80	@ 0x50
 8000ef8:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000efa:	2373      	movs	r3, #115	@ 0x73
 8000efc:	717b      	strb	r3, [r7, #5]
	spi_write_data(cmdRxBuf, 1);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fca2 	bl	800184c <spi_write_data>
	NRF24_csn(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc4d 	bl	80007a8 <NRF24_csn>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_AHB2_GRP1_EnableClock>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	40021000 	.word	0x40021000

08000f54 <LL_GPIO_SetPinMode>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	@ 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	e003      	b.n	8000f86 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2103      	movs	r1, #3
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	e003      	b.n	8000fb4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	372c      	adds	r7, #44	@ 0x2c
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_GPIO_SetPinSpeed>:
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b08b      	sub	sp, #44	@ 0x2c
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	613b      	str	r3, [r7, #16]
  return result;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	e003      	b.n	8001000 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2103      	movs	r1, #3
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	61fb      	str	r3, [r7, #28]
  return result;
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001022:	2320      	movs	r3, #32
 8001024:	e003      	b.n	800102e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	fab3 f383 	clz	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	431a      	orrs	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]
}
 800103c:	bf00      	nop
 800103e:	372c      	adds	r7, #44	@ 0x2c
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_GPIO_SetPinPull>:
{
 8001048:	b480      	push	{r7}
 800104a:	b08b      	sub	sp, #44	@ 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	613b      	str	r3, [r7, #16]
  return result;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800106e:	2320      	movs	r3, #32
 8001070:	e003      	b.n	800107a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	fab3 f383 	clz	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2103      	movs	r1, #3
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	401a      	ands	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	61fb      	str	r3, [r7, #28]
  return result;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800109c:	2320      	movs	r3, #32
 800109e:	e003      	b.n	80010a8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	431a      	orrs	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	60da      	str	r2, [r3, #12]
}
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	@ 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <init_ControlerButtons>:
 */
#include "main.h"
#include "radioControl.h"
#include "nRF24.h"

void init_ControlerButtons(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff ff2b 	bl	8000f24 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinPull(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_PULL_UP);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2102      	movs	r1, #2
 80010d2:	481e      	ldr	r0, [pc, #120]	@ (800114c <init_ControlerButtons+0x88>)
 80010d4:	f7ff ffb8 	bl	8001048 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	481b      	ldr	r0, [pc, #108]	@ (800114c <init_ControlerButtons+0x88>)
 80010de:	f7ff ff76 	bl	8000fce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2102      	movs	r1, #2
 80010e6:	4819      	ldr	r0, [pc, #100]	@ (800114c <init_ControlerButtons+0x88>)
 80010e8:	f7ff ff34 	bl	8000f54 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_PULL_UP);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2101      	movs	r1, #1
 80010f0:	4816      	ldr	r0, [pc, #88]	@ (800114c <init_ControlerButtons+0x88>)
 80010f2:	f7ff ffa9 	bl	8001048 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2101      	movs	r1, #1
 80010fa:	4814      	ldr	r0, [pc, #80]	@ (800114c <init_ControlerButtons+0x88>)
 80010fc:	f7ff ff67 	bl	8000fce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8001100:	2200      	movs	r2, #0
 8001102:	2101      	movs	r1, #1
 8001104:	4811      	ldr	r0, [pc, #68]	@ (800114c <init_ControlerButtons+0x88>)
 8001106:	f7ff ff25 	bl	8000f54 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_PULL_UP);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	480f      	ldr	r0, [pc, #60]	@ (800114c <init_ControlerButtons+0x88>)
 8001110:	f7ff ff9a 	bl	8001048 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <init_ControlerButtons+0x88>)
 800111a:	f7ff ff58 	bl	8000fce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800111e:	2200      	movs	r2, #0
 8001120:	2110      	movs	r1, #16
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <init_ControlerButtons+0x88>)
 8001124:	f7ff ff16 	bl	8000f54 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_PULL_UP);
 8001128:	2201      	movs	r2, #1
 800112a:	2101      	movs	r1, #1
 800112c:	4807      	ldr	r0, [pc, #28]	@ (800114c <init_ControlerButtons+0x88>)
 800112e:	f7ff ff8b 	bl	8001048 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <init_ControlerButtons+0x88>)
 8001138:	f7ff ff49 	bl	8000fce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(STOP_GPIO, STOP_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800113c:	2200      	movs	r2, #0
 800113e:	2101      	movs	r1, #1
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <init_ControlerButtons+0x88>)
 8001142:	f7ff ff07 	bl	8000f54 <LL_GPIO_SetPinMode>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	48000800 	.word	0x48000800

08001150 <LL_AHB2_GRP1_EnableClock>:
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800115a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800115c:	4907      	ldr	r1, [pc, #28]	@ (800117c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000

08001180 <LL_APB1_GRP1_EnableClock>:
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800118a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001196:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_GPIO_SetOutputPin>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	619a      	str	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 7282 	bic.w	r2, r3, #260	@ 0x104
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 0210 	bic.w	r2, r3, #16
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0201 	bic.w	r2, r3, #1
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 0202 	bic.w	r2, r3, #2
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f423 4244 	bic.w	r2, r3, #50176	@ 0xc400
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_15BIT
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	605a      	str	r2, [r3, #4]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 0204 	bic.w	r2, r3, #4
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	0c1b      	lsrs	r3, r3, #16
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <LL_SPI_IsActiveFlag_RXNE+0x18>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d101      	bne.n	80013f4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001412:	2b80      	cmp	r3, #128	@ 0x80
 8001414:	d101      	bne.n	800141a <LL_SPI_IsActiveFlag_BSY+0x18>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <LL_SPI_IsActiveFlag_BSY+0x1a>
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800146e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_SPI_IsEnabledIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_IsEnabledIT_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d4:	2b40      	cmp	r3, #64	@ 0x40
 80014d6:	d101      	bne.n	80014dc <LL_SPI_IsEnabledIT_RXNE+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_SPI_IsEnabledIT_RXNE+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	2b80      	cmp	r3, #128	@ 0x80
 80014fc:	d101      	bne.n	8001502 <LL_SPI_IsEnabledIT_TXE+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_SPI_IsEnabledIT_TXE+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	330c      	adds	r3, #12
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	330c      	adds	r3, #12
 800153c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <MX_SPI2_Init>:

static buffer_f rx_buffer = {0};
static buffer_f tx_buffer = {0};

void MX_SPI2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fdf2 	bl	8001150 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800156c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001570:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001572:	2302      	movs	r3, #2
 8001574:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001582:	2305      	movs	r3, #5
 8001584:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4834      	ldr	r0, [pc, #208]	@ (800165c <MX_SPI2_Init+0x10c>)
 800158c:	f000 ff0e 	bl	80023ac <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_11;
 8001590:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001594:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001596:	2301      	movs	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	482c      	ldr	r0, [pc, #176]	@ (800165c <MX_SPI2_Init+0x10c>)
 80015ac:	f000 fefe 	bl	80023ac <LL_GPIO_Init>

	spi_cs_set_high();
 80015b0:	f000 f928 	bl	8001804 <spi_cs_set_high>
	spi_cs2_set_high();
 80015b4:	f000 f932 	bl	800181c <spi_cs2_set_high>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80015b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80015bc:	f7ff fde0 	bl	8001180 <LL_APB1_GRP1_EnableClock>

		LL_SPI_Disable(spi);
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe1f 	bl	8001208 <LL_SPI_Disable>
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fe28 	bl	8001228 <LL_SPI_SetMode>
		LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fe94 	bl	800130c <LL_SPI_SetTransferDirection>
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe55 	bl	800129a <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe3c 	bl	8001274 <LL_SPI_SetClockPhase>
		LL_SPI_SetNSSMode(spi, LL_SPI_NSS_SOFT);
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_SPI2_Init+0x110>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff feba 	bl	800137e <LL_SPI_SetNSSMode>
		LL_SPI_SetBaudRatePrescaler(spi, LL_SPI_BAUDRATEPRESCALER_DIV8);
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_SPI2_Init+0x110>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2110      	movs	r1, #16
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe55 	bl	80012c0 <LL_SPI_SetBaudRatePrescaler>
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_SPI2_Init+0x110>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe62 	bl	80012e6 <LL_SPI_SetTransferBitOrder>
		LL_SPI_SetDataWidth(spi, LL_SPI_DATAWIDTH_8BIT);
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_SPI2_Init+0x110>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe81 	bl	8001332 <LL_SPI_SetDataWidth>
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_SPI2_Init+0x110>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe09 	bl	800124e <LL_SPI_SetStandard>
		LL_SPI_SetRxFIFOThreshold(spi, LL_SPI_RX_FIFO_TH_QUARTER);
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_SPI2_Init+0x110>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe87 	bl	8001358 <LL_SPI_SetRxFIFOThreshold>
		LL_SPI_Enable(spi);
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <MX_SPI2_Init+0x110>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdca 	bl	80011e8 <LL_SPI_Enable>

}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	48000400 	.word	0x48000400
 8001660:	20000008 	.word	0x20000008

08001664 <SPI2_IRQHandler>:
	LL_SPI_EnableIT_RXNE(SPI2);
	LL_SPI_Enable(SPI2);
}

void SPI2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	if(LL_SPI_IsActiveFlag_TXE(SPI2) && LL_SPI_IsEnabledIT_TXE(SPI2))
 8001668:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <SPI2_IRQHandler+0x40>)
 800166a:	f7ff feb7 	bl	80013dc <LL_SPI_IsActiveFlag_TXE>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <SPI2_IRQHandler+0x20>
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <SPI2_IRQHandler+0x40>)
 8001676:	f7ff ff38 	bl	80014ea <LL_SPI_IsEnabledIT_TXE>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SPI2_IRQHandler+0x20>
	{
		spi_transmit_callback();
 8001680:	f000 f812 	bl	80016a8 <spi_transmit_callback>
	}
	if(LL_SPI_IsActiveFlag_RXNE(SPI2) && LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <SPI2_IRQHandler+0x40>)
 8001686:	f7ff fe96 	bl	80013b6 <LL_SPI_IsActiveFlag_RXNE>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <SPI2_IRQHandler+0x3c>
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <SPI2_IRQHandler+0x40>)
 8001692:	f7ff ff17 	bl	80014c4 <LL_SPI_IsEnabledIT_RXNE>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SPI2_IRQHandler+0x3c>
	{
		spi_receive_callback();
 800169c:	f000 f86c 	bl	8001778 <spi_receive_callback>
	}
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40003800 	.word	0x40003800

080016a8 <spi_transmit_callback>:

void spi_transmit_callback(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 80016ac:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <spi_transmit_callback+0xc4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02e      	beq.n	8001712 <spi_transmit_callback+0x6a>
	{
		if(!LL_SPI_IsEnabledIT_RXNE(SPI2))
 80016b4:	482e      	ldr	r0, [pc, #184]	@ (8001770 <spi_transmit_callback+0xc8>)
 80016b6:	f7ff ff05 	bl	80014c4 <LL_SPI_IsEnabledIT_RXNE>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11f      	bne.n	8001700 <spi_transmit_callback+0x58>
		{
			LL_SPI_TransmitData8(SPI2, *tx_buffer.data_ptr);
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <spi_transmit_callback+0xc4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4829      	ldr	r0, [pc, #164]	@ (8001770 <spi_transmit_callback+0xc8>)
 80016ca:	f7ff ff2f 	bl	800152c <LL_SPI_TransmitData8>

			//echo
			rx_buffer.data_ptr = tx_buffer.data_ptr;
 80016ce:	4b27      	ldr	r3, [pc, #156]	@ (800176c <spi_transmit_callback+0xc4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a28      	ldr	r2, [pc, #160]	@ (8001774 <spi_transmit_callback+0xcc>)
 80016d4:	6013      	str	r3, [r2, #0]
			rx_buffer.data_ptr++;
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <spi_transmit_callback+0xcc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <spi_transmit_callback+0xcc>)
 80016de:	6013      	str	r3, [r2, #0]
			rx_buffer.count--;
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <spi_transmit_callback+0xcc>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a23      	ldr	r2, [pc, #140]	@ (8001774 <spi_transmit_callback+0xcc>)
 80016e8:	6053      	str	r3, [r2, #4]
			// end echo

			tx_buffer.data_ptr++;
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <spi_transmit_callback+0xc4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <spi_transmit_callback+0xc4>)
 80016f2:	6013      	str	r3, [r2, #0]
			tx_buffer.count--;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <spi_transmit_callback+0xc4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <spi_transmit_callback+0xc4>)
 80016fc:	6053      	str	r3, [r2, #4]
 80016fe:	e008      	b.n	8001712 <spi_transmit_callback+0x6a>
		}
		else
		{
			LL_SPI_TransmitData8(SPI2, DUMMY_BYTE);
 8001700:	21ff      	movs	r1, #255	@ 0xff
 8001702:	481b      	ldr	r0, [pc, #108]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001704:	f7ff ff12 	bl	800152c <LL_SPI_TransmitData8>
			tx_buffer.count--;
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <spi_transmit_callback+0xc4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <spi_transmit_callback+0xc4>)
 8001710:	6053      	str	r3, [r2, #4]
		}
	}
	if(tx_buffer.count <= 0 && !LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <spi_transmit_callback+0xc4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d126      	bne.n	8001768 <spi_transmit_callback+0xc0>
 800171a:	4815      	ldr	r0, [pc, #84]	@ (8001770 <spi_transmit_callback+0xc8>)
 800171c:	f7ff fed2 	bl	80014c4 <LL_SPI_IsEnabledIT_RXNE>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d120      	bne.n	8001768 <spi_transmit_callback+0xc0>
	{
		LL_SPI_DisableIT_TXE(SPI2);
 8001726:	4812      	ldr	r0, [pc, #72]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001728:	f7ff febc 	bl	80014a4 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY)
 800172c:	bf00      	nop
 800172e:	4810      	ldr	r0, [pc, #64]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001730:	f7ff fe88 	bl	8001444 <LL_SPI_GetTxFIFOLevel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f9      	bne.n	800172e <spi_transmit_callback+0x86>
			;

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0)
 800173a:	bf00      	nop
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <spi_transmit_callback+0xc8>)
 800173e:	f7ff fe60 	bl	8001402 <LL_SPI_IsActiveFlag_BSY>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f9      	bne.n	800173c <spi_transmit_callback+0x94>
			;

		LL_SPI_Disable(SPI2);
 8001748:	4809      	ldr	r0, [pc, #36]	@ (8001770 <spi_transmit_callback+0xc8>)
 800174a:	f7ff fd5d 	bl	8001208 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 800174e:	e002      	b.n	8001756 <spi_transmit_callback+0xae>
		{
			LL_SPI_ReceiveData8(SPI2);
 8001750:	4807      	ldr	r0, [pc, #28]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001752:	f7ff fedd 	bl	8001510 <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8001756:	4806      	ldr	r0, [pc, #24]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001758:	f7ff fe66 	bl	8001428 <LL_SPI_GetRxFIFOLevel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f6      	bne.n	8001750 <spi_transmit_callback+0xa8>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 8001762:	4803      	ldr	r0, [pc, #12]	@ (8001770 <spi_transmit_callback+0xc8>)
 8001764:	f7ff fe7c 	bl	8001460 <LL_SPI_ClearFlag_OVR>
	}
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000004c 	.word	0x2000004c
 8001770:	40003800 	.word	0x40003800
 8001774:	20000044 	.word	0x20000044

08001778 <spi_receive_callback>:

void spi_receive_callback(void)
{
 8001778:	b598      	push	{r3, r4, r7, lr}
 800177a:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <spi_receive_callback+0x84>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d010      	beq.n	80017a6 <spi_receive_callback+0x2e>
	{
		*rx_buffer.data_ptr = LL_SPI_ReceiveData8(SPI2);
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <spi_receive_callback+0x84>)
 8001786:	681c      	ldr	r4, [r3, #0]
 8001788:	481d      	ldr	r0, [pc, #116]	@ (8001800 <spi_receive_callback+0x88>)
 800178a:	f7ff fec1 	bl	8001510 <LL_SPI_ReceiveData8>
 800178e:	4603      	mov	r3, r0
 8001790:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <spi_receive_callback+0x84>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <spi_receive_callback+0x84>)
 800179a:	6013      	str	r3, [r2, #0]
		rx_buffer.count--;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <spi_receive_callback+0x84>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <spi_receive_callback+0x84>)
 80017a4:	6053      	str	r3, [r2, #4]
	}

	if(rx_buffer.count <= 0)
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <spi_receive_callback+0x84>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d123      	bne.n	80017f6 <spi_receive_callback+0x7e>
	{
		LL_SPI_DisableIT_RXNE(SPI2);
 80017ae:	4814      	ldr	r0, [pc, #80]	@ (8001800 <spi_receive_callback+0x88>)
 80017b0:	f7ff fe68 	bl	8001484 <LL_SPI_DisableIT_RXNE>
		LL_SPI_DisableIT_TXE(SPI2);
 80017b4:	4812      	ldr	r0, [pc, #72]	@ (8001800 <spi_receive_callback+0x88>)
 80017b6:	f7ff fe75 	bl	80014a4 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY);
 80017ba:	bf00      	nop
 80017bc:	4810      	ldr	r0, [pc, #64]	@ (8001800 <spi_receive_callback+0x88>)
 80017be:	f7ff fe41 	bl	8001444 <LL_SPI_GetTxFIFOLevel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <spi_receive_callback+0x44>

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0);
 80017c8:	bf00      	nop
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <spi_receive_callback+0x88>)
 80017cc:	f7ff fe19 	bl	8001402 <LL_SPI_IsActiveFlag_BSY>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <spi_receive_callback+0x52>

		LL_SPI_Disable(SPI2);
 80017d6:	480a      	ldr	r0, [pc, #40]	@ (8001800 <spi_receive_callback+0x88>)
 80017d8:	f7ff fd16 	bl	8001208 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 80017dc:	e002      	b.n	80017e4 <spi_receive_callback+0x6c>
		{
			LL_SPI_ReceiveData8(SPI2);
 80017de:	4808      	ldr	r0, [pc, #32]	@ (8001800 <spi_receive_callback+0x88>)
 80017e0:	f7ff fe96 	bl	8001510 <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 80017e4:	4806      	ldr	r0, [pc, #24]	@ (8001800 <spi_receive_callback+0x88>)
 80017e6:	f7ff fe1f 	bl	8001428 <LL_SPI_GetRxFIFOLevel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f6      	bne.n	80017de <spi_receive_callback+0x66>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <spi_receive_callback+0x88>)
 80017f2:	f7ff fe35 	bl	8001460 <LL_SPI_ClearFlag_OVR>

	}
}
 80017f6:	bf00      	nop
 80017f8:	bd98      	pop	{r3, r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000044 	.word	0x20000044
 8001800:	40003800 	.word	0x40003800

08001804 <spi_cs_set_high>:

void spi_cs_set_high(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8001808:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <spi_cs_set_high+0x14>)
 800180e:	f7ff fccf 	bl	80011b0 <LL_GPIO_SetOutputPin>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000400 	.word	0x48000400

0800181c <spi_cs2_set_high>:
{
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
}

void spi_cs2_set_high(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8001820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <spi_cs2_set_high+0x14>)
 8001826:	f7ff fcc3 	bl	80011b0 <LL_GPIO_SetOutputPin>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	48000400 	.word	0x48000400

08001834 <spi_cs2_set_low>:

void spi_cs2_set_low(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8001838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <spi_cs2_set_low+0x14>)
 800183e:	f7ff fcc5 	bl	80011cc <LL_GPIO_ResetOutputPin>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	48000400 	.word	0x48000400

0800184c <spi_write_data>:

void spi_write_data(uint8_t *data, uint32_t size)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]

	while(count < size)
 800185a:	e014      	b.n	8001886 <spi_write_data+0x3a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 800185c:	bf00      	nop
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <spi_write_data+0x94>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fdba 	bl	80013dc <LL_SPI_IsActiveFlag_TXE>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f7      	beq.n	800185e <spi_write_data+0x12>
			;

		LL_SPI_TransmitData8(spi, *(data+count));
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <spi_write_data+0x94>)
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff fe56 	bl	800152c <LL_SPI_TransmitData8>

		count++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d3e6      	bcc.n	800185c <spi_write_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 800188e:	bf00      	nop
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <spi_write_data+0x94>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fdd5 	bl	8001444 <LL_SPI_GetTxFIFOLevel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f7      	bne.n	8001890 <spi_write_data+0x44>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 80018a0:	bf00      	nop
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <spi_write_data+0x94>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fdab 	bl	8001402 <LL_SPI_IsActiveFlag_BSY>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f7      	bne.n	80018a2 <spi_write_data+0x56>
		;


	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80018b2:	e004      	b.n	80018be <spi_write_data+0x72>
	{
		LL_SPI_ReceiveData8(spi);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <spi_write_data+0x94>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe29 	bl	8001510 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <spi_write_data+0x94>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdb0 	bl	8001428 <LL_SPI_GetRxFIFOLevel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f2      	bne.n	80018b4 <spi_write_data+0x68>
	}

	LL_SPI_ClearFlag_OVR(spi);
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <spi_write_data+0x94>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fdc4 	bl	8001460 <LL_SPI_ClearFlag_OVR>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000008 	.word	0x20000008

080018e4 <spi_read_data>:

void spi_read_data(uint8_t *data, uint32_t size)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]

	while(count < size)
 80018f2:	e024      	b.n	800193e <spi_read_data+0x5a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 80018f4:	bf00      	nop
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <spi_read_data+0xb4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fd6e 	bl	80013dc <LL_SPI_IsActiveFlag_TXE>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f7      	beq.n	80018f6 <spi_read_data+0x12>
			;

		LL_SPI_TransmitData8(spi, DUMMY_BYTE);
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <spi_read_data+0xb4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	21ff      	movs	r1, #255	@ 0xff
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe0d 	bl	800152c <LL_SPI_TransmitData8>

		while (!LL_SPI_IsActiveFlag_RXNE(spi))
 8001912:	bf00      	nop
 8001914:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <spi_read_data+0xb4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fd4c 	bl	80013b6 <LL_SPI_IsActiveFlag_RXNE>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f7      	beq.n	8001914 <spi_read_data+0x30>
			;

		*(data+count) = LL_SPI_ReceiveData8(spi);
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <spi_read_data+0xb4>)
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	18d4      	adds	r4, r2, r3
 800192e:	4608      	mov	r0, r1
 8001930:	f7ff fdee 	bl	8001510 <LL_SPI_ReceiveData8>
 8001934:	4603      	mov	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]

		count++;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
	while(count < size)
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3d6      	bcc.n	80018f4 <spi_read_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8001946:	bf00      	nop
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <spi_read_data+0xb4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd79 	bl	8001444 <LL_SPI_GetTxFIFOLevel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f7      	bne.n	8001948 <spi_read_data+0x64>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8001958:	bf00      	nop
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <spi_read_data+0xb4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd4f 	bl	8001402 <LL_SPI_IsActiveFlag_BSY>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f7      	bne.n	800195a <spi_read_data+0x76>
		;

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 800196a:	e004      	b.n	8001976 <spi_read_data+0x92>
	{
		LL_SPI_ReceiveData8(spi);
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <spi_read_data+0xb4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fdcd 	bl	8001510 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <spi_read_data+0xb4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fd54 	bl	8001428 <LL_SPI_GetRxFIFOLevel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f2      	bne.n	800196c <spi_read_data+0x88>
	}

	LL_SPI_ClearFlag_OVR(spi);
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <spi_read_data+0xb4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fd68 	bl	8001460 <LL_SPI_ClearFlag_OVR>
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	20000008 	.word	0x20000008

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <LL_AHB2_GRP1_EnableClock>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a20:	4907      	ldr	r1, [pc, #28]	@ (8001a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40021000 	.word	0x40021000

08001a44 <LL_APB1_GRP1_EnableClock>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000

08001a74 <LL_APB2_GRP1_EnableClock>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	621a      	str	r2, [r3, #32]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d028      	beq.n	8001ba8 <LL_TIM_OC_SetMode+0x64>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d023      	beq.n	8001ba4 <LL_TIM_OC_SetMode+0x60>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d01e      	beq.n	8001ba0 <LL_TIM_OC_SetMode+0x5c>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b40      	cmp	r3, #64	@ 0x40
 8001b66:	d019      	beq.n	8001b9c <LL_TIM_OC_SetMode+0x58>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b6e:	d013      	beq.n	8001b98 <LL_TIM_OC_SetMode+0x54>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b76:	d00d      	beq.n	8001b94 <LL_TIM_OC_SetMode+0x50>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b7e:	d007      	beq.n	8001b90 <LL_TIM_OC_SetMode+0x4c>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b86:	d101      	bne.n	8001b8c <LL_TIM_OC_SetMode+0x48>
 8001b88:	2307      	movs	r3, #7
 8001b8a:	e00e      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	e00c      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001b90:	2306      	movs	r3, #6
 8001b92:	e00a      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001b94:	2305      	movs	r3, #5
 8001b96:	e008      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e006      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_TIM_OC_SetMode+0x66>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <LL_TIM_OC_SetMode+0xac>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	440b      	add	r3, r1
 8001bba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <LL_TIM_OC_SetMode+0xb0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <LL_TIM_OC_SetMode+0xb4>)
 8001bca:	408b      	lsls	r3, r1
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <LL_TIM_OC_SetMode+0xb0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	408b      	lsls	r3, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	080025b8 	.word	0x080025b8
 8001bf4:	080025c4 	.word	0x080025c4
 8001bf8:	00010073 	.word	0x00010073

08001bfc <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d028      	beq.n	8001c60 <LL_TIM_OC_SetPolarity+0x64>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d023      	beq.n	8001c5c <LL_TIM_OC_SetPolarity+0x60>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d01e      	beq.n	8001c58 <LL_TIM_OC_SetPolarity+0x5c>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b40      	cmp	r3, #64	@ 0x40
 8001c1e:	d019      	beq.n	8001c54 <LL_TIM_OC_SetPolarity+0x58>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c26:	d013      	beq.n	8001c50 <LL_TIM_OC_SetPolarity+0x54>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2e:	d00d      	beq.n	8001c4c <LL_TIM_OC_SetPolarity+0x50>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c36:	d007      	beq.n	8001c48 <LL_TIM_OC_SetPolarity+0x4c>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3e:	d101      	bne.n	8001c44 <LL_TIM_OC_SetPolarity+0x48>
 8001c40:	2307      	movs	r3, #7
 8001c42:	e00e      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c44:	2308      	movs	r3, #8
 8001c46:	e00c      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c48:	2306      	movs	r3, #6
 8001c4a:	e00a      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	e008      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e006      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e004      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_TIM_OC_SetPolarity+0x66>
 8001c60:	2300      	movs	r3, #0
 8001c62:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <LL_TIM_OC_SetPolarity+0x9c>)
 8001c6c:	5ccb      	ldrb	r3, [r1, r3]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2302      	movs	r3, #2
 8001c72:	408b      	lsls	r3, r1
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	4907      	ldr	r1, [pc, #28]	@ (8001c98 <LL_TIM_OC_SetPolarity+0x9c>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	408b      	lsls	r3, r1
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	621a      	str	r2, [r3, #32]
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	080025d0 	.word	0x080025d0

08001c9c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8001cca:	f023 0307 	bic.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f06f 0201 	mvn.w	r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	615a      	str	r2, [r3, #20]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_GPIO_SetPinMode>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b08b      	sub	sp, #44	@ 0x2c
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	613b      	str	r3, [r7, #16]
  return result;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e003      	b.n	8001d50 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2103      	movs	r1, #3
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	61fb      	str	r3, [r7, #28]
  return result;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	431a      	orrs	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	372c      	adds	r7, #44	@ 0x2c
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_GPIO_SetPinSpeed>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	@ 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	613b      	str	r3, [r7, #16]
  return result;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2103      	movs	r1, #3
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	61fb      	str	r3, [r7, #28]
  return result;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e003      	b.n	8001df8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	431a      	orrs	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
}
 8001e06:	bf00      	nop
 8001e08:	372c      	adds	r7, #44	@ 0x2c
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_GPIO_SetPinPull>:
{
 8001e12:	b480      	push	{r7}
 8001e14:	b08b      	sub	sp, #44	@ 0x2c
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	613b      	str	r3, [r7, #16]
  return result;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2103      	movs	r1, #3
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	372c      	adds	r7, #44	@ 0x2c
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_GPIO_SetAFPin_0_7>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b08b      	sub	sp, #44	@ 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	613b      	str	r3, [r7, #16]
  return result;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e003      	b.n	8001eec <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	621a      	str	r2, [r3, #32]
}
 8001efa:	bf00      	nop
 8001efc:	372c      	adds	r7, #44	@ 0x2c
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <MX_TIM2_Init>:
  uint32_t pwm_duty;
/* USER CODE END 0 */

/* TIM2 init function */
  void MX_TIM2_Init(void)
  {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    /* Peripheral clock enable */
    LL_APB2_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fdb1 	bl	8001a74 <LL_APB2_GRP1_EnableClock>

    LL_APB1_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fd96 	bl	8001a44 <LL_APB1_GRP1_EnableClock>
  LL_GPIO_SetPinPull(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_PULL_NO);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f20:	f7ff ff77 	bl	8001e12 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2101      	movs	r1, #1
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2c:	f7ff ff34 	bl	8001d98 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_0_7(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_AF_1);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2101      	movs	r1, #1
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f38:	f7ff ffa8 	bl	8001e8c <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_MODE_ALTERNATE);
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2101      	movs	r1, #1
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f44:	f7ff feeb 	bl	8001d1e <LL_GPIO_SetPinMode>

    LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f4e:	f7ff feb3 	bl	8001cb8 <LL_TIM_SetClockSource>
    LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);
 8001f52:	2100      	movs	r1, #0
 8001f54:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f58:	f7ff fdb4 	bl	8001ac4 <LL_TIM_SetCounterMode>
    LL_TIM_SetPrescaler(TIM2, 4000-1);
 8001f5c:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8001f60:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f64:	f7ff fdc1 	bl	8001aea <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(TIM2, RANGE-1);
 8001f68:	21f9      	movs	r1, #249	@ 0xf9
 8001f6a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f6e:	f7ff fdca 	bl	8001b06 <LL_TIM_SetAutoReload>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 8001f72:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f76:	f7ff fec2 	bl	8001cfe <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_ClearFlag_UPDATE(TIM2);
 8001f7a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f7e:	f7ff feb0 	bl	8001ce2 <LL_TIM_ClearFlag_UPDATE>

    pwm_duty = 0;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <MX_TIM2_Init+0xbc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    LL_TIM_OC_SetCompareCH1(TIM2, pwm_duty);
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_TIM2_Init+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f92:	f7ff fe83 	bl	8001c9c <LL_TIM_OC_SetCompareCH1>

    LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8001f96:	2260      	movs	r2, #96	@ 0x60
 8001f98:	2101      	movs	r1, #1
 8001f9a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001f9e:	f7ff fdd1 	bl	8001b44 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001faa:	f7ff fe27 	bl	8001bfc <LL_TIM_OC_SetPolarity>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001fb4:	f7ff fdb5 	bl	8001b22 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);
 8001fb8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001fbc:	f7ff fd72 	bl	8001aa4 <LL_TIM_EnableCounter>

  }
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000054 	.word	0x20000054

08001fc8 <MX_TIM3_Init>:

/* USER CODE BEGIN 1 */

void MX_TIM3_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	 LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM2_Init 0 */

  /* Peripheral clock enable */
	 LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f7ff fd30 	bl	8001a44 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff fd15 	bl	8001a14 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001fea:	2340      	movs	r3, #64	@ 0x40
 8001fec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	463b      	mov	r3, r7
 8002004:	4619      	mov	r1, r3
 8002006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800200a:	f000 f9cf 	bl	80023ac <LL_GPIO_Init>

  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800200e:	2100      	movs	r1, #0
 8002010:	4819      	ldr	r0, [pc, #100]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002012:	f7ff fe51 	bl	8001cb8 <LL_TIM_SetClockSource>
  LL_TIM_SetCounterMode(TIM3, LL_TIM_COUNTERMODE_UP);
 8002016:	2100      	movs	r1, #0
 8002018:	4817      	ldr	r0, [pc, #92]	@ (8002078 <MX_TIM3_Init+0xb0>)
 800201a:	f7ff fd53 	bl	8001ac4 <LL_TIM_SetCounterMode>
  LL_TIM_SetPrescaler(TIM3, 4000-1);
 800201e:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8002022:	4815      	ldr	r0, [pc, #84]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002024:	f7ff fd61 	bl	8001aea <LL_TIM_SetPrescaler>
  LL_TIM_SetAutoReload(TIM3, RANGE-1);
 8002028:	21f9      	movs	r1, #249	@ 0xf9
 800202a:	4813      	ldr	r0, [pc, #76]	@ (8002078 <MX_TIM3_Init+0xb0>)
 800202c:	f7ff fd6b 	bl	8001b06 <LL_TIM_SetAutoReload>
  LL_TIM_GenerateEvent_UPDATE(TIM3);
 8002030:	4811      	ldr	r0, [pc, #68]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002032:	f7ff fe64 	bl	8001cfe <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8002036:	4810      	ldr	r0, [pc, #64]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002038:	f7ff fe53 	bl	8001ce2 <LL_TIM_ClearFlag_UPDATE>

  pwm_duty = 0;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_TIM3_Init+0xb4>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1(TIM3, pwm_duty);
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_TIM3_Init+0xb4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	480b      	ldr	r0, [pc, #44]	@ (8002078 <MX_TIM3_Init+0xb0>)
 800204a:	f7ff fe27 	bl	8001c9c <LL_TIM_OC_SetCompareCH1>

  LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800204e:	2260      	movs	r2, #96	@ 0x60
 8002050:	2101      	movs	r1, #1
 8002052:	4809      	ldr	r0, [pc, #36]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002054:	f7ff fd76 	bl	8001b44 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8002058:	2200      	movs	r2, #0
 800205a:	2101      	movs	r1, #1
 800205c:	4806      	ldr	r0, [pc, #24]	@ (8002078 <MX_TIM3_Init+0xb0>)
 800205e:	f7ff fdcd 	bl	8001bfc <LL_TIM_OC_SetPolarity>

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002062:	2101      	movs	r1, #1
 8002064:	4804      	ldr	r0, [pc, #16]	@ (8002078 <MX_TIM3_Init+0xb0>)
 8002066:	f7ff fd5c 	bl	8001b22 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800206a:	4803      	ldr	r0, [pc, #12]	@ (8002078 <MX_TIM3_Init+0xb0>)
 800206c:	f7ff fd1a 	bl	8001aa4 <LL_TIM_EnableCounter>

}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40000400 	.word	0x40000400
 800207c:	20000054 	.word	0x20000054

08002080 <PWM_GPIO_init>:
void PWM_GPIO_init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	463b      	mov	r3, r7
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]


	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff fcbc 	bl	8001a14 <LL_AHB2_GRP1_EnableClock>

	  GPIO_InitStruct.Pin = PWM_LOGIC2_Pin|PWM_LOGIC1_Pin;
 800209c:	2322      	movs	r3, #34	@ 0x22
 800209e:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020a0:	2301      	movs	r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(PWM_LOGIC2_Port, &GPIO_InitStruct);
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b8:	f000 f978 	bl	80023ac <LL_GPIO_Init>

}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c8:	f7ff fc92 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f000 fa29 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f6:	f7fe fa6d 	bl	80005d4 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002108:	080025e4 	.word	0x080025e4
  ldr r2, =_sbss
 800210c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002110:	20000058 	.word	0x20000058

08002114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_2_IRQHandler>

08002116 <LL_GPIO_SetPinMode>:
{
 8002116:	b480      	push	{r7}
 8002118:	b08b      	sub	sp, #44	@ 0x2c
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	613b      	str	r3, [r7, #16]
  return result;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e003      	b.n	8002148 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2103      	movs	r1, #3
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	401a      	ands	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	61fb      	str	r3, [r7, #28]
  return result;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	431a      	orrs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	bf00      	nop
 8002186:	372c      	adds	r7, #44	@ 0x2c
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_GPIO_SetPinOutputType>:
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_GPIO_SetPinSpeed>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08b      	sub	sp, #44	@ 0x2c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	613b      	str	r3, [r7, #16]
  return result;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e003      	b.n	80021f2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2103      	movs	r1, #3
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	401a      	ands	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	61fb      	str	r3, [r7, #28]
  return result;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	609a      	str	r2, [r3, #8]
}
 800222e:	bf00      	nop
 8002230:	372c      	adds	r7, #44	@ 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_GPIO_SetPinPull>:
{
 800223a:	b480      	push	{r7}
 800223c:	b08b      	sub	sp, #44	@ 0x2c
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	613b      	str	r3, [r7, #16]
  return result;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e003      	b.n	800226c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2103      	movs	r1, #3
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	61fb      	str	r3, [r7, #28]
  return result;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e003      	b.n	800229a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	431a      	orrs	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	372c      	adds	r7, #44	@ 0x2c
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_GPIO_SetAFPin_0_7>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b08b      	sub	sp, #44	@ 0x2c
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	613b      	str	r3, [r7, #16]
  return result;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e003      	b.n	80022e6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	210f      	movs	r1, #15
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	401a      	ands	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	61fb      	str	r3, [r7, #28]
  return result;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	372c      	adds	r7, #44	@ 0x2c
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_GPIO_SetAFPin_8_15>:
{
 800232e:	b480      	push	{r7}
 8002330:	b08b      	sub	sp, #44	@ 0x2c
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	613b      	str	r3, [r7, #16]
  return result;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	210f      	movs	r1, #15
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	401a      	ands	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	61fb      	str	r3, [r7, #28]
  return result;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e003      	b.n	8002392 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80023a0:	bf00      	nop
 80023a2:	372c      	adds	r7, #44	@ 0x2c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	60fb      	str	r3, [r7, #12]
  return result;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <LL_GPIO_Init+0x26>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80023dc:	e048      	b.n	8002470 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03a      	beq.n	800246a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d003      	beq.n	8002404 <LL_GPIO_Init+0x58>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d10e      	bne.n	8002422 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	461a      	mov	r2, r3
 800240a:	69b9      	ldr	r1, [r7, #24]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff fed7 	bl	80021c0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff feb7 	bl	8002190 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	461a      	mov	r2, r3
 8002428:	69b9      	ldr	r1, [r7, #24]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff05 	bl	800223a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d111      	bne.n	800245c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	@ 0xff
 800243c:	d807      	bhi.n	800244e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	461a      	mov	r2, r3
 8002444:	69b9      	ldr	r1, [r7, #24]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff34 	bl	80022b4 <LL_GPIO_SetAFPin_0_7>
 800244c:	e006      	b.n	800245c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	461a      	mov	r2, r3
 8002454:	69b9      	ldr	r1, [r7, #24]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff69 	bl	800232e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	461a      	mov	r2, r3
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fe56 	bl	8002116 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1af      	bne.n	80023de <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <LL_InitTick+0x30>)
 800249c:	3b01      	subs	r3, #1
 800249e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <LL_InitTick+0x30>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <LL_InitTick+0x30>)
 80024a8:	2205      	movs	r2, #5
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e010 	.word	0xe000e010

080024bc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80024c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffdd 	bl	8002488 <LL_InitTick>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <LL_mDelay+0x4c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80024ea:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d00c      	beq.n	800250e <LL_mDelay+0x36>
  {
    tmpDelay++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80024fa:	e008      	b.n	800250e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <LL_mDelay+0x4c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3b01      	subs	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f3      	bne.n	80024fc <LL_mDelay+0x24>
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002530:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <LL_SetSystemCoreClock+0x1c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	2000000c 	.word	0x2000000c

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	4d0d      	ldr	r5, [pc, #52]	@ (8002580 <__libc_init_array+0x38>)
 800254c:	4c0d      	ldr	r4, [pc, #52]	@ (8002584 <__libc_init_array+0x3c>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	2600      	movs	r6, #0
 8002554:	42a6      	cmp	r6, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	4d0b      	ldr	r5, [pc, #44]	@ (8002588 <__libc_init_array+0x40>)
 800255a:	4c0c      	ldr	r4, [pc, #48]	@ (800258c <__libc_init_array+0x44>)
 800255c:	f000 f818 	bl	8002590 <_init>
 8002560:	1b64      	subs	r4, r4, r5
 8002562:	10a4      	asrs	r4, r4, #2
 8002564:	2600      	movs	r6, #0
 8002566:	42a6      	cmp	r6, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002570:	4798      	blx	r3
 8002572:	3601      	adds	r6, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	f855 3b04 	ldr.w	r3, [r5], #4
 800257a:	4798      	blx	r3
 800257c:	3601      	adds	r6, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	080025dc 	.word	0x080025dc
 8002584:	080025dc 	.word	0x080025dc
 8002588:	080025dc 	.word	0x080025dc
 800258c:	080025e0 	.word	0x080025e0

08002590 <_init>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr

0800259c <_fini>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr
