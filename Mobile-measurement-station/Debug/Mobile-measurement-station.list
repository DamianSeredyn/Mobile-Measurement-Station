
Mobile-measurement-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a5c  08002a5c  00003a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08002a88  08002a88  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a88  08002a88  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00003a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08002a90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000008  08002a98  00004008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002a98  00004040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a11  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001427  00000000  00000000  0000aa49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cf  00000000  00000000  0000c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9d2  00000000  00000000  0000cc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006267  00000000  00000000  0002c5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5352  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7bb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f9c  00000000  00000000  000e7bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e9b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a44 	.word	0x08002a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002a44 	.word	0x08002a44

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffe3 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <__NVIC_SetPriorityGrouping+0x44>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021e:	68ba      	ldr	r2, [r7, #8]
 8000220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000224:	4013      	ands	r3, r2
 8000226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800023a:	4a04      	ldr	r2, [pc, #16]	@ (800024c <__NVIC_SetPriorityGrouping+0x44>)
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	60d3      	str	r3, [r2, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__NVIC_GetPriorityGrouping+0x18>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	0a1b      	lsrs	r3, r3, #8
 800025a:	f003 0307 	and.w	r3, r3, #7
}
 800025e:	4618      	mov	r0, r3
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	db0a      	blt.n	8000296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	b2da      	uxtb	r2, r3
 8000284:	490c      	ldr	r1, [pc, #48]	@ (80002b8 <__NVIC_SetPriority+0x4c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	0112      	lsls	r2, r2, #4
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	440b      	add	r3, r1
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000294:	e00a      	b.n	80002ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4908      	ldr	r1, [pc, #32]	@ (80002bc <__NVIC_SetPriority+0x50>)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f003 030f 	and.w	r3, r3, #15
 80002a2:	3b04      	subs	r3, #4
 80002a4:	0112      	lsls	r2, r2, #4
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	440b      	add	r3, r1
 80002aa:	761a      	strb	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f003 0307 	and.w	r3, r3, #7
 80002d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	f1c3 0307 	rsb	r3, r3, #7
 80002da:	2b04      	cmp	r3, #4
 80002dc:	bf28      	it	cs
 80002de:	2304      	movcs	r3, #4
 80002e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	3304      	adds	r3, #4
 80002e6:	2b06      	cmp	r3, #6
 80002e8:	d902      	bls.n	80002f0 <NVIC_EncodePriority+0x30>
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3b03      	subs	r3, #3
 80002ee:	e000      	b.n	80002f2 <NVIC_EncodePriority+0x32>
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	f04f 32ff 	mov.w	r2, #4294967295
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	43da      	mvns	r2, r3
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	401a      	ands	r2, r3
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000308:	f04f 31ff 	mov.w	r1, #4294967295
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
 8000312:	43d9      	mvns	r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	4313      	orrs	r3, r2
         );
}
 800031a:	4618      	mov	r0, r3
 800031c:	3724      	adds	r7, #36	@ 0x24
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3b01      	subs	r3, #1
 8000334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000338:	d301      	bcc.n	800033e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033a:	2301      	movs	r3, #1
 800033c:	e00f      	b.n	800035e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033e:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <SysTick_Config+0x40>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3b01      	subs	r3, #1
 8000344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000346:	210f      	movs	r1, #15
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f7ff ff8e 	bl	800026c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <SysTick_Config+0x40>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000356:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <SysTick_Config+0x40>)
 8000358:	2207      	movs	r2, #7
 800035a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010

0800036c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <LL_RCC_MSI_Enable+0x1c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <LL_RCC_MSI_Enable+0x1c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <LL_RCC_MSI_IsReady+0x20>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	2b02      	cmp	r3, #2
 800039a:	d101      	bne.n	80003a0 <LL_RCC_MSI_IsReady+0x14>
 800039c:	2301      	movs	r3, #1
 800039e:	e000      	b.n	80003a2 <LL_RCC_MSI_IsReady+0x16>
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <LL_RCC_MSI_SetRange+0x24>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003e0:	4904      	ldr	r1, [pc, #16]	@ (80003f4 <LL_RCC_MSI_SetRange+0x24>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	600b      	str	r3, [r1, #0]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000

080003f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000400:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	021b      	lsls	r3, r3, #8
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800040e:	4313      	orrs	r3, r2
 8000410:	604b      	str	r3, [r1, #4]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <LL_RCC_SetSysClkSource+0x24>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	f023 0203 	bic.w	r2, r3, #3
 8000434:	4904      	ldr	r1, [pc, #16]	@ (8000448 <LL_RCC_SetSysClkSource+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	608b      	str	r3, [r1, #8]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000450:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <LL_RCC_GetSysClkSource+0x18>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 030c 	and.w	r3, r3, #12
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000478:	4904      	ldr	r1, [pc, #16]	@ (800048c <LL_RCC_SetAHBPrescaler+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000

08000490 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80004a0:	4904      	ldr	r1, [pc, #16]	@ (80004b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	608b      	str	r3, [r1, #8]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80004c8:	4904      	ldr	r1, [pc, #16]	@ (80004dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	608b      	str	r3, [r1, #8]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004ec:	4907      	ldr	r1, [pc, #28]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000

08000510 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800051c:	4907      	ldr	r1, [pc, #28]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000526:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f023 0207 	bic.w	r2, r3, #7
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	600b      	str	r3, [r1, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40022000 	.word	0x40022000

08000568 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <LL_FLASH_GetLatency+0x18>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0307 	and.w	r3, r3, #7
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	600b      	str	r3, [r1, #0]
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40007000 	.word	0x40007000

080005ac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005bc:	d101      	bne.n	80005c2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40007000 	.word	0x40007000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005da:	2001      	movs	r0, #1
 80005dc:	f7ff ff98 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005e0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80005e4:	f7ff ff7c 	bl	80004e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f7ff fe0d 	bl	8000208 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80005ee:	f7ff fe2f 	bl	8000250 <__NVIC_GetPriorityGrouping>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2200      	movs	r2, #0
 80005f6:	210f      	movs	r1, #15
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fe61 	bl	80002c0 <NVIC_EncodePriority>
 80005fe:	4603      	mov	r3, r0
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
 8000606:	f7ff fe31 	bl	800026c <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f83f 	bl	800068c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(4000);
 800060e:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000612:	f7ff fe89 	bl	8000328 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f7ff fdef 	bl	80001f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800061a:	f001 fecf 	bl	80023bc <MX_TIM2_Init>
  MX_SPI2_Init();
 800061e:	f001 f9e5 	bl	80019ec <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  MX_TIM3_Init();
 8000622:	f001 ff2b 	bl	800247c <MX_TIM3_Init>
  PWM_GPIO_init();
 8000626:	f001 ff85 	bl	8002534 <PWM_GPIO_init>
  init_ControlerButtons();
 800062a:	f000 ff5f 	bl	80014ec <init_ControlerButtons>

  nRF24_InitGPIO();
 800062e:	f000 fbc7 	bl	8000dc0 <nRF24_InitGPIO>
  nRF24_Init(nRF24_TRANSMITER);
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fbe8 	bl	8000e08 <nRF24_Init>
  nRF24_SetRXAddress(0, (uint8_t *)"Nad",nRF24_TRANSMITER);
 8000638:	2200      	movs	r2, #0
 800063a:	4912      	ldr	r1, [pc, #72]	@ (8000684 <main+0xb0>)
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fde9 	bl	8001214 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t *)"Odb",nRF24_TRANSMITER);
 8000642:	2100      	movs	r1, #0
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <main+0xb4>)
 8000646:	f000 fc79 	bl	8000f3c <nRF24_SetTXAddress>
  nRF24_TX_Mode(nRF24_TRANSMITER);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 fcbe 	bl	8000fcc <nRF24_TX_Mode>
  LL_mDelay(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f002 f99b 	bl	800298c <LL_mDelay>
  nRF24_Init(nRF24_RECEIVER);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fbd6 	bl	8000e08 <nRF24_Init>
  nRF24_SetRXAddress(0, (uint8_t *)"Odb",nRF24_RECEIVER);
 800065c:	2201      	movs	r2, #1
 800065e:	490a      	ldr	r1, [pc, #40]	@ (8000688 <main+0xb4>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fdd7 	bl	8001214 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t *)"Nad",nRF24_RECEIVER);
 8000666:	2101      	movs	r1, #1
 8000668:	4806      	ldr	r0, [pc, #24]	@ (8000684 <main+0xb0>)
 800066a:	f000 fc67 	bl	8000f3c <nRF24_SetTXAddress>
  nRF24_RX_Mode(nRF24_RECEIVER);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fd8a 	bl	8001188 <nRF24_RX_Mode>

  uint8_t test = robotComandsSend_test(0);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 ff73 	bl	8001560 <robotComandsSend_test>
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	bf00      	nop
 8000680:	e7fd      	b.n	800067e <main+0xaa>
 8000682:	bf00      	nop
 8000684:	08002a5c 	.word	0x08002a5c
 8000688:	08002a60 	.word	0x08002a60

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff55 	bl	8000540 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000696:	bf00      	nop
 8000698:	f7ff ff66 	bl	8000568 <LL_FLASH_GetLatency>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1fa      	bne.n	8000698 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f7ff ff6d 	bl	8000584 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80006aa:	bf00      	nop
 80006ac:	f7ff ff7e 	bl	80005ac <LL_PWR_IsActiveFlag_VOS>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1fa      	bne.n	80006ac <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 80006b6:	f7ff fe59 	bl	800036c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80006ba:	bf00      	nop
 80006bc:	f7ff fe66 	bl	800038c <LL_RCC_MSI_IsReady>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1fa      	bne.n	80006bc <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 80006c6:	f7ff fe73 	bl	80003b0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80006ca:	2060      	movs	r0, #96	@ 0x60
 80006cc:	f7ff fe80 	bl	80003d0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fe91 	bl	80003f8 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff fea4 	bl	8000424 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80006dc:	bf00      	nop
 80006de:	f7ff feb5 	bl	800044c <LL_RCC_GetSysClkSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1fa      	bne.n	80006de <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff febd 	bl	8000468 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fece 	bl	8000490 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fedf 	bl	80004b8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <SystemClock_Config+0x80>)
 80006fc:	f002 f938 	bl	8002970 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000700:	4802      	ldr	r0, [pc, #8]	@ (800070c <SystemClock_Config+0x80>)
 8000702:	f002 f96b 	bl	80029dc <LL_SetSystemCoreClock>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	003d0900 	.word	0x003d0900

08000710 <SysTick_Handler>:
	        // Just wait
	    }
}

void SysTick_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	    Tick++; // Increase system timer
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <SysTick_Handler+0x18>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a03      	ldr	r2, [pc, #12]	@ (8000728 <SysTick_Handler+0x18>)
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000024 	.word	0x20000024

0800072c <LL_AHB2_GRP1_EnableClock>:
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000738:	4907      	ldr	r1, [pc, #28]	@ (8000758 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000

0800075c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	619a      	str	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <nRF24_Delay>:

static uint8_t addr_p0_backup[NRF24_ADDR_SIZE];
static uint8_t nrf24_rx_flag;

void nRF24_Delay(uint8_t time)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(time);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 f8f3 	bl	800298c <LL_mDelay>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <nRF24_ReadRegister>:
static uint8_t nRF24_ReadRegister(uint8_t reg,uint8_t device)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	460a      	mov	r2, r1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71bb      	strb	r3, [r7, #6]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	71fb      	strb	r3, [r7, #7]

	if(device == 0)
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <nRF24_ReadRegister+0x20>
		spi_cs_set_low();
 80007c8:	f001 fa76 	bl	8001cb8 <spi_cs_set_low>
 80007cc:	e004      	b.n	80007d8 <nRF24_ReadRegister+0x2a>
	else if(device == 1)
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d101      	bne.n	80007d8 <nRF24_ReadRegister+0x2a>
		spi_cs2_set_low();
 80007d4:	f001 fa88 	bl	8001ce8 <spi_cs2_set_low>

	spi_write_data(&reg, 1);
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	2101      	movs	r1, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fa8f 	bl	8001d00 <spi_write_data>
	spi_read_data(&result, 1);
 80007e2:	f107 030f 	add.w	r3, r7, #15
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fad5 	bl	8001d98 <spi_read_data>
	if(device == 0)
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <nRF24_ReadRegister+0x4c>
		spi_cs_set_high();
 80007f4:	f001 fa54 	bl	8001ca0 <spi_cs_set_high>
 80007f8:	e004      	b.n	8000804 <nRF24_ReadRegister+0x56>
	else if(device == 1)
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d101      	bne.n	8000804 <nRF24_ReadRegister+0x56>
		spi_cs2_set_high();
 8000800:	f001 fa66 	bl	8001cd0 <spi_cs2_set_high>

	return result;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len,uint8_t device)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	460b      	mov	r3, r1
 8000820:	71bb      	strb	r3, [r7, #6]
 8000822:	4613      	mov	r3, r2
 8000824:	717b      	strb	r3, [r7, #5]

	if(device == 0)
 8000826:	797b      	ldrb	r3, [r7, #5]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <nRF24_ReadRegisters+0x24>
		spi_cs_set_low();
 800082c:	f001 fa44 	bl	8001cb8 <spi_cs_set_low>
 8000830:	e004      	b.n	800083c <nRF24_ReadRegisters+0x2e>
	else if(device == 1)
 8000832:	797b      	ldrb	r3, [r7, #5]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d101      	bne.n	800083c <nRF24_ReadRegisters+0x2e>
		spi_cs2_set_low();
 8000838:	f001 fa56 	bl	8001ce8 <spi_cs2_set_low>
	reg = NRF24_CMD_R_REGISTER | reg;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	71fb      	strb	r3, [r7, #7]
	spi_write_data(&reg, 1);
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	2101      	movs	r1, #1
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fa5b 	bl	8001d00 <spi_write_data>
	spi_read_data(ret, len);
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4619      	mov	r1, r3
 800084e:	6838      	ldr	r0, [r7, #0]
 8000850:	f001 faa2 	bl	8001d98 <spi_read_data>
	if(device == 0)
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <nRF24_ReadRegisters+0x52>
		spi_cs_set_high();
 800085a:	f001 fa21 	bl	8001ca0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 800085e:	e004      	b.n	800086a <nRF24_ReadRegisters+0x5c>
	else if(device == 1)
 8000860:	797b      	ldrb	r3, [r7, #5]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d101      	bne.n	800086a <nRF24_ReadRegisters+0x5c>
		spi_cs2_set_high();
 8000866:	f001 fa33 	bl	8001cd0 <spi_cs2_set_high>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val,uint8_t device)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	460b      	mov	r3, r1
 800087e:	71bb      	strb	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]

	if(device == 0)
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <nRF24_WriteRegister+0x1e>
		spi_cs_set_low();
 800088a:	f001 fa15 	bl	8001cb8 <spi_cs_set_low>
 800088e:	e004      	b.n	800089a <nRF24_WriteRegister+0x28>
	else if(device == 1)
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d101      	bne.n	800089a <nRF24_WriteRegister+0x28>
		spi_cs2_set_low();
 8000896:	f001 fa27 	bl	8001ce8 <spi_cs2_set_low>
	uint8_t tmp[2];
	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	737b      	strb	r3, [r7, #13]
	spi_write_data(tmp, 2);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2102      	movs	r1, #2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fa26 	bl	8001d00 <spi_write_data>
	if(device == 0)
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <nRF24_WriteRegister+0x4e>
		spi_cs_set_high();
 80008ba:	f001 f9f1 	bl	8001ca0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 80008be:	e004      	b.n	80008ca <nRF24_WriteRegister+0x58>
	else if(device == 1)
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d101      	bne.n	80008ca <nRF24_WriteRegister+0x58>
		spi_cs2_set_high();
 80008c6:	f001 fa03 	bl	8001cd0 <spi_cs2_set_high>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len,uint8_t device)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	460b      	mov	r3, r1
 80008e4:	71bb      	strb	r3, [r7, #6]
 80008e6:	4613      	mov	r3, r2
 80008e8:	717b      	strb	r3, [r7, #5]

	reg = NRF24_CMD_W_REGISTER | reg;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	71fb      	strb	r3, [r7, #7]

	if(device == 0)
 80008f4:	797b      	ldrb	r3, [r7, #5]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <nRF24_WriteRegisters+0x2e>
		spi_cs_set_low();
 80008fa:	f001 f9dd 	bl	8001cb8 <spi_cs_set_low>
 80008fe:	e004      	b.n	800090a <nRF24_WriteRegisters+0x38>
	else if(device == 1)
 8000900:	797b      	ldrb	r3, [r7, #5]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <nRF24_WriteRegisters+0x38>
		spi_cs2_set_low();
 8000906:	f001 f9ef 	bl	8001ce8 <spi_cs2_set_low>
	spi_write_data(&reg, 1);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f9f6 	bl	8001d00 <spi_write_data>
	spi_write_data(val, len);
 8000914:	79bb      	ldrb	r3, [r7, #6]
 8000916:	4619      	mov	r1, r3
 8000918:	6838      	ldr	r0, [r7, #0]
 800091a:	f001 f9f1 	bl	8001d00 <spi_write_data>
	if(device == 0)
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <nRF24_WriteRegisters+0x58>
		spi_cs_set_high();
 8000924:	f001 f9bc 	bl	8001ca0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();

}
 8000928:	e004      	b.n	8000934 <nRF24_WriteRegisters+0x62>
	else if(device == 1)
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d101      	bne.n	8000934 <nRF24_WriteRegisters+0x62>
		spi_cs2_set_high();
 8000930:	f001 f9ce 	bl	8001cd0 <spi_cs2_set_high>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev,uint8_t device)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP,device);
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	4619      	mov	r1, r3
 8000950:	2006      	movs	r0, #6
 8000952:	f7ff ff2c 	bl	80007ae <nRF24_ReadRegister>
 8000956:	4603      	mov	r3, r0
 8000958:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f023 0307 	bic.w	r3, r3, #7
 8000960:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	b25a      	sxtb	r2, r3
 8000968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096c:	4313      	orrs	r3, r2
 800096e:	b25b      	sxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup,device);
 8000972:	79ba      	ldrb	r2, [r7, #6]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4619      	mov	r1, r3
 8000978:	2006      	movs	r0, #6
 800097a:	f7ff ff7a 	bl	8000872 <nRF24_WriteRegister>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr,uint8_t device)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b084      	sub	sp, #16
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	4613      	mov	r3, r2
 8000994:	71bb      	strb	r3, [r7, #6]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP,device);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	2006      	movs	r0, #6
 800099c:	f7ff ff07 	bl	80007ae <nRF24_ReadRegister>
 80009a0:	4603      	mov	r3, r0
 80009a2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80009aa:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d104      	bne.n	80009bc <nRF24_SetDataRate+0x36>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e006      	b.n	80009ca <nRF24_SetDataRate+0x44>
	else if(dr == NRF24_RF_DR_2MBPS)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d103      	bne.n	80009ca <nRF24_SetDataRate+0x44>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup,device);
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	4619      	mov	r1, r3
 80009d0:	2006      	movs	r0, #6
 80009d2:	f7ff ff4e 	bl	8000872 <nRF24_WriteRegister>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff,uint8_t device)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f9c4 	bl	8000d7e <nRF24_ReadConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <nRF24_EnableCRC+0x2c>
		config |= (1<<NRF24_EN_CRC);
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e003      	b.n	8000a12 <nRF24_EnableCRC+0x34>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	f023 0308 	bic.w	r3, r3, #8
 8000a10:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f9bf 	bl	8000d9c <nRF24_WriteConfig>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <nRF24_SetCRCLength>:
void nRF24_SetCRCLength(uint8_t crcl,uint8_t device)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	460a      	mov	r2, r1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f9a0 	bl	8000d7e <nRF24_ReadConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d104      	bne.n	8000a52 <nRF24_SetCRCLength+0x2c>
		config |= (1<<NRF24_CRCO);
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e003      	b.n	8000a5a <nRF24_SetCRCLength+0x34>
	else
		config &= ~(1<<NRF24_CRCO);
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f99b 	bl	8000d9c <nRF24_WriteConfig>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <nRF24_SetRetries>:
void nRF24_SetRetries(uint8_t ard, uint8_t arc,uint8_t device)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	71bb      	strb	r3, [r7, #6]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	717b      	strb	r3, [r7, #5]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)),device);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	797a      	ldrb	r2, [r7, #5]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2004      	movs	r0, #4
 8000a9c:	f7ff fee9 	bl	8000872 <nRF24_WriteRegister>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size,uint8_t device)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d901      	bls.n	8000ac4 <nRF24_SetPayloadSize+0x1c>
		pipe = 5; // Block too high pipe number
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F),device);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	3311      	adds	r3, #17
 8000ac8:	b2d8      	uxtb	r0, r3
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	797a      	ldrb	r2, [r7, #5]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f7ff fecc 	bl	8000872 <nRF24_WriteRegister>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <nRF24_SetRFChannel>:
void nRF24_SetRFChannel(uint8_t channel,uint8_t device)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460a      	mov	r2, r1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	4613      	mov	r3, r2
 8000af0:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F),device);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2005      	movs	r0, #5
 8000b00:	f7ff feb7 	bl	8000872 <nRF24_WriteRegister>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <nRF24_EnablePipe>:
void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff,uint8_t device)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	460b      	mov	r3, r1
 8000b18:	71bb      	strb	r3, [r7, #6]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d901      	bls.n	8000b28 <nRF24_EnablePipe+0x1c>
		pipe = 5; // Block too high pipe number
 8000b24:	2305      	movs	r3, #5
 8000b26:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR,device);
 8000b28:	797b      	ldrb	r3, [r7, #5]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fe3e 	bl	80007ae <nRF24_ReadRegister>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d10a      	bne.n	8000b52 <nRF24_EnablePipe+0x46>
		enable_pipe |= (1<<pipe);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	b25a      	sxtb	r2, r3
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e00b      	b.n	8000b6a <nRF24_EnablePipe+0x5e>
	else
		enable_pipe &= ~(1<<pipe);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2201      	movs	r2, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b64:	4013      	ands	r3, r2
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe,device);
 8000b6a:	797a      	ldrb	r2, [r7, #5]
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fe7e 	bl	8000872 <nRF24_WriteRegister>
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <nRF24_AutoACK>:
void nRF24_AutoACK(uint8_t pipe, uint8_t onoff,uint8_t device)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	71bb      	strb	r3, [r7, #6]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	717b      	strb	r3, [r7, #5]
	if(pipe > 5)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d901      	bls.n	8000b9a <nRF24_AutoACK+0x1c>
		pipe = 5; // Block too high pipe number
 8000b96:	2305      	movs	r3, #5
 8000b98:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA,device);
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f7ff fe05 	bl	80007ae <nRF24_ReadRegister>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10a      	bne.n	8000bc4 <nRF24_AutoACK+0x46>
		enaa |= (1<<pipe);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e00b      	b.n	8000bdc <nRF24_AutoACK+0x5e>
	else
		enaa &= ~(1<<pipe);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa,device);
 8000bdc:	797a      	ldrb	r2, [r7, #5]
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4619      	mov	r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fe45 	bl	8000872 <nRF24_WriteRegister>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size,uint8_t device)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	if(size > 5)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d901      	bls.n	8000c0a <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8000c06:	2305      	movs	r3, #5
 8000c08:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d801      	bhi.n	8000c14 <nRF24_SetAddressWidth+0x24>
		size = 3; // Minimum are 3 bytes
 8000c10:	2303      	movs	r3, #3
 8000c12:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03),device);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	3b02      	subs	r3, #2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2003      	movs	r0, #3
 8000c26:	f7ff fe24 	bl	8000872 <nRF24_WriteRegister>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <nRF24_EnableRXDataReadyIRQ>:
void nRF24_EnableRXDataReadyIRQ(uint8_t onoff,uint8_t device)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f89a 	bl	8000d7e <nRF24_ReadConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d104      	bne.n	8000c5e <nRF24_EnableRXDataReadyIRQ+0x2c>
		config |= (1<<NRF24_RX_DR);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e003      	b.n	8000c66 <nRF24_EnableRXDataReadyIRQ+0x34>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c64:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 8000c66:	79ba      	ldrb	r2, [r7, #6]
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f895 	bl	8000d9c <nRF24_WriteConfig>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff,uint8_t device)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	460a      	mov	r2, r1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	4613      	mov	r3, r2
 8000c88:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f876 	bl	8000d7e <nRF24_ReadConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <nRF24_EnableTXDataSentIRQ+0x2c>
		config |= (1<<NRF24_TX_DS);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e003      	b.n	8000cae <nRF24_EnableTXDataSentIRQ+0x34>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f023 0320 	bic.w	r3, r3, #32
 8000cac:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f871 	bl	8000d9c <nRF24_WriteConfig>
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff,uint8_t device)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	460a      	mov	r2, r1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nRF24_ReadConfig(device);
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f852 	bl	8000d7e <nRF24_ReadConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <nRF24_EnableMaxRetransmitIRQ+0x2c>
		config |= (1<<NRF24_MAX_RT);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e003      	b.n	8000cf6 <nRF24_EnableMaxRetransmitIRQ+0x34>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	f023 0310 	bic.w	r3, r3, #16
 8000cf4:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config,device);
 8000cf6:	79ba      	ldrb	r2, [r7, #6]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f84d 	bl	8000d9c <nRF24_WriteConfig>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <nRF24_ClearInterrupts>:
void nRF24_ClearInterrupts(uint8_t device)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nRF24_ReadStatus(device);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f810 	bl	8000d3c <nRF24_ReadStatus>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000d26:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteStatus(status,device);
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f813 	bl	8000d5a <nRF24_WriteStatus>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <nRF24_ReadStatus>:
uint8_t nRF24_ReadStatus(uint8_t device)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	return (nRF24_ReadRegister(NRF24_STATUS,device));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f7ff fd2f 	bl	80007ae <nRF24_ReadRegister>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <nRF24_WriteStatus>:
void nRF24_WriteStatus(uint8_t st,uint8_t device)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	460a      	mov	r2, r1
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	4613      	mov	r3, r2
 8000d68:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_STATUS, st,device);
 8000d6a:	79ba      	ldrb	r2, [r7, #6]
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2007      	movs	r0, #7
 8000d72:	f7ff fd7e 	bl	8000872 <nRF24_WriteRegister>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <nRF24_ReadConfig>:
uint8_t nRF24_ReadConfig(uint8_t device)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
	return (nRF24_ReadRegister(NRF24_CONFIG,device));
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fd0e 	bl	80007ae <nRF24_ReadRegister>
 8000d92:	4603      	mov	r3, r0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <nRF24_WriteConfig>:
void nRF24_WriteConfig(uint8_t conf,uint8_t device)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	nRF24_WriteRegister(NRF24_CONFIG, conf,device);
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fd5d 	bl	8000872 <nRF24_WriteRegister>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <nRF24_InitGPIO>:
    }
    return result;
}

void nRF24_InitGPIO()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fca8 	bl	800072c <LL_AHB2_GRP1_EnableClock>
	  /** Configuration
	  PB1   ------> CE
	  PB2   ------> CE2
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8000ddc:	2306      	movs	r3, #6
 8000dde:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de0:	2301      	movs	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <nRF24_InitGPIO+0x44>)
 8000df6:	f001 fd33 	bl	8002860 <LL_GPIO_Init>


}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	48000400 	.word	0x48000400

08000e08 <nRF24_Init>:

void nRF24_Init(uint8_t device)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	if(device == 1)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d104      	bne.n	8000e22 <nRF24_Init+0x1a>
		NRF24_CE_LOW;
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4839      	ldr	r0, [pc, #228]	@ (8000f00 <nRF24_Init+0xf8>)
 8000e1c:	f7ff fcac 	bl	8000778 <LL_GPIO_ResetOutputPin>
 8000e20:	e006      	b.n	8000e30 <nRF24_Init+0x28>
	else if(device == 0)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <nRF24_Init+0x28>
		NRF24_CE2_LOW;
 8000e28:	2104      	movs	r1, #4
 8000e2a:	4835      	ldr	r0, [pc, #212]	@ (8000f00 <nRF24_Init+0xf8>)
 8000e2c:	f7ff fca4 	bl	8000778 <LL_GPIO_ResetOutputPin>

	if(device == 0)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <nRF24_Init+0x34>
		spi_cs_set_high();
 8000e36:	f000 ff33 	bl	8001ca0 <spi_cs_set_high>
 8000e3a:	e004      	b.n	8000e46 <nRF24_Init+0x3e>
	else if(device == 1)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <nRF24_Init+0x3e>
		spi_cs2_set_high();
 8000e42:	f000 ff45 	bl	8001cd0 <spi_cs2_set_high>
	nRF24_Delay(5);// delay
 8000e46:	2005      	movs	r0, #5
 8000e48:	f7ff fca4 	bl	8000794 <nRF24_Delay>

	// config things
	nRF24_SetPALevel(NRF24_PA_PWR_0dBM,device); // Radio power
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2003      	movs	r0, #3
 8000e52:	f7ff fd73 	bl	800093c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS,device); // Data Rate
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff fd93 	bl	8000986 <nRF24_SetDataRate>
	nRF24_EnableCRC(1,device); // Enable CRC
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4619      	mov	r1, r3
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fdba 	bl	80009de <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B,device); // CRC Length 1 byte
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fdd9 	bl	8000a26 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07,device); // 1000us, 7 times Auto Retransmission (ART)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	461a      	mov	r2, r3
 8000e78:	2107      	movs	r1, #7
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f7ff fdf7 	bl	8000a6e <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE,device) | (1<<NRF24_EN_DPL),device); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F,device); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0,device); // Disable dynamic payloads for all pipes
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	461a      	mov	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f7ff fcf3 	bl	8000872 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE,device); // Set 32 bytes payload for pipe 0
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fe08 	bl	8000aa8 <nRF24_SetPayloadSize>
#endif

	nRF24_SetRFChannel(10,device); // Set RF channel for transmission (frequency)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f7ff fe20 	bl	8000ae2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1,device); // Enable pipe 0
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe2f 	bl	8000b0c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1,device); // Enable auto ACK for pipe 0
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fe62 	bl	8000b7e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE,device); // Set address size for correct system
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff fe96 	bl	8000bf0 <nRF24_SetAddressWidth>

	nRF24_Delay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fc65 	bl	8000794 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(1,device);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff feaf 	bl	8000c32 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0,device);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fece 	bl	8000c7a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0,device);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff feed 	bl	8000cc2 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fc53 	bl	8000794 <nRF24_Delay>

	nRF24_ClearInterrupts(device);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff0a 	bl	8000d0a <nRF24_ClearInterrupts>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000400 	.word	0x48000400

08000f04 <nRF24_SendPacket>:

//TX
nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size,uint8_t device)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
 8000f10:	4613      	mov	r3, r2
 8000f12:	70bb      	strb	r3, [r7, #2]
	if(Size > 32)
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b20      	cmp	r3, #32
 8000f18:	d901      	bls.n	8000f1e <nRF24_SendPacket+0x1a>
		return NRF24_NO_TRANSMITTED_PACKET;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00a      	b.n	8000f34 <nRF24_SendPacket+0x30>

	nRF24_WriteTXPayload(Data, Size,device);
 8000f1e:	78ba      	ldrb	r2, [r7, #2]
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f88f 	bl	8001048 <nRF24_WriteTXPayload>
	nRF24_WaitTX(device);
 8000f2a:	78bb      	ldrb	r3, [r7, #2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f89d 	bl	800106c <nRF24_WaitTX>

	return NRF24_TRANSMITTED_PACKET;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address,uint8_t device)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE,device); // Backup P0 address
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	2203      	movs	r2, #3
 8000f50:	200a      	movs	r0, #10
 8000f52:	f7ff fc5c 	bl	800080e <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e00c      	b.n	8000f76 <nRF24_SetTXAddress+0x3a>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f1c3 0302 	rsb	r3, r3, #2
 8000f64:	3210      	adds	r2, #16
 8000f66:	443a      	add	r2, r7
 8000f68:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8000f6c:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <nRF24_SetTXAddress+0x8c>)
 8000f6e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d9ef      	bls.n	8000f5c <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00d      	b.n	8000f9e <nRF24_SetTXAddress+0x62>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	441a      	add	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	f1c3 0302 	rsb	r3, r3, #2
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	3310      	adds	r3, #16
 8000f92:	443b      	add	r3, r7
 8000f94:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d9ee      	bls.n	8000f82 <nRF24_SetTXAddress+0x46>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE,device); // Pipe 0 must be same for auto ACk
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	f107 010c 	add.w	r1, r7, #12
 8000faa:	2203      	movs	r2, #3
 8000fac:	200a      	movs	r0, #10
 8000fae:	f7ff fc90 	bl	80008d2 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE,device);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f107 010c 	add.w	r1, r7, #12
 8000fb8:	2203      	movs	r2, #3
 8000fba:	2010      	movs	r0, #16
 8000fbc:	f7ff fc89 	bl	80008d2 <nRF24_WriteRegisters>

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000028 	.word	0x20000028

08000fcc <nRF24_TX_Mode>:

void nRF24_TX_Mode(uint8_t device)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	if(device == 1)
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <nRF24_TX_Mode+0x1a>
		NRF24_CE_LOW;
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4819      	ldr	r0, [pc, #100]	@ (8001044 <nRF24_TX_Mode+0x78>)
 8000fe0:	f7ff fbca 	bl	8000778 <LL_GPIO_ResetOutputPin>
 8000fe4:	e006      	b.n	8000ff4 <nRF24_TX_Mode+0x28>
	else if(device == 0)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <nRF24_TX_Mode+0x28>
		NRF24_CE2_LOW;
 8000fec:	2104      	movs	r1, #4
 8000fee:	4815      	ldr	r0, [pc, #84]	@ (8001044 <nRF24_TX_Mode+0x78>)
 8000ff0:	f7ff fbc2 	bl	8000778 <LL_GPIO_ResetOutputPin>
	uint8_t config = nRF24_ReadConfig(device);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fec1 	bl	8000d7e <nRF24_ReadConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	73fb      	strb	r3, [r7, #15]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	f023 0301 	bic.w	r3, r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fec0 	bl	8000d9c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT),device);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4619      	mov	r1, r3
 8001020:	2070      	movs	r0, #112	@ 0x70
 8001022:	f7ff fe9a 	bl	8000d5a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX(device);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f886 	bl	800113a <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX(device);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f85b 	bl	80010ec <nRF24_FlushTX>

	nRF24_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fbac 	bl	8000794 <nRF24_Delay>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	48000400 	.word	0x48000400

08001048 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size,uint8_t device)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
 8001054:	4613      	mov	r3, r2
 8001056:	70bb      	strb	r3, [r7, #2]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size,device);
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE,device);
 8001058:	78bb      	ldrb	r3, [r7, #2]
 800105a:	2201      	movs	r2, #1
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	20a0      	movs	r0, #160	@ 0xa0
 8001060:	f7ff fc37 	bl	80008d2 <nRF24_WriteRegisters>
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <nRF24_WaitTX>:

void nRF24_WaitTX(uint8_t device)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	if(device == 1)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d104      	bne.n	8001086 <nRF24_WaitTX+0x1a>
		NRF24_CE_HIGH;
 800107c:	2102      	movs	r1, #2
 800107e:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <nRF24_WaitTX+0x7c>)
 8001080:	f7ff fb6c 	bl	800075c <LL_GPIO_SetOutputPin>
 8001084:	e006      	b.n	8001094 <nRF24_WaitTX+0x28>
	else if(device == 0)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <nRF24_WaitTX+0x28>
		NRF24_CE2_HIGH;
 800108c:	2104      	movs	r1, #4
 800108e:	4816      	ldr	r0, [pc, #88]	@ (80010e8 <nRF24_WaitTX+0x7c>)
 8001090:	f7ff fb64 	bl	800075c <LL_GPIO_SetOutputPin>
	nRF24_Delay(2);
 8001094:	2002      	movs	r0, #2
 8001096:	f7ff fb7d 	bl	8000794 <nRF24_Delay>
	if(device == 1)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d104      	bne.n	80010aa <nRF24_WaitTX+0x3e>
		NRF24_CE_LOW;
 80010a0:	2102      	movs	r1, #2
 80010a2:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <nRF24_WaitTX+0x7c>)
 80010a4:	f7ff fb68 	bl	8000778 <LL_GPIO_ResetOutputPin>
 80010a8:	e006      	b.n	80010b8 <nRF24_WaitTX+0x4c>
	else if(device == 0)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <nRF24_WaitTX+0x4c>
		NRF24_CE2_LOW;
 80010b0:	2104      	movs	r1, #4
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <nRF24_WaitTX+0x7c>)
 80010b4:	f7ff fb60 	bl	8000778 <LL_GPIO_ResetOutputPin>
	do
	{
		nRF24_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff fb6b 	bl	8000794 <nRF24_Delay>
		status = nRF24_ReadStatus(device);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fe3b 	bl	8000d3c <nRF24_ReadStatus>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d104      	bne.n	80010de <nRF24_WaitTX+0x72>
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0ec      	beq.n	80010b8 <nRF24_WaitTX+0x4c>

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000400 	.word	0x48000400

080010ec <nRF24_FlushTX>:

void nRF24_FlushTX(uint8_t device)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80010f6:	23e1      	movs	r3, #225	@ 0xe1
 80010f8:	73fb      	strb	r3, [r7, #15]

	if(device == 0)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <nRF24_FlushTX+0x1a>
		spi_cs_set_low();
 8001100:	f000 fdda 	bl	8001cb8 <spi_cs_set_low>
 8001104:	e004      	b.n	8001110 <nRF24_FlushTX+0x24>
	else if(device == 1)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <nRF24_FlushTX+0x24>
		spi_cs2_set_low();
 800110c:	f000 fdec 	bl	8001ce8 <spi_cs2_set_low>
	spi_write_data(&command, 1);
 8001110:	f107 030f 	add.w	r3, r7, #15
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fdf2 	bl	8001d00 <spi_write_data>
	if(device == 0)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <nRF24_FlushTX+0x3c>
		spi_cs_set_high();
 8001122:	f000 fdbd 	bl	8001ca0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();
}
 8001126:	e004      	b.n	8001132 <nRF24_FlushTX+0x46>
	else if(device == 1)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <nRF24_FlushTX+0x46>
		spi_cs2_set_high();
 800112e:	f000 fdcf 	bl	8001cd0 <spi_cs2_set_high>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <nRF24_FlushRX>:

// RX

void nRF24_FlushRX(uint8_t device)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
	if(device == 0)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <nRF24_FlushRX+0x16>
		spi_cs_set_low();
 800114a:	f000 fdb5 	bl	8001cb8 <spi_cs_set_low>
 800114e:	e004      	b.n	800115a <nRF24_FlushRX+0x20>
	else if(device == 1)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <nRF24_FlushRX+0x20>
		spi_cs2_set_low();
 8001156:	f000 fdc7 	bl	8001ce8 <spi_cs2_set_low>
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800115a:	23e2      	movs	r3, #226	@ 0xe2
 800115c:	73fb      	strb	r3, [r7, #15]
	spi_write_data(&command, 1);
 800115e:	f107 030f 	add.w	r3, r7, #15
 8001162:	2101      	movs	r1, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fdcb 	bl	8001d00 <spi_write_data>
	if(device == 0)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <nRF24_FlushRX+0x3c>
		spi_cs_set_high();
 8001170:	f000 fd96 	bl	8001ca0 <spi_cs_set_high>
	else if(device == 1)
		spi_cs2_set_high();
}
 8001174:	e004      	b.n	8001180 <nRF24_FlushRX+0x46>
	else if(device == 1)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <nRF24_FlushRX+0x46>
		spi_cs2_set_high();
 800117c:	f000 fda8 	bl	8001cd0 <spi_cs2_set_high>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <nRF24_RX_Mode>:


void nRF24_RX_Mode(uint8_t device)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig(device);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fdf2 	bl	8000d7e <nRF24_ReadConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup,device);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	461a      	mov	r2, r3
 80011a2:	491a      	ldr	r1, [pc, #104]	@ (800120c <nRF24_RX_Mode+0x84>)
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f835 	bl	8001214 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	73fb      	strb	r3, [r7, #15]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config,device);
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fdeb 	bl	8000d9c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT),device);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2070      	movs	r0, #112	@ 0x70
 80011cc:	f7ff fdc5 	bl	8000d5a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX(device);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffb1 	bl	800113a <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX(device);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff86 	bl	80010ec <nRF24_FlushTX>

	if(device == 1)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <nRF24_RX_Mode+0x68>
		NRF24_CE_HIGH;
 80011e6:	2102      	movs	r1, #2
 80011e8:	4809      	ldr	r0, [pc, #36]	@ (8001210 <nRF24_RX_Mode+0x88>)
 80011ea:	f7ff fab7 	bl	800075c <LL_GPIO_SetOutputPin>
 80011ee:	e006      	b.n	80011fe <nRF24_RX_Mode+0x76>
	else if(device == 0)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <nRF24_RX_Mode+0x76>
		NRF24_CE2_HIGH;
 80011f6:	2104      	movs	r1, #4
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <nRF24_RX_Mode+0x88>)
 80011fa:	f7ff faaf 	bl	800075c <LL_GPIO_SetOutputPin>
	nRF24_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fac8 	bl	8000794 <nRF24_Delay>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000028 	.word	0x20000028
 8001210:	48000400 	.word	0x48000400

08001214 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address,uint8_t device)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <nRF24_SetRXAddress+0x1c>
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d11d      	bne.n	800126c <nRF24_SetRXAddress+0x58>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e00d      	b.n	8001252 <nRF24_SetRXAddress+0x3e>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	441a      	add	r2, r3
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f1c3 0302 	rsb	r3, r3, #2
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	3310      	adds	r3, #16
 8001246:	443b      	add	r3, r7
 8001248:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d9ee      	bls.n	8001236 <nRF24_SetRXAddress+0x22>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE,device);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	330a      	adds	r3, #10
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	2203      	movs	r2, #3
 8001266:	f7ff fb34 	bl	80008d2 <nRF24_WriteRegisters>
	{
 800126a:	e00a      	b.n	8001282 <nRF24_SetRXAddress+0x6e>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1],device);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	330a      	adds	r3, #10
 8001270:	b2d8      	uxtb	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3302      	adds	r3, #2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	79ba      	ldrb	r2, [r7, #6]
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff faf9 	bl	8000872 <nRF24_WriteRegister>
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <nRF24_ReadRXPaylaod>:
	return NRF24_NO_RECEIVED_PACKET;
#endif
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size,uint8_t device)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	71fb      	strb	r3, [r7, #7]
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize(device);
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size,device);
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE,device);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2201      	movs	r2, #1
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	2061      	movs	r0, #97	@ 0x61
 80012a0:	f7ff fab5 	bl	800080e <nRF24_ReadRegisters>
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR),device);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2101      	movs	r1, #1
 80012aa:	2007      	movs	r0, #7
 80012ac:	f7ff fae1 	bl	8000872 <nRF24_WriteRegister>
	if(nRF24_ReadStatus(device) & (1<<NRF24_TX_DS))
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd42 	bl	8000d3c <nRF24_ReadStatus>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <nRF24_ReadRXPaylaod+0x44>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS),device);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	461a      	mov	r2, r3
 80012c6:	2120      	movs	r1, #32
 80012c8:	2007      	movs	r0, #7
 80012ca:	f7ff fad2 	bl	8000872 <nRF24_WriteRegister>
#endif
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <nRF24_RXAvailible>:

uint8_t nRF24_RXAvailible(uint8_t device)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nRF24_ReadStatus(device);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd29 	bl	8000d3c <nRF24_ReadStatus>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00e      	beq.n	8001316 <nRF24_RXAvailible+0x3e>
	{
		nrf24_rx_flag = 1;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <nRF24_RXAvailible+0x48>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001304:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteStatus(status,device);
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fd24 	bl	8000d5a <nRF24_WriteStatus>
		return 1;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <nRF24_RXAvailible+0x40>
	}
	return 0;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000002b 	.word	0x2000002b

08001324 <LL_AHB2_GRP1_EnableClock>:
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800132e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001330:	4907      	ldr	r1, [pc, #28]	@ (8001350 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800133a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000

08001354 <LL_GPIO_SetPinMode>:
{
 8001354:	b480      	push	{r7}
 8001356:	b08b      	sub	sp, #44	@ 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800137a:	2320      	movs	r3, #32
 800137c:	e003      	b.n	8001386 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2103      	movs	r1, #3
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	61fb      	str	r3, [r7, #28]
  return result;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80013a8:	2320      	movs	r3, #32
 80013aa:	e003      	b.n	80013b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	372c      	adds	r7, #44	@ 0x2c
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_GPIO_SetPinSpeed>:
{
 80013ce:	b480      	push	{r7}
 80013d0:	b08b      	sub	sp, #44	@ 0x2c
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	613b      	str	r3, [r7, #16]
  return result;
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80013f4:	2320      	movs	r3, #32
 80013f6:	e003      	b.n	8001400 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2103      	movs	r1, #3
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	61fb      	str	r3, [r7, #28]
  return result;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001422:	2320      	movs	r3, #32
 8001424:	e003      	b.n	800142e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	372c      	adds	r7, #44	@ 0x2c
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_GPIO_SetPinPull>:
{
 8001448:	b480      	push	{r7}
 800144a:	b08b      	sub	sp, #44	@ 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	613b      	str	r3, [r7, #16]
  return result;
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800146e:	2320      	movs	r3, #32
 8001470:	e003      	b.n	800147a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2103      	movs	r1, #3
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	401a      	ands	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	61fb      	str	r3, [r7, #28]
  return result;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800149c:	2320      	movs	r3, #32
 800149e:	e003      	b.n	80014a8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	60da      	str	r2, [r3, #12]
}
 80014b6:	bf00      	nop
 80014b8:	372c      	adds	r7, #44	@ 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_GPIO_IsInputPinSet>:
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d101      	bne.n	80014de <LL_GPIO_IsInputPinSet+0x1c>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_GPIO_IsInputPinSet+0x1e>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <init_ControlerButtons>:
 */
#include "main.h"
#include "radioControl.h"
#include "nRF24.h"

void init_ControlerButtons(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff ff17 	bl	8001324 <LL_AHB2_GRP1_EnableClock>

	LL_GPIO_SetPinPull(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_PULL_UP);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2102      	movs	r1, #2
 80014fa:	4818      	ldr	r0, [pc, #96]	@ (800155c <init_ControlerButtons+0x70>)
 80014fc:	f7ff ffa4 	bl	8001448 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 8001500:	2200      	movs	r2, #0
 8001502:	2102      	movs	r1, #2
 8001504:	4815      	ldr	r0, [pc, #84]	@ (800155c <init_ControlerButtons+0x70>)
 8001506:	f7ff ff62 	bl	80013ce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(FORWARD_GPIO, FORWARD_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800150a:	2200      	movs	r2, #0
 800150c:	2102      	movs	r1, #2
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <init_ControlerButtons+0x70>)
 8001510:	f7ff ff20 	bl	8001354 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_PULL_UP);
 8001514:	2201      	movs	r2, #1
 8001516:	2101      	movs	r1, #1
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <init_ControlerButtons+0x70>)
 800151a:	f7ff ff95 	bl	8001448 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <init_ControlerButtons+0x70>)
 8001524:	f7ff ff53 	bl	80013ce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(LEFT_GPIO, LEFT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <init_ControlerButtons+0x70>)
 800152e:	f7ff ff11 	bl	8001354 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinPull(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_PULL_UP);
 8001532:	2201      	movs	r2, #1
 8001534:	2110      	movs	r1, #16
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f7ff ff85 	bl	8001448 <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_SPEED_FREQ_LOW);
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
 8001542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001546:	f7ff ff42 	bl	80013ce <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinMode(RIGHT_GPIO, RIGHT_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f7ff feff 	bl	8001354 <LL_GPIO_SetPinMode>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	48000800 	.word	0x48000800

08001560 <robotComandsSend_test>:

uint8_t robotComandsSend_test(uint8_t transmitter){
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if (!LL_GPIO_IsInputPinSet(FORWARD_GPIO, FORWARD_BUTTON_Pin))
 800156a:	2102      	movs	r1, #2
 800156c:	481e      	ldr	r0, [pc, #120]	@ (80015e8 <robotComandsSend_test+0x88>)
 800156e:	f7ff ffa8 	bl	80014c2 <LL_GPIO_IsInputPinSet>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d132      	bne.n	80015de <robotComandsSend_test+0x7e>
	{
		  uint8_t input = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
		  uint8_t output = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
		  uint8_t size = 1;
 8001580:	2301      	movs	r3, #1
 8001582:	737b      	strb	r3, [r7, #13]

		  LL_mDelay(50);
 8001584:	2032      	movs	r0, #50	@ 0x32
 8001586:	f001 fa01 	bl	800298c <LL_mDelay>
		  nRF24_SendPacket(&input, size, transmitter);
 800158a:	7b79      	ldrb	r1, [r7, #13]
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	f107 030f 	add.w	r3, r7, #15
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fcb6 	bl	8000f04 <nRF24_SendPacket>
		  LL_mDelay(50);
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f001 f9f7 	bl	800298c <LL_mDelay>

		  if(nRF24_RXAvailible(!transmitter))
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf0c      	ite	eq
 80015a4:	2301      	moveq	r3, #1
 80015a6:	2300      	movne	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fe94 	bl	80012d8 <nRF24_RXAvailible>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d011      	beq.n	80015da <robotComandsSend_test+0x7a>
		  {
		  		  nRF24_ReadRXPaylaod(&output, &size, !transmitter);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	f107 010d 	add.w	r1, r7, #13
 80015c8:	f107 030e 	add.w	r3, r7, #14
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fe5c 	bl	800128a <nRF24_ReadRXPaylaod>
		  		  output = output + 1;
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	73bb      	strb	r3, [r7, #14]
		  }
		  return output;
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	e000      	b.n	80015e0 <robotComandsSend_test+0x80>
	}
	return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	48000800 	.word	0x48000800

080015ec <LL_AHB2_GRP1_EnableClock>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <LL_APB1_GRP1_EnableClock>:
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001626:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001628:	4907      	ldr	r1, [pc, #28]	@ (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001632:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000

0800164c <LL_GPIO_SetOutputPin>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	619a      	str	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_GPIO_ResetOutputPin>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f423 7282 	bic.w	r2, r3, #260	@ 0x104
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 0210 	bic.w	r2, r3, #16
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	605a      	str	r2, [r3, #4]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0201 	bic.w	r2, r3, #1
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 0202 	bic.w	r2, r3, #2
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 4244 	bic.w	r2, r3, #50176	@ 0xc400
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_15BIT
  *         @arg @ref LL_SPI_DATAWIDTH_16BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	605a      	str	r2, [r3, #4]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 0204 	bic.w	r2, r3, #4
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	605a      	str	r2, [r3, #4]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b02      	cmp	r3, #2
 800188a:	d101      	bne.n	8001890 <LL_SPI_IsActiveFlag_TXE+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	2b80      	cmp	r3, #128	@ 0x80
 80018b0:	d101      	bne.n	80018b6 <LL_SPI_IsActiveFlag_BSY+0x18>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	605a      	str	r2, [r3, #4]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	605a      	str	r2, [r3, #4]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_SPI_IsEnabledIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_IsEnabledIT_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001970:	2b40      	cmp	r3, #64	@ 0x40
 8001972:	d101      	bne.n	8001978 <LL_SPI_IsEnabledIT_RXNE+0x18>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <LL_SPI_IsEnabledIT_RXNE+0x1a>
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_SPI_IsEnabledIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b80      	cmp	r3, #128	@ 0x80
 8001998:	d101      	bne.n	800199e <LL_SPI_IsEnabledIT_TXE+0x18>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_SPI_IsEnabledIT_TXE+0x1a>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	330c      	adds	r3, #12
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b2db      	uxtb	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	330c      	adds	r3, #12
 80019d8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <MX_SPI2_Init>:

static buffer_f rx_buffer = {0};
static buffer_f tx_buffer = {0};

void MX_SPI2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7ff fdf2 	bl	80015ec <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001a08:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001a0c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4834      	ldr	r0, [pc, #208]	@ (8001af8 <MX_SPI2_Init+0x10c>)
 8001a28:	f000 ff1a 	bl	8002860 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_11;
 8001a2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a30:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	482c      	ldr	r0, [pc, #176]	@ (8001af8 <MX_SPI2_Init+0x10c>)
 8001a48:	f000 ff0a 	bl	8002860 <LL_GPIO_Init>

	spi_cs_set_high();
 8001a4c:	f000 f928 	bl	8001ca0 <spi_cs_set_high>
	spi_cs2_set_high();
 8001a50:	f000 f93e 	bl	8001cd0 <spi_cs2_set_high>

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a58:	f7ff fde0 	bl	800161c <LL_APB1_GRP1_EnableClock>

		LL_SPI_Disable(spi);
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fe1f 	bl	80016a4 <LL_SPI_Disable>
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
 8001a66:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe28 	bl	80016c4 <LL_SPI_SetMode>
		LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);
 8001a74:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fe94 	bl	80017a8 <LL_SPI_SetTransferDirection>
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe55 	bl	8001736 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe3c 	bl	8001710 <LL_SPI_SetClockPhase>
		LL_SPI_SetNSSMode(spi, LL_SPI_NSS_SOFT);
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff feba 	bl	800181a <LL_SPI_SetNSSMode>
		LL_SPI_SetBaudRatePrescaler(spi, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe55 	bl	800175c <LL_SPI_SetBaudRatePrescaler>
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fe62 	bl	8001782 <LL_SPI_SetTransferBitOrder>
		LL_SPI_SetDataWidth(spi, LL_SPI_DATAWIDTH_8BIT);
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fe81 	bl	80017ce <LL_SPI_SetDataWidth>
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe09 	bl	80016ea <LL_SPI_SetStandard>
		LL_SPI_SetRxFIFOThreshold(spi, LL_SPI_RX_FIFO_TH_QUARTER);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe87 	bl	80017f4 <LL_SPI_SetRxFIFOThreshold>
		LL_SPI_Enable(spi);
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <MX_SPI2_Init+0x110>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fdca 	bl	8001684 <LL_SPI_Enable>

}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400
 8001afc:	20000000 	.word	0x20000000

08001b00 <SPI2_IRQHandler>:
	LL_SPI_EnableIT_RXNE(SPI2);
	LL_SPI_Enable(SPI2);
}

void SPI2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	if(LL_SPI_IsActiveFlag_TXE(SPI2) && LL_SPI_IsEnabledIT_TXE(SPI2))
 8001b04:	480e      	ldr	r0, [pc, #56]	@ (8001b40 <SPI2_IRQHandler+0x40>)
 8001b06:	f7ff feb7 	bl	8001878 <LL_SPI_IsActiveFlag_TXE>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <SPI2_IRQHandler+0x20>
 8001b10:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <SPI2_IRQHandler+0x40>)
 8001b12:	f7ff ff38 	bl	8001986 <LL_SPI_IsEnabledIT_TXE>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SPI2_IRQHandler+0x20>
	{
		spi_transmit_callback();
 8001b1c:	f000 f812 	bl	8001b44 <spi_transmit_callback>
	}
	if(LL_SPI_IsActiveFlag_RXNE(SPI2) && LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001b20:	4807      	ldr	r0, [pc, #28]	@ (8001b40 <SPI2_IRQHandler+0x40>)
 8001b22:	f7ff fe96 	bl	8001852 <LL_SPI_IsActiveFlag_RXNE>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <SPI2_IRQHandler+0x3c>
 8001b2c:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <SPI2_IRQHandler+0x40>)
 8001b2e:	f7ff ff17 	bl	8001960 <LL_SPI_IsEnabledIT_RXNE>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SPI2_IRQHandler+0x3c>
	{
		spi_receive_callback();
 8001b38:	f000 f86c 	bl	8001c14 <spi_receive_callback>
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40003800 	.word	0x40003800

08001b44 <spi_transmit_callback>:

void spi_transmit_callback(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	if(tx_buffer.count > 0)
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d02e      	beq.n	8001bae <spi_transmit_callback+0x6a>
	{
		if(!LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001b50:	482e      	ldr	r0, [pc, #184]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001b52:	f7ff ff05 	bl	8001960 <LL_SPI_IsEnabledIT_RXNE>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11f      	bne.n	8001b9c <spi_transmit_callback+0x58>
		{
			LL_SPI_TransmitData8(SPI2, *tx_buffer.data_ptr);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4829      	ldr	r0, [pc, #164]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001b66:	f7ff ff2f 	bl	80019c8 <LL_SPI_TransmitData8>

			//echo
			rx_buffer.data_ptr = tx_buffer.data_ptr;
 8001b6a:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a28      	ldr	r2, [pc, #160]	@ (8001c10 <spi_transmit_callback+0xcc>)
 8001b70:	6013      	str	r3, [r2, #0]
			rx_buffer.data_ptr++;
 8001b72:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <spi_transmit_callback+0xcc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <spi_transmit_callback+0xcc>)
 8001b7a:	6013      	str	r3, [r2, #0]
			rx_buffer.count--;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <spi_transmit_callback+0xcc>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <spi_transmit_callback+0xcc>)
 8001b84:	6053      	str	r3, [r2, #4]
			// end echo

			tx_buffer.data_ptr++;
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b8e:	6013      	str	r3, [r2, #0]
			tx_buffer.count--;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001b98:	6053      	str	r3, [r2, #4]
 8001b9a:	e008      	b.n	8001bae <spi_transmit_callback+0x6a>
		}
		else
		{
			LL_SPI_TransmitData8(SPI2, DUMMY_BYTE);
 8001b9c:	21ff      	movs	r1, #255	@ 0xff
 8001b9e:	481b      	ldr	r0, [pc, #108]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001ba0:	f7ff ff12 	bl	80019c8 <LL_SPI_TransmitData8>
			tx_buffer.count--;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001bac:	6053      	str	r3, [r2, #4]
		}
	}
	if(tx_buffer.count <= 0 && !LL_SPI_IsEnabledIT_RXNE(SPI2))
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <spi_transmit_callback+0xc4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d126      	bne.n	8001c04 <spi_transmit_callback+0xc0>
 8001bb6:	4815      	ldr	r0, [pc, #84]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bb8:	f7ff fed2 	bl	8001960 <LL_SPI_IsEnabledIT_RXNE>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d120      	bne.n	8001c04 <spi_transmit_callback+0xc0>
	{
		LL_SPI_DisableIT_TXE(SPI2);
 8001bc2:	4812      	ldr	r0, [pc, #72]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bc4:	f7ff febc 	bl	8001940 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY)
 8001bc8:	bf00      	nop
 8001bca:	4810      	ldr	r0, [pc, #64]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bcc:	f7ff fe88 	bl	80018e0 <LL_SPI_GetTxFIFOLevel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <spi_transmit_callback+0x86>
			;

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0)
 8001bd6:	bf00      	nop
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bda:	f7ff fe60 	bl	800189e <LL_SPI_IsActiveFlag_BSY>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <spi_transmit_callback+0x94>
			;

		LL_SPI_Disable(SPI2);
 8001be4:	4809      	ldr	r0, [pc, #36]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001be6:	f7ff fd5d 	bl	80016a4 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8001bea:	e002      	b.n	8001bf2 <spi_transmit_callback+0xae>
		{
			LL_SPI_ReceiveData8(SPI2);
 8001bec:	4807      	ldr	r0, [pc, #28]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bee:	f7ff fedd 	bl	80019ac <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001bf4:	f7ff fe66 	bl	80018c4 <LL_SPI_GetRxFIFOLevel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f6      	bne.n	8001bec <spi_transmit_callback+0xa8>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <spi_transmit_callback+0xc8>)
 8001c00:	f7ff fe7c 	bl	80018fc <LL_SPI_ClearFlag_OVR>
	}
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000034 	.word	0x20000034
 8001c0c:	40003800 	.word	0x40003800
 8001c10:	2000002c 	.word	0x2000002c

08001c14 <spi_receive_callback>:

void spi_receive_callback(void)
{
 8001c14:	b598      	push	{r3, r4, r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	if(rx_buffer.count > 0)
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <spi_receive_callback+0x2e>
	{
		*rx_buffer.data_ptr = LL_SPI_ReceiveData8(SPI2);
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	481d      	ldr	r0, [pc, #116]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c26:	f7ff fec1 	bl	80019ac <LL_SPI_ReceiveData8>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	7023      	strb	r3, [r4, #0]

		rx_buffer.data_ptr++;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a18      	ldr	r2, [pc, #96]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c36:	6013      	str	r3, [r2, #0]
		rx_buffer.count--;
 8001c38:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c40:	6053      	str	r3, [r2, #4]
	}

	if(rx_buffer.count <= 0)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <spi_receive_callback+0x84>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d123      	bne.n	8001c92 <spi_receive_callback+0x7e>
	{
		LL_SPI_DisableIT_RXNE(SPI2);
 8001c4a:	4814      	ldr	r0, [pc, #80]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c4c:	f7ff fe68 	bl	8001920 <LL_SPI_DisableIT_RXNE>
		LL_SPI_DisableIT_TXE(SPI2);
 8001c50:	4812      	ldr	r0, [pc, #72]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c52:	f7ff fe75 	bl	8001940 <LL_SPI_DisableIT_TXE>

		while (LL_SPI_GetTxFIFOLevel(SPI2) != LL_SPI_TX_FIFO_EMPTY);
 8001c56:	bf00      	nop
 8001c58:	4810      	ldr	r0, [pc, #64]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c5a:	f7ff fe41 	bl	80018e0 <LL_SPI_GetTxFIFOLevel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f9      	bne.n	8001c58 <spi_receive_callback+0x44>

		while (LL_SPI_IsActiveFlag_BSY(SPI2) != 0);
 8001c64:	bf00      	nop
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c68:	f7ff fe19 	bl	800189e <LL_SPI_IsActiveFlag_BSY>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <spi_receive_callback+0x52>

		LL_SPI_Disable(SPI2);
 8001c72:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c74:	f7ff fd16 	bl	80016a4 <LL_SPI_Disable>

		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8001c78:	e002      	b.n	8001c80 <spi_receive_callback+0x6c>
		{
			LL_SPI_ReceiveData8(SPI2);
 8001c7a:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c7c:	f7ff fe96 	bl	80019ac <LL_SPI_ReceiveData8>
		while (LL_SPI_GetRxFIFOLevel(SPI2) != LL_SPI_RX_FIFO_EMPTY)
 8001c80:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c82:	f7ff fe1f 	bl	80018c4 <LL_SPI_GetRxFIFOLevel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f6      	bne.n	8001c7a <spi_receive_callback+0x66>
		}

		LL_SPI_ClearFlag_OVR(SPI2);
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <spi_receive_callback+0x88>)
 8001c8e:	f7ff fe35 	bl	80018fc <LL_SPI_ClearFlag_OVR>

	}
}
 8001c92:	bf00      	nop
 8001c94:	bd98      	pop	{r3, r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000002c 	.word	0x2000002c
 8001c9c:	40003800 	.word	0x40003800

08001ca0 <spi_cs_set_high>:

void spi_cs_set_high(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8001ca4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <spi_cs_set_high+0x14>)
 8001caa:	f7ff fccf 	bl	800164c <LL_GPIO_SetOutputPin>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <spi_cs_set_low>:

void spi_cs_set_low(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8001cbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <spi_cs_set_low+0x14>)
 8001cc2:	f7ff fcd1 	bl	8001668 <LL_GPIO_ResetOutputPin>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <spi_cs2_set_high>:

void spi_cs2_set_high(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8001cd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <spi_cs2_set_high+0x14>)
 8001cda:	f7ff fcb7 	bl	800164c <LL_GPIO_SetOutputPin>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	48000400 	.word	0x48000400

08001ce8 <spi_cs2_set_low>:

void spi_cs2_set_low(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8001cec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <spi_cs2_set_low+0x14>)
 8001cf2:	f7ff fcb9 	bl	8001668 <LL_GPIO_ResetOutputPin>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	48000400 	.word	0x48000400

08001d00 <spi_write_data>:

void spi_write_data(uint8_t *data, uint32_t size)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]

	while(count < size)
 8001d0e:	e014      	b.n	8001d3a <spi_write_data+0x3a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 8001d10:	bf00      	nop
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <spi_write_data+0x94>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fdae 	bl	8001878 <LL_SPI_IsActiveFlag_TXE>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f7      	beq.n	8001d12 <spi_write_data+0x12>
			;

		LL_SPI_TransmitData8(spi, *(data+count));
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <spi_write_data+0x94>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7ff fe4a 	bl	80019c8 <LL_SPI_TransmitData8>

		count++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3e6      	bcc.n	8001d10 <spi_write_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8001d42:	bf00      	nop
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <spi_write_data+0x94>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fdc9 	bl	80018e0 <LL_SPI_GetTxFIFOLevel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f7      	bne.n	8001d44 <spi_write_data+0x44>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8001d54:	bf00      	nop
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <spi_write_data+0x94>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fd9f 	bl	800189e <LL_SPI_IsActiveFlag_BSY>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f7      	bne.n	8001d56 <spi_write_data+0x56>
		;


	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001d66:	e004      	b.n	8001d72 <spi_write_data+0x72>
	{
		LL_SPI_ReceiveData8(spi);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <spi_write_data+0x94>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe1d 	bl	80019ac <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <spi_write_data+0x94>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fda4 	bl	80018c4 <LL_SPI_GetRxFIFOLevel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f2      	bne.n	8001d68 <spi_write_data+0x68>
	}

	LL_SPI_ClearFlag_OVR(spi);
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <spi_write_data+0x94>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fdb8 	bl	80018fc <LL_SPI_ClearFlag_OVR>
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000

08001d98 <spi_read_data>:

void spi_read_data(uint8_t *data, uint32_t size)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]

	while(count < size)
 8001da6:	e024      	b.n	8001df2 <spi_read_data+0x5a>
	{
		while (!LL_SPI_IsActiveFlag_TXE(spi))
 8001da8:	bf00      	nop
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <spi_read_data+0xb4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd62 	bl	8001878 <LL_SPI_IsActiveFlag_TXE>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f7      	beq.n	8001daa <spi_read_data+0x12>
			;

		LL_SPI_TransmitData8(spi, DUMMY_BYTE);
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <spi_read_data+0xb4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	21ff      	movs	r1, #255	@ 0xff
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe01 	bl	80019c8 <LL_SPI_TransmitData8>

		while (!LL_SPI_IsActiveFlag_RXNE(spi))
 8001dc6:	bf00      	nop
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <spi_read_data+0xb4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fd40 	bl	8001852 <LL_SPI_IsActiveFlag_RXNE>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f7      	beq.n	8001dc8 <spi_read_data+0x30>
			;

		*(data+count) = LL_SPI_ReceiveData8(spi);
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <spi_read_data+0xb4>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	18d4      	adds	r4, r2, r3
 8001de2:	4608      	mov	r0, r1
 8001de4:	f7ff fde2 	bl	80019ac <LL_SPI_ReceiveData8>
 8001de8:	4603      	mov	r3, r0
 8001dea:	7023      	strb	r3, [r4, #0]

		count++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
	while(count < size)
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3d6      	bcc.n	8001da8 <spi_read_data+0x10>
	}

	while (LL_SPI_GetTxFIFOLevel(spi) != LL_SPI_TX_FIFO_EMPTY)
 8001dfa:	bf00      	nop
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <spi_read_data+0xb4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fd6d 	bl	80018e0 <LL_SPI_GetTxFIFOLevel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f7      	bne.n	8001dfc <spi_read_data+0x64>
		;

	while (LL_SPI_IsActiveFlag_BSY(spi) != 0)
 8001e0c:	bf00      	nop
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <spi_read_data+0xb4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fd43 	bl	800189e <LL_SPI_IsActiveFlag_BSY>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f7      	bne.n	8001e0e <spi_read_data+0x76>
		;

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001e1e:	e004      	b.n	8001e2a <spi_read_data+0x92>
	{
		LL_SPI_ReceiveData8(spi);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <spi_read_data+0xb4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fdc1 	bl	80019ac <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <spi_read_data+0xb4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fd48 	bl	80018c4 <LL_SPI_GetRxFIFOLevel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f2      	bne.n	8001e20 <spi_read_data+0x88>
	}

	LL_SPI_ClearFlag_OVR(spi);
 8001e3a:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <spi_read_data+0xb4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fd5c 	bl	80018fc <LL_SPI_ClearFlag_OVR>
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	20000000 	.word	0x20000000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <LL_AHB2_GRP1_EnableClock>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ed4:	4907      	ldr	r1, [pc, #28]	@ (8001ef4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <LL_APB1_GRP1_EnableClock>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f04:	4907      	ldr	r1, [pc, #28]	@ (8001f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000

08001f28 <LL_APB2_GRP1_EnableClock>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f34:	4907      	ldr	r1, [pc, #28]	@ (8001f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000

08001f58 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	621a      	str	r2, [r3, #32]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d028      	beq.n	800205c <LL_TIM_OC_SetMode+0x64>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d023      	beq.n	8002058 <LL_TIM_OC_SetMode+0x60>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d01e      	beq.n	8002054 <LL_TIM_OC_SetMode+0x5c>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b40      	cmp	r3, #64	@ 0x40
 800201a:	d019      	beq.n	8002050 <LL_TIM_OC_SetMode+0x58>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002022:	d013      	beq.n	800204c <LL_TIM_OC_SetMode+0x54>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d00d      	beq.n	8002048 <LL_TIM_OC_SetMode+0x50>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002032:	d007      	beq.n	8002044 <LL_TIM_OC_SetMode+0x4c>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800203a:	d101      	bne.n	8002040 <LL_TIM_OC_SetMode+0x48>
 800203c:	2307      	movs	r3, #7
 800203e:	e00e      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002040:	2308      	movs	r3, #8
 8002042:	e00c      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002044:	2306      	movs	r3, #6
 8002046:	e00a      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002048:	2305      	movs	r3, #5
 800204a:	e008      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 800204c:	2304      	movs	r3, #4
 800204e:	e006      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002050:	2303      	movs	r3, #3
 8002052:	e004      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_TIM_OC_SetMode+0x66>
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3318      	adds	r3, #24
 8002064:	4619      	mov	r1, r3
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <LL_TIM_OC_SetMode+0xac>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	440b      	add	r3, r1
 800206e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <LL_TIM_OC_SetMode+0xb0>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	4619      	mov	r1, r3
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <LL_TIM_OC_SetMode+0xb4>)
 800207e:	408b      	lsls	r3, r1
 8002080:	43db      	mvns	r3, r3
 8002082:	401a      	ands	r2, r3
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <LL_TIM_OC_SetMode+0xb0>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	4619      	mov	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	408b      	lsls	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	08002a64 	.word	0x08002a64
 80020a8:	08002a70 	.word	0x08002a70
 80020ac:	00010073 	.word	0x00010073

080020b0 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d028      	beq.n	8002114 <LL_TIM_OC_SetPolarity+0x64>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d023      	beq.n	8002110 <LL_TIM_OC_SetPolarity+0x60>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d01e      	beq.n	800210c <LL_TIM_OC_SetPolarity+0x5c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b40      	cmp	r3, #64	@ 0x40
 80020d2:	d019      	beq.n	8002108 <LL_TIM_OC_SetPolarity+0x58>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020da:	d013      	beq.n	8002104 <LL_TIM_OC_SetPolarity+0x54>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d00d      	beq.n	8002100 <LL_TIM_OC_SetPolarity+0x50>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ea:	d007      	beq.n	80020fc <LL_TIM_OC_SetPolarity+0x4c>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f2:	d101      	bne.n	80020f8 <LL_TIM_OC_SetPolarity+0x48>
 80020f4:	2307      	movs	r3, #7
 80020f6:	e00e      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 80020f8:	2308      	movs	r3, #8
 80020fa:	e00c      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 80020fc:	2306      	movs	r3, #6
 80020fe:	e00a      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 8002100:	2305      	movs	r3, #5
 8002102:	e008      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 8002104:	2304      	movs	r3, #4
 8002106:	e006      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 8002108:	2303      	movs	r3, #3
 800210a:	e004      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 800210c:	2302      	movs	r3, #2
 800210e:	e002      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_TIM_OC_SetPolarity+0x66>
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	490b      	ldr	r1, [pc, #44]	@ (800214c <LL_TIM_OC_SetPolarity+0x9c>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	4619      	mov	r1, r3
 8002124:	2302      	movs	r3, #2
 8002126:	408b      	lsls	r3, r1
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	4907      	ldr	r1, [pc, #28]	@ (800214c <LL_TIM_OC_SetPolarity+0x9c>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	4619      	mov	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	408b      	lsls	r3, r1
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	621a      	str	r2, [r3, #32]
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08002a7c 	.word	0x08002a7c

08002150 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f06f 0201 	mvn.w	r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	615a      	str	r2, [r3, #20]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_GPIO_SetPinMode>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	b08b      	sub	sp, #44	@ 0x2c
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	613b      	str	r3, [r7, #16]
  return result;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e003      	b.n	8002204 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2103      	movs	r1, #3
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61fb      	str	r3, [r7, #28]
  return result;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	372c      	adds	r7, #44	@ 0x2c
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_GPIO_SetPinSpeed>:
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	@ 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	613b      	str	r3, [r7, #16]
  return result;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e003      	b.n	800227e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2103      	movs	r1, #3
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	401a      	ands	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	61fb      	str	r3, [r7, #28]
  return result;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80022a0:	2320      	movs	r3, #32
 80022a2:	e003      	b.n	80022ac <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	372c      	adds	r7, #44	@ 0x2c
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_GPIO_SetPinPull>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	b08b      	sub	sp, #44	@ 0x2c
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	613b      	str	r3, [r7, #16]
  return result;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e003      	b.n	80022f8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2103      	movs	r1, #3
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	61fb      	str	r3, [r7, #28]
  return result;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e003      	b.n	8002326 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	60da      	str	r2, [r3, #12]
}
 8002334:	bf00      	nop
 8002336:	372c      	adds	r7, #44	@ 0x2c
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_GPIO_SetAFPin_0_7>:
{
 8002340:	b480      	push	{r7}
 8002342:	b08b      	sub	sp, #44	@ 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	613b      	str	r3, [r7, #16]
  return result;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	210f      	movs	r1, #15
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	61fb      	str	r3, [r7, #28]
  return result;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	372c      	adds	r7, #44	@ 0x2c
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <MX_TIM2_Init>:
  uint32_t pwm_duty;
/* USER CODE END 0 */

/* TIM2 init function */
  void MX_TIM2_Init(void)
  {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    /* Peripheral clock enable */
    LL_APB2_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff fdb1 	bl	8001f28 <LL_APB2_GRP1_EnableClock>

    LL_APB1_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7ff fd96 	bl	8001ef8 <LL_APB1_GRP1_EnableClock>
  LL_GPIO_SetPinPull(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_PULL_NO);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2101      	movs	r1, #1
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d4:	f7ff ff77 	bl	80022c6 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_SPEED_FREQ_LOW);
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e0:	f7ff ff34 	bl	800224c <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_0_7(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_AF_1);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2101      	movs	r1, #1
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ec:	f7ff ffa8 	bl	8002340 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TIM2_CH1_OC_Port, TIM2_CH1_OC_Pin, LL_GPIO_MODE_ALTERNATE);
 80023f0:	2202      	movs	r2, #2
 80023f2:	2101      	movs	r1, #1
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f8:	f7ff feeb 	bl	80021d2 <LL_GPIO_SetPinMode>

    LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80023fc:	2100      	movs	r1, #0
 80023fe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002402:	f7ff feb3 	bl	800216c <LL_TIM_SetClockSource>
    LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);
 8002406:	2100      	movs	r1, #0
 8002408:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800240c:	f7ff fdb4 	bl	8001f78 <LL_TIM_SetCounterMode>
    LL_TIM_SetPrescaler(TIM2, 4000-1);
 8002410:	f640 719f 	movw	r1, #3999	@ 0xf9f
 8002414:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002418:	f7ff fdc1 	bl	8001f9e <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(TIM2, RANGE-1);
 800241c:	21f9      	movs	r1, #249	@ 0xf9
 800241e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002422:	f7ff fdca 	bl	8001fba <LL_TIM_SetAutoReload>
    LL_TIM_GenerateEvent_UPDATE(TIM2);
 8002426:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800242a:	f7ff fec2 	bl	80021b2 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_ClearFlag_UPDATE(TIM2);
 800242e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002432:	f7ff feb0 	bl	8002196 <LL_TIM_ClearFlag_UPDATE>

    pwm_duty = 0;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_TIM2_Init+0xbc>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    LL_TIM_OC_SetCompareCH1(TIM2, pwm_duty);
 800243c:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_TIM2_Init+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002446:	f7ff fe83 	bl	8002150 <LL_TIM_OC_SetCompareCH1>

    LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 800244a:	2260      	movs	r2, #96	@ 0x60
 800244c:	2101      	movs	r1, #1
 800244e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002452:	f7ff fdd1 	bl	8001ff8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8002456:	2200      	movs	r2, #0
 8002458:	2101      	movs	r1, #1
 800245a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800245e:	f7ff fe27 	bl	80020b0 <LL_TIM_OC_SetPolarity>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8002462:	2101      	movs	r1, #1
 8002464:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002468:	f7ff fdb5 	bl	8001fd6 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);
 800246c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002470:	f7ff fd72 	bl	8001f58 <LL_TIM_EnableCounter>

  }
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000003c 	.word	0x2000003c

0800247c <MX_TIM3_Init>:

/* USER CODE BEGIN 1 */

void MX_TIM3_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	 LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	463b      	mov	r3, r7
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM2_Init 0 */

  /* Peripheral clock enable */
	 LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002492:	2002      	movs	r0, #2
 8002494:	f7ff fd30 	bl	8001ef8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002498:	2001      	movs	r0, #1
 800249a:	f7ff fd15 	bl	8001ec8 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800249e:	2340      	movs	r3, #64	@ 0x40
 80024a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024a2:	2302      	movs	r3, #2
 80024a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	463b      	mov	r3, r7
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024be:	f000 f9cf 	bl	8002860 <LL_GPIO_Init>

  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024c2:	2100      	movs	r1, #0
 80024c4:	4819      	ldr	r0, [pc, #100]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024c6:	f7ff fe51 	bl	800216c <LL_TIM_SetClockSource>
  LL_TIM_SetCounterMode(TIM3, LL_TIM_COUNTERMODE_UP);
 80024ca:	2100      	movs	r1, #0
 80024cc:	4817      	ldr	r0, [pc, #92]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024ce:	f7ff fd53 	bl	8001f78 <LL_TIM_SetCounterMode>
  LL_TIM_SetPrescaler(TIM3, 4000-1);
 80024d2:	f640 719f 	movw	r1, #3999	@ 0xf9f
 80024d6:	4815      	ldr	r0, [pc, #84]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024d8:	f7ff fd61 	bl	8001f9e <LL_TIM_SetPrescaler>
  LL_TIM_SetAutoReload(TIM3, RANGE-1);
 80024dc:	21f9      	movs	r1, #249	@ 0xf9
 80024de:	4813      	ldr	r0, [pc, #76]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024e0:	f7ff fd6b 	bl	8001fba <LL_TIM_SetAutoReload>
  LL_TIM_GenerateEvent_UPDATE(TIM3);
 80024e4:	4811      	ldr	r0, [pc, #68]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024e6:	f7ff fe64 	bl	80021b2 <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 80024ea:	4810      	ldr	r0, [pc, #64]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024ec:	f7ff fe53 	bl	8002196 <LL_TIM_ClearFlag_UPDATE>

  pwm_duty = 0;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <MX_TIM3_Init+0xb4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1(TIM3, pwm_duty);
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_TIM3_Init+0xb4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	480b      	ldr	r0, [pc, #44]	@ (800252c <MX_TIM3_Init+0xb0>)
 80024fe:	f7ff fe27 	bl	8002150 <LL_TIM_OC_SetCompareCH1>

  LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8002502:	2260      	movs	r2, #96	@ 0x60
 8002504:	2101      	movs	r1, #1
 8002506:	4809      	ldr	r0, [pc, #36]	@ (800252c <MX_TIM3_Init+0xb0>)
 8002508:	f7ff fd76 	bl	8001ff8 <LL_TIM_OC_SetMode>
  LL_TIM_OC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800250c:	2200      	movs	r2, #0
 800250e:	2101      	movs	r1, #1
 8002510:	4806      	ldr	r0, [pc, #24]	@ (800252c <MX_TIM3_Init+0xb0>)
 8002512:	f7ff fdcd 	bl	80020b0 <LL_TIM_OC_SetPolarity>

  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002516:	2101      	movs	r1, #1
 8002518:	4804      	ldr	r0, [pc, #16]	@ (800252c <MX_TIM3_Init+0xb0>)
 800251a:	f7ff fd5c 	bl	8001fd6 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800251e:	4803      	ldr	r0, [pc, #12]	@ (800252c <MX_TIM3_Init+0xb0>)
 8002520:	f7ff fd1a 	bl	8001f58 <LL_TIM_EnableCounter>

}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40000400 	.word	0x40000400
 8002530:	2000003c 	.word	0x2000003c

08002534 <PWM_GPIO_init>:
void PWM_GPIO_init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	463b      	mov	r3, r7
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]


	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800254a:	2001      	movs	r0, #1
 800254c:	f7ff fcbc 	bl	8001ec8 <LL_AHB2_GRP1_EnableClock>

	  GPIO_InitStruct.Pin = PWM_LOGIC2_Pin|PWM_LOGIC1_Pin;
 8002550:	2322      	movs	r3, #34	@ 0x22
 8002552:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002554:	2301      	movs	r3, #1
 8002556:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(PWM_LOGIC2_Port, &GPIO_InitStruct);
 8002564:	463b      	mov	r3, r7
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800256c:	f000 f978 	bl	8002860 <LL_GPIO_Init>

}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800257c:	f7ff fc92 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002582:	490d      	ldr	r1, [pc, #52]	@ (80025b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <LoopForever+0xe>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002598:	4c0a      	ldr	r4, [pc, #40]	@ (80025c4 <LoopForever+0x16>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025a6:	f000 fa29 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025aa:	f7fe f813 	bl	80005d4 <main>

080025ae <LoopForever>:

LoopForever:
    b LoopForever
 80025ae:	e7fe      	b.n	80025ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80025bc:	08002a90 	.word	0x08002a90
  ldr r2, =_sbss
 80025c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80025c4:	20000040 	.word	0x20000040

080025c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC1_2_IRQHandler>

080025ca <LL_GPIO_SetPinMode>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b08b      	sub	sp, #44	@ 0x2c
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	613b      	str	r3, [r7, #16]
  return result;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2103      	movs	r1, #3
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	61fb      	str	r3, [r7, #28]
  return result;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e003      	b.n	800262a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	431a      	orrs	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	372c      	adds	r7, #44	@ 0x2c
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_GPIO_SetPinOutputType>:
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	43db      	mvns	r3, r3
 8002658:	401a      	ands	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	605a      	str	r2, [r3, #4]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_GPIO_SetPinSpeed>:
{
 8002674:	b480      	push	{r7}
 8002676:	b08b      	sub	sp, #44	@ 0x2c
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	613b      	str	r3, [r7, #16]
  return result;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2103      	movs	r1, #3
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	61fb      	str	r3, [r7, #28]
  return result;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	372c      	adds	r7, #44	@ 0x2c
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_GPIO_SetPinPull>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b08b      	sub	sp, #44	@ 0x2c
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	613b      	str	r3, [r7, #16]
  return result;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2103      	movs	r1, #3
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]
  return result;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	372c      	adds	r7, #44	@ 0x2c
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_GPIO_SetAFPin_0_7>:
{
 8002768:	b480      	push	{r7}
 800276a:	b08b      	sub	sp, #44	@ 0x2c
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1a      	ldr	r2, [r3, #32]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	613b      	str	r3, [r7, #16]
  return result;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	210f      	movs	r1, #15
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	401a      	ands	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	61fb      	str	r3, [r7, #28]
  return result;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	431a      	orrs	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	372c      	adds	r7, #44	@ 0x2c
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_GPIO_SetAFPin_8_15>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	b08b      	sub	sp, #44	@ 0x2c
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	613b      	str	r3, [r7, #16]
  return result;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	210f      	movs	r1, #15
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	401a      	ands	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	61fb      	str	r3, [r7, #28]
  return result;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e003      	b.n	8002846 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002854:	bf00      	nop
 8002856:	372c      	adds	r7, #44	@ 0x2c
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	60fb      	str	r3, [r7, #12]
  return result;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <LL_GPIO_Init+0x26>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002890:	e048      	b.n	8002924 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03a      	beq.n	800291e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d003      	beq.n	80028b8 <LL_GPIO_Init+0x58>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d10e      	bne.n	80028d6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	461a      	mov	r2, r3
 80028be:	69b9      	ldr	r1, [r7, #24]
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fed7 	bl	8002674 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff feb7 	bl	8002644 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	461a      	mov	r2, r3
 80028dc:	69b9      	ldr	r1, [r7, #24]
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff05 	bl	80026ee <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d111      	bne.n	8002910 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2bff      	cmp	r3, #255	@ 0xff
 80028f0:	d807      	bhi.n	8002902 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	461a      	mov	r2, r3
 80028f8:	69b9      	ldr	r1, [r7, #24]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff34 	bl	8002768 <LL_GPIO_SetAFPin_0_7>
 8002900:	e006      	b.n	8002910 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	461a      	mov	r2, r3
 8002908:	69b9      	ldr	r1, [r7, #24]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ff69 	bl	80027e2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	461a      	mov	r2, r3
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fe56 	bl	80025ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1af      	bne.n	8002892 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <LL_InitTick+0x30>)
 8002950:	3b01      	subs	r3, #1
 8002952:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <LL_InitTick+0x30>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <LL_InitTick+0x30>)
 800295c:	2205      	movs	r2, #5
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e010 	.word	0xe000e010

08002970 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002978:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffdd 	bl	800293c <LL_InitTick>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002994:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <LL_mDelay+0x4c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800299e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d00c      	beq.n	80029c2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80029ae:	e008      	b.n	80029c2 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <LL_mDelay+0x4c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f3      	bne.n	80029b0 <LL_mDelay+0x24>
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <LL_SetSystemCoreClock+0x1c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000004 	.word	0x20000004

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	4d0d      	ldr	r5, [pc, #52]	@ (8002a34 <__libc_init_array+0x38>)
 8002a00:	4c0d      	ldr	r4, [pc, #52]	@ (8002a38 <__libc_init_array+0x3c>)
 8002a02:	1b64      	subs	r4, r4, r5
 8002a04:	10a4      	asrs	r4, r4, #2
 8002a06:	2600      	movs	r6, #0
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a3c <__libc_init_array+0x40>)
 8002a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a40 <__libc_init_array+0x44>)
 8002a10:	f000 f818 	bl	8002a44 <_init>
 8002a14:	1b64      	subs	r4, r4, r5
 8002a16:	10a4      	asrs	r4, r4, #2
 8002a18:	2600      	movs	r6, #0
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002a88 	.word	0x08002a88
 8002a38:	08002a88 	.word	0x08002a88
 8002a3c:	08002a88 	.word	0x08002a88
 8002a40:	08002a8c 	.word	0x08002a8c

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
